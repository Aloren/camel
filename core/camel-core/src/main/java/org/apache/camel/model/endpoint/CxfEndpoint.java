/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.HeaderFilterStrategy;

/**
 * The cxf component is used for SOAP WebServices using Apache CXF.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class CxfEndpoint {


    public static class CxfCommon extends EndpointConfiguration {
        /**
         * To lookup an existing configured CxfEndpoint. Must used bean: as
         * prefix. The option is a java.lang.String type.
         */
        private String beanId;
        /**
         * The service publish address. The option is a java.lang.String type.
         */
        private String address;
        /**
         * The data type messages supported by the CXF endpoint. The option is a
         * org.apache.camel.component.cxf.DataFormat type.
         */
        private DataFormat dataFormat;
        /**
         * The WSDL style that describes how parameters are represented in the
         * SOAP body. If the value is false, CXF will chose the document-literal
         * unwrapped style, If the value is true, CXF will chose the
         * document-literal wrapped style. The option is a java.lang.Boolean
         * type.
         */
        private Boolean wrappedStyle;
        /**
         * This option controls whether the CXF component, when running in
         * PAYLOAD mode, will DOM parse the incoming messages into DOM Elements
         * or keep the payload as a javax.xml.transform.Source object that would
         * allow streaming in some cases. The option is a java.lang.Boolean
         * type.
         */
        private Boolean allowStreaming;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * To use a custom configured CXF Bus. The option is a
         * org.apache.cxf.Bus type.
         */
        private Object bus;
        /**
         * This option is used to set the CXF continuation timeout which could
         * be used in CxfConsumer by default when the CXF server is using Jetty
         * or Servlet transport. The option is a long type.
         */
        private Long continuationTimeout;
        /**
         * To use a custom CxfBinding to control the binding between Camel
         * Message and CXF Message. The option is a
         * org.apache.camel.component.cxf.CxfBinding type.
         */
        private Object cxfBinding;
        /**
         * This option could apply the implementation of
         * org.apache.camel.component.cxf.CxfEndpointConfigurer which supports
         * to configure the CXF endpoint in programmatic way. User can configure
         * the CXF server and client by implementing configure{ServerClient}
         * method of CxfEndpointConfigurer. The option is a
         * org.apache.camel.component.cxf.CxfEndpointConfigurer type.
         */
        private Object cxfEndpointConfigurer;
        /**
         * Will set the default bus when CXF endpoint create a bus by itself.
         * The option is a boolean type.
         */
        private Boolean defaultBus;
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message. The option is a
         * org.apache.camel.spi.HeaderFilterStrategy type.
         */
        private HeaderFilterStrategy headerFilterStrategy;
        /**
         * Whether to merge protocol headers. If enabled then propagating
         * headers between Camel and CXF becomes more consistent and similar.
         * For more details see CAMEL-6393. The option is a boolean type.
         */
        private Boolean mergeProtocolHeaders;
        /**
         * To enable MTOM (attachments). This requires to use POJO or PAYLOAD
         * data format mode. The option is a boolean type.
         */
        private Boolean mtomEnabled;
        /**
         * To set additional CXF options using the key/value pairs from the Map.
         * For example to turn on stacktraces in SOAP faults,
         * properties.faultStackTraceEnabled=true. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        private Map<String, Object> properties;
        /**
         * Sets whether SOAP message validation should be disabled. The option
         * is a boolean type.
         */
        private Boolean skipPayloadMessagePartCheck;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;
        /**
         * This option enables CXF Logging Feature which writes inbound and
         * outbound SOAP messages to log. The option is a boolean type.
         */
        private Boolean loggingFeatureEnabled;
        /**
         * To limit the total size of number of bytes the logger will output
         * when logging feature has been enabled and -1 for no limit. The option
         * is a int type.
         */
        private Integer loggingSizeLimit;
        /**
         * This option controls whether the PhaseInterceptorChain skips logging
         * the Fault that it catches. The option is a boolean type.
         */
        private Boolean skipFaultLogging;
        /**
         * This option is used to set the basic authentication information of
         * password for the CXF client. The option is a java.lang.String type.
         */
        private String password;
        /**
         * This option is used to set the basic authentication information of
         * username for the CXF client. The option is a java.lang.String type.
         */
        private String username;
        /**
         * The bindingId for the service model to use. The option is a
         * java.lang.String type.
         */
        private String bindingId;
        /**
         * The endpoint name this service is implementing, it maps to the
         * wsdl:portname. In the format of ns:PORT_NAME where ns is a namespace
         * prefix valid at this scope. The option is a java.lang.String type.
         */
        private String portName;
        /**
         * This option can override the endpointUrl that published from the WSDL
         * which can be accessed with service address url plus wsd. The option
         * is a java.lang.String type.
         */
        private String publishedEndpointUrl;
        /**
         * The class name of the SEI (Service Endpoint Interface) class which
         * could have JSR181 annotation or not. The option is a
         * java.lang.Class<?> type.
         */
        private Class<Object> serviceClass;
        /**
         * The service name this service is implementing, it maps to the
         * wsdl:servicename. The option is a java.lang.String type.
         */
        private String serviceName;
        /**
         * The location of the WSDL. Can be on the classpath, file system, or be
         * hosted remotely. The option is a java.lang.String type.
         */
        private String wsdlURL;

        public String getBeanId() {
            return beanId;
        }

        public void setBeanId(String beanId) {
            this.beanId = beanId;
        }

        public String getAddress() {
            return address;
        }

        public void setAddress(String address) {
            this.address = address;
        }

        public DataFormat getDataFormat() {
            return dataFormat;
        }

        public void setDataFormat(DataFormat dataFormat) {
            this.dataFormat = dataFormat;
        }

        public Boolean getWrappedStyle() {
            return wrappedStyle;
        }

        public void setWrappedStyle(Boolean wrappedStyle) {
            this.wrappedStyle = wrappedStyle;
        }

        public Boolean getAllowStreaming() {
            return allowStreaming;
        }

        public void setAllowStreaming(Boolean allowStreaming) {
            this.allowStreaming = allowStreaming;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Object getBus() {
            return bus;
        }

        public void setBus(Object bus) {
            this.bus = bus;
        }

        public Long getContinuationTimeout() {
            return continuationTimeout;
        }

        public void setContinuationTimeout(Long continuationTimeout) {
            this.continuationTimeout = continuationTimeout;
        }

        public Object getCxfBinding() {
            return cxfBinding;
        }

        public void setCxfBinding(Object cxfBinding) {
            this.cxfBinding = cxfBinding;
        }

        public Object getCxfEndpointConfigurer() {
            return cxfEndpointConfigurer;
        }

        public void setCxfEndpointConfigurer(Object cxfEndpointConfigurer) {
            this.cxfEndpointConfigurer = cxfEndpointConfigurer;
        }

        public Boolean getDefaultBus() {
            return defaultBus;
        }

        public void setDefaultBus(Boolean defaultBus) {
            this.defaultBus = defaultBus;
        }

        public HeaderFilterStrategy getHeaderFilterStrategy() {
            return headerFilterStrategy;
        }

        public void setHeaderFilterStrategy(
                HeaderFilterStrategy headerFilterStrategy) {
            this.headerFilterStrategy = headerFilterStrategy;
        }

        public Boolean getMergeProtocolHeaders() {
            return mergeProtocolHeaders;
        }

        public void setMergeProtocolHeaders(Boolean mergeProtocolHeaders) {
            this.mergeProtocolHeaders = mergeProtocolHeaders;
        }

        public Boolean getMtomEnabled() {
            return mtomEnabled;
        }

        public void setMtomEnabled(Boolean mtomEnabled) {
            this.mtomEnabled = mtomEnabled;
        }

        public Map<String, Object> getProperties() {
            return properties;
        }

        public void setProperties(Map<String, Object> properties) {
            this.properties = properties;
        }

        public Boolean getSkipPayloadMessagePartCheck() {
            return skipPayloadMessagePartCheck;
        }

        public void setSkipPayloadMessagePartCheck(
                Boolean skipPayloadMessagePartCheck) {
            this.skipPayloadMessagePartCheck = skipPayloadMessagePartCheck;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Boolean getLoggingFeatureEnabled() {
            return loggingFeatureEnabled;
        }

        public void setLoggingFeatureEnabled(Boolean loggingFeatureEnabled) {
            this.loggingFeatureEnabled = loggingFeatureEnabled;
        }

        public Integer getLoggingSizeLimit() {
            return loggingSizeLimit;
        }

        public void setLoggingSizeLimit(Integer loggingSizeLimit) {
            this.loggingSizeLimit = loggingSizeLimit;
        }

        public Boolean getSkipFaultLogging() {
            return skipFaultLogging;
        }

        public void setSkipFaultLogging(Boolean skipFaultLogging) {
            this.skipFaultLogging = skipFaultLogging;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getBindingId() {
            return bindingId;
        }

        public void setBindingId(String bindingId) {
            this.bindingId = bindingId;
        }

        public String getPortName() {
            return portName;
        }

        public void setPortName(String portName) {
            this.portName = portName;
        }

        public String getPublishedEndpointUrl() {
            return publishedEndpointUrl;
        }

        public void setPublishedEndpointUrl(String publishedEndpointUrl) {
            this.publishedEndpointUrl = publishedEndpointUrl;
        }

        public Class<Object> getServiceClass() {
            return serviceClass;
        }

        public void setServiceClass(Class<Object> serviceClass) {
            this.serviceClass = serviceClass;
        }

        public String getServiceName() {
            return serviceName;
        }

        public void setServiceName(String serviceName) {
            this.serviceName = serviceName;
        }

        public String getWsdlURL() {
            return wsdlURL;
        }

        public void setWsdlURL(String wsdlURL) {
            this.wsdlURL = wsdlURL;
        }
    }

    public static class CxfConsumer extends CxfCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private Boolean bridgeErrorHandler;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class CxfProducer extends CxfCommon {
        /**
         * Configure a cookie handler to maintain a HTTP session. The option is
         * a org.apache.camel.http.common.cookie.CookieHandler type.
         */
        private Object cookieHandler;
        /**
         * This option will set the default operationName that will be used by
         * the CxfProducer which invokes the remote service. The option is a
         * java.lang.String type.
         */
        private String defaultOperationName;
        /**
         * This option will set the default operationNamespace that will be used
         * by the CxfProducer which invokes the remote service. The option is a
         * java.lang.String type.
         */
        private String defaultOperationNamespace;
        /**
         * The hostname verifier to be used. Use the # notation to reference a
         * HostnameVerifier from the registry. The option is a
         * javax.net.ssl.HostnameVerifier type.
         */
        private Object hostnameVerifier;
        /**
         * The Camel SSL setting reference. Use the # notation to reference the
         * SSL Context. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        private Object sslContextParameters;
        /**
         * Which kind of operation that CXF endpoint producer will invoke. The
         * option is a boolean type.
         */
        private Boolean wrapped;

        public Object getCookieHandler() {
            return cookieHandler;
        }

        public void setCookieHandler(Object cookieHandler) {
            this.cookieHandler = cookieHandler;
        }

        public String getDefaultOperationName() {
            return defaultOperationName;
        }

        public void setDefaultOperationName(String defaultOperationName) {
            this.defaultOperationName = defaultOperationName;
        }

        public String getDefaultOperationNamespace() {
            return defaultOperationNamespace;
        }

        public void setDefaultOperationNamespace(
                String defaultOperationNamespace) {
            this.defaultOperationNamespace = defaultOperationNamespace;
        }

        public Object getHostnameVerifier() {
            return hostnameVerifier;
        }

        public void setHostnameVerifier(Object hostnameVerifier) {
            this.hostnameVerifier = hostnameVerifier;
        }

        public Object getSslContextParameters() {
            return sslContextParameters;
        }

        public void setSslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
        }

        public Boolean getWrapped() {
            return wrapped;
        }

        public void setWrapped(Boolean wrapped) {
            this.wrapped = wrapped;
        }
    }

    public static enum DataFormat {
        PAYLOAD, RAW, MESSAGE, CXF_MESSAGE, POJO;
    }
}