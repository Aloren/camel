/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.model.EndpointDefinition;

/**
 * The sql component allows you to work with databases using JDBC Stored
 * Procedure queries.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class SqlStoredEndpoint {


    public static class SqlStoredCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        SqlStoredCommon(String path) {
            super("sql-stored", path);
        }
        /**
         * Sets the StoredProcedure template to perform. The option is a
         * java.lang.String type.
         */
        public T template(String template) {
            this.properties.put("template", template);
            return (T) this;
        }
        /**
         * Enables or disables batch mode. The option is a boolean type.
         */
        public T batch(boolean batch) {
            this.properties.put("batch", batch);
            return (T) this;
        }
        /**
         * Sets the DataSource to use to communicate with the database. The
         * option is a javax.sql.DataSource type.
         */
        public T dataSource(Object dataSource) {
            this.properties.put("dataSource", dataSource);
            return (T) this;
        }
        /**
         * Whether this call is for a function. The option is a boolean type.
         */
        public T function(boolean function) {
            this.properties.put("function", function);
            return (T) this;
        }
        /**
         * If set, will ignore the results of the template and use the existing
         * IN message as the OUT message for the continuation of processing. The
         * option is a boolean type.
         */
        public T noop(boolean noop) {
            this.properties.put("noop", noop);
            return (T) this;
        }
        /**
         * Store the template result in a header instead of the message body. By
         * default, outputHeader == null and the template result is stored in
         * the message body, any existing content in the message body is
         * discarded. If outputHeader is set, the value is used as the name of
         * the header to store the template result and the original message body
         * is preserved. The option is a java.lang.String type.
         */
        public T outputHeader(String outputHeader) {
            this.properties.put("outputHeader", outputHeader);
            return (T) this;
        }
        /**
         * Whether to use the message body as the template and then headers for
         * parameters. If this option is enabled then the template in the uri is
         * not used. The option is a boolean type.
         */
        public T useMessageBodyForTemplate(boolean useMessageBodyForTemplate) {
            this.properties.put("useMessageBodyForTemplate", useMessageBodyForTemplate);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class SqlStoredConsumer
            extends
                SqlStoredCommon<SqlStoredConsumer>
            implements
                EndpointDefinition.Consumer {
        public SqlStoredConsumer(String path) {
            super(path);
        }
    }

    public static class SqlStoredProducer
            extends
                SqlStoredCommon<SqlStoredProducer>
            implements
                EndpointDefinition.Producer {
        public SqlStoredProducer(String path) {
            super(path);
        }
    }
}