/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The azure-blob component is used for storing and retrieving blobs from Azure
 * Storage Blob Service.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class BlobServiceEndpoint {


    public static class BlobServiceCommon extends EndpointConfiguration {
        /**
         * Container or Blob compact Uri. The option is a java.lang.String type.
         */
        private String containerOrBlobUri;
        /**
         * The blob service client. The option is a
         * com.microsoft.azure.storage.blob.CloudBlob type.
         */
        private Object azureBlobClient;
        /**
         * Set the blob offset for the upload or download operations, default is
         * 0. The option is a java.lang.Long type.
         */
        private Long blobOffset;
        /**
         * Set a blob type, 'blockblob' is default. The option is a
         * org.apache.camel.component.azure.blob.BlobType type.
         */
        private BlobType blobType;
        /**
         * Close the stream after read or keep it open, default is true. The
         * option is a boolean type.
         */
        private boolean closeStreamAfterRead;
        /**
         * Set the storage credentials, required in most cases. The option is a
         * com.microsoft.azure.storage.StorageCredentials type.
         */
        private Object credentials;
        /**
         * Set the data length for the download or page blob upload operations.
         * The option is a java.lang.Long type.
         */
        private Long dataLength;
        /**
         * Set the file directory where the downloaded blobs will be saved to.
         * The option is a java.lang.String type.
         */
        private String fileDir;
        /**
         * Storage resources can be public for reading their content, if this
         * property is enabled then the credentials do not have to be set. The
         * option is a boolean type.
         */
        private boolean publicForRead;
        /**
         * Set the minimum read size in bytes when reading the blob content. The
         * option is a int type.
         */
        private int streamReadSize;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;

        public String getContainerOrBlobUri() {
            return containerOrBlobUri;
        }

        public void setContainerOrBlobUri(String containerOrBlobUri) {
            this.containerOrBlobUri = containerOrBlobUri;
        }

        public Object getAzureBlobClient() {
            return azureBlobClient;
        }

        public void setAzureBlobClient(Object azureBlobClient) {
            this.azureBlobClient = azureBlobClient;
        }

        public Long getBlobOffset() {
            return blobOffset;
        }

        public void setBlobOffset(Long blobOffset) {
            this.blobOffset = blobOffset;
        }

        public BlobType getBlobType() {
            return blobType;
        }

        public void setBlobType(BlobType blobType) {
            this.blobType = blobType;
        }

        public boolean getCloseStreamAfterRead() {
            return closeStreamAfterRead;
        }

        public void setCloseStreamAfterRead(boolean closeStreamAfterRead) {
            this.closeStreamAfterRead = closeStreamAfterRead;
        }

        public Object getCredentials() {
            return credentials;
        }

        public void setCredentials(Object credentials) {
            this.credentials = credentials;
        }

        public Long getDataLength() {
            return dataLength;
        }

        public void setDataLength(Long dataLength) {
            this.dataLength = dataLength;
        }

        public String getFileDir() {
            return fileDir;
        }

        public void setFileDir(String fileDir) {
            this.fileDir = fileDir;
        }

        public boolean getPublicForRead() {
            return publicForRead;
        }

        public void setPublicForRead(boolean publicForRead) {
            this.publicForRead = publicForRead;
        }

        public int getStreamReadSize() {
            return streamReadSize;
        }

        public void setStreamReadSize(int streamReadSize) {
            this.streamReadSize = streamReadSize;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class BlobServiceConsumer extends BlobServiceCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class BlobServiceProducer extends BlobServiceCommon {
        /**
         * Set the blob meta-data. The option is a
         * java.util.Map<java.lang.String,java.lang.String> type.
         */
        private Map<String, String> blobMetadata;
        /**
         * Set a prefix which can be used for listing the blobs. The option is a
         * java.lang.String type.
         */
        private String blobPrefix;
        /**
         * Close the stream after write or keep it open, default is true. The
         * option is a boolean type.
         */
        private boolean closeStreamAfterWrite;
        /**
         * Blob service operation hint to the producer. The option is a
         * org.apache.camel.component.azure.blob.BlobServiceOperations type.
         */
        private BlobServiceOperations operation;
        /**
         * Set the size of the buffer for writing block and page blocks. The
         * option is a int type.
         */
        private int streamWriteSize;
        /**
         * Specify if the flat or hierarchical blob listing should be used. The
         * option is a boolean type.
         */
        private boolean useFlatListing;

        public Map<String, String> getBlobMetadata() {
            return blobMetadata;
        }

        public void setBlobMetadata(Map<String, String> blobMetadata) {
            this.blobMetadata = blobMetadata;
        }

        public String getBlobPrefix() {
            return blobPrefix;
        }

        public void setBlobPrefix(String blobPrefix) {
            this.blobPrefix = blobPrefix;
        }

        public boolean getCloseStreamAfterWrite() {
            return closeStreamAfterWrite;
        }

        public void setCloseStreamAfterWrite(boolean closeStreamAfterWrite) {
            this.closeStreamAfterWrite = closeStreamAfterWrite;
        }

        public BlobServiceOperations getOperation() {
            return operation;
        }

        public void setOperation(BlobServiceOperations operation) {
            this.operation = operation;
        }

        public int getStreamWriteSize() {
            return streamWriteSize;
        }

        public void setStreamWriteSize(int streamWriteSize) {
            this.streamWriteSize = streamWriteSize;
        }

        public boolean getUseFlatListing() {
            return useFlatListing;
        }

        public void setUseFlatListing(boolean useFlatListing) {
            this.useFlatListing = useFlatListing;
        }
    }

    public static enum BlobType {
        blockblob, appendblob, pageblob;
    }

    public static enum BlobServiceOperations {
        getBlob, deleteBlob, listBlobs, updateBlockBlob, uploadBlobBlocks, commitBlobBlockList, getBlobBlockList, createAppendBlob, updateAppendBlob, createPageBlob, updatePageBlob, resizePageBlob, clearPageBlob, getPageBlobRanges;
    }
}