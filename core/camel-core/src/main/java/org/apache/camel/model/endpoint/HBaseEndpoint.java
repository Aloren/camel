/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * For reading/writing from/to an HBase store (Hadoop database).
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class HBaseEndpoint {


    public static class HBaseCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String tableName;
        private Object cellMappingStrategyFactory;
        private List<Object> filters;
        private String mappingStrategyClassName;
        private String mappingStrategyName;
        private Map<String, Object> rowMapping;
        private Object rowModel;
        private Object userGroupInformation;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;

        /**
         * The name of the table. The option is a java.lang.String type.
         */
        public T tableName(String tableName) {
            this.tableName = tableName;
            return (T) this;
        }

        /**
         * To use a custom CellMappingStrategyFactory that is responsible for
         * mapping cells. The option is a
         * org.apache.camel.component.hbase.mapping.CellMappingStrategyFactory
         * type.
         */
        public T cellMappingStrategyFactory(Object cellMappingStrategyFactory) {
            this.cellMappingStrategyFactory = cellMappingStrategyFactory;
            return (T) this;
        }

        /**
         * A list of filters to use. The option is a
         * java.util.List<org.apache.hadoop.hbase.filter.Filter> type.
         */
        public T filters(List<Object> filters) {
            this.filters = filters;
            return (T) this;
        }

        /**
         * The class name of a custom mapping strategy implementation. The
         * option is a java.lang.String type.
         */
        public T mappingStrategyClassName(String mappingStrategyClassName) {
            this.mappingStrategyClassName = mappingStrategyClassName;
            return (T) this;
        }

        /**
         * The strategy to use for mapping Camel messages to HBase columns.
         * Supported values: header, or body. The option is a java.lang.String
         * type.
         */
        public T mappingStrategyName(String mappingStrategyName) {
            this.mappingStrategyName = mappingStrategyName;
            return (T) this;
        }

        /**
         * To map the key/values from the Map to a HBaseRow. The following keys
         * is supported: rowId - The id of the row. This has limited use as the
         * row usually changes per Exchange. rowType - The type to covert row id
         * to. Supported operations: CamelHBaseScan. family - The column family.
         * Supports a number suffix for referring to more than one columns.
         * qualifier - The column qualifier. Supports a number suffix for
         * referring to more than one columns. value - The value. Supports a
         * number suffix for referring to more than one columns valueType - The
         * value type. Supports a number suffix for referring to more than one
         * columns. Supported operations: CamelHBaseGet, and CamelHBaseScan. The
         * option is a java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public T rowMapping(Map<String, Object> rowMapping) {
            this.rowMapping = rowMapping;
            return (T) this;
        }

        /**
         * An instance of org.apache.camel.component.hbase.model.HBaseRow which
         * describes how each row should be modeled. The option is a
         * org.apache.camel.component.hbase.model.HBaseRow type.
         */
        public T rowModel(Object rowModel) {
            this.rowModel = rowModel;
            return (T) this;
        }

        /**
         * Defines privileges to communicate with HBase such as using kerberos.
         * The option is a org.apache.hadoop.security.UserGroupInformation type.
         */
        public T userGroupInformation(Object userGroupInformation) {
            this.userGroupInformation = userGroupInformation;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public String getTableName() {
            return tableName;
        }

        public void setTableName(String tableName) {
            this.tableName = tableName;
        }

        public Object getCellMappingStrategyFactory() {
            return cellMappingStrategyFactory;
        }

        public void setCellMappingStrategyFactory(
                Object cellMappingStrategyFactory) {
            this.cellMappingStrategyFactory = cellMappingStrategyFactory;
        }

        public List<Object> getFilters() {
            return filters;
        }

        public void setFilters(List<Object> filters) {
            this.filters = filters;
        }

        public String getMappingStrategyClassName() {
            return mappingStrategyClassName;
        }

        public void setMappingStrategyClassName(String mappingStrategyClassName) {
            this.mappingStrategyClassName = mappingStrategyClassName;
        }

        public String getMappingStrategyName() {
            return mappingStrategyName;
        }

        public void setMappingStrategyName(String mappingStrategyName) {
            this.mappingStrategyName = mappingStrategyName;
        }

        public Map<String, Object> getRowMapping() {
            return rowMapping;
        }

        public void setRowMapping(Map<String, Object> rowMapping) {
            this.rowMapping = rowMapping;
        }

        public Object getRowModel() {
            return rowModel;
        }

        public void setRowModel(Object rowModel) {
            this.rowModel = rowModel;
        }

        public Object getUserGroupInformation() {
            return userGroupInformation;
        }

        public void setUserGroupInformation(Object userGroupInformation) {
            this.userGroupInformation = userGroupInformation;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class HBaseConsumer extends HBaseCommon<HBaseConsumer> {
        private Boolean bridgeErrorHandler;
        private Integer maxMessagesPerPoll;
        private String operation;
        private Boolean remove;
        private Object removeHandler;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public HBaseConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (HBaseConsumer) this;
        }

        /**
         * Gets the maximum number of messages as a limit to poll at each
         * polling. Is default unlimited, but use 0 or negative number to
         * disable it as unlimited. The option is a int type.
         */
        public HBaseConsumer maxMessagesPerPoll(int maxMessagesPerPoll) {
            this.maxMessagesPerPoll = maxMessagesPerPoll;
            return (HBaseConsumer) this;
        }

        /**
         * The HBase operation to perform. The option is a java.lang.String
         * type.
         */
        public HBaseConsumer operation(String operation) {
            this.operation = operation;
            return (HBaseConsumer) this;
        }

        /**
         * If the option is true, Camel HBase Consumer will remove the rows
         * which it processes. The option is a boolean type.
         */
        public HBaseConsumer remove(boolean remove) {
            this.remove = remove;
            return (HBaseConsumer) this;
        }

        /**
         * To use a custom HBaseRemoveHandler that is executed when a row is to
         * be removed. The option is a
         * org.apache.camel.component.hbase.HBaseRemoveHandler type.
         */
        public HBaseConsumer removeHandler(Object removeHandler) {
            this.removeHandler = removeHandler;
            return (HBaseConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public HBaseConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (HBaseConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public HBaseConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (HBaseConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public Integer getMaxMessagesPerPoll() {
            return maxMessagesPerPoll;
        }

        public void setMaxMessagesPerPoll(Integer maxMessagesPerPoll) {
            this.maxMessagesPerPoll = maxMessagesPerPoll;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }

        public Boolean getRemove() {
            return remove;
        }

        public void setRemove(Boolean remove) {
            this.remove = remove;
        }

        public Object getRemoveHandler() {
            return removeHandler;
        }

        public void setRemoveHandler(Object removeHandler) {
            this.removeHandler = removeHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class HBaseProducer extends HBaseCommon<HBaseProducer> {
        private Integer maxResults;

        /**
         * The maximum number of rows to scan. The option is a int type.
         */
        public HBaseProducer maxResults(int maxResults) {
            this.maxResults = maxResults;
            return (HBaseProducer) this;
        }

        public Integer getMaxResults() {
            return maxResults;
        }

        public void setMaxResults(Integer maxResults) {
            this.maxResults = maxResults;
        }
    }
}