/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URI;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The spring-ws component is used for SOAP WebServices using Spring
 * WebServices.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface SpringWebserviceEndpointBuilder {


    /**
     * Base class for the Spring WebService component builders.
     */
    public static class SpringWebserviceCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        SpringWebserviceCommonBuilder(String path) {
            super("spring-ws", path);
        }
        /**
         * Option to provide a custom MessageFilter. For example when you want
         * to process your headers or attachments by your own. The option is a
         * <code>org.apache.camel.component.spring.ws.filter.MessageFilter</code> type.
         */
        public T messageFilter(Object messageFilter) {
            this.properties.put("messageFilter", messageFilter);
            return (T) this;
        }
        /**
         * Option to provide a custom MessageFilter. For example when you want
         * to process your headers or attachments by your own. The option will
         * be converted to a
         * <code>org.apache.camel.component.spring.ws.filter.MessageFilter</code> type.
         */
        public T messageFilter(String messageFilter) {
            this.properties.put("messageFilter", messageFilter);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * To configure security using SSLContextParameters. The option is a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         */
        public T sslContextParameters(Object sslContextParameters) {
            this.properties.put("sslContextParameters", sslContextParameters);
            return (T) this;
        }
        /**
         * To configure security using SSLContextParameters. The option will be
         * converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         */
        public T sslContextParameters(String sslContextParameters) {
            this.properties.put("sslContextParameters", sslContextParameters);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint consumers for the Spring WebService component.
     */
    public static class SpringWebserviceConsumerBuilder
            extends
                SpringWebserviceCommonBuilder<SpringWebserviceConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public SpringWebserviceConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Endpoint mapping type if endpoint mapping is used. rootqname - Offers
         * the option to map web service requests based on the qualified name of
         * the root element contained in the message. soapaction - Used to map
         * web service requests based on the SOAP action specified in the header
         * of the message. uri - In order to map web service requests that
         * target a specific URI. xpathresult - Used to map web service requests
         * based on the evaluation of an XPath expression against the incoming
         * message. The result of the evaluation should match the XPath result
         * specified in the endpoint URI. beanname - Allows you to reference an
         * org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher
         * object in order to integrate with existing (legacy) endpoint mappings
         * like PayloadRootQNameEndpointMapping, SoapActionEndpointMapping, etc.
         * The option is a
         * <code>org.apache.camel.component.spring.ws.type.EndpointMappingType</code> type.
         */
        public SpringWebserviceConsumerBuilder type(EndpointMappingType type) {
            this.properties.put("type", type);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * Endpoint mapping type if endpoint mapping is used. rootqname - Offers
         * the option to map web service requests based on the qualified name of
         * the root element contained in the message. soapaction - Used to map
         * web service requests based on the SOAP action specified in the header
         * of the message. uri - In order to map web service requests that
         * target a specific URI. xpathresult - Used to map web service requests
         * based on the evaluation of an XPath expression against the incoming
         * message. The result of the evaluation should match the XPath result
         * specified in the endpoint URI. beanname - Allows you to reference an
         * org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher
         * object in order to integrate with existing (legacy) endpoint mappings
         * like PayloadRootQNameEndpointMapping, SoapActionEndpointMapping, etc.
         * The option will be converted to a
         * <code>org.apache.camel.component.spring.ws.type.EndpointMappingType</code> type.
         */
        public SpringWebserviceConsumerBuilder type(String type) {
            this.properties.put("type", type);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * Endpoint mapping key if endpoint mapping is used. The option is a
         * <code>java.lang.String</code> type.
         */
        public SpringWebserviceConsumerBuilder lookupKey(String lookupKey) {
            this.properties.put("lookupKey", lookupKey);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public SpringWebserviceConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public SpringWebserviceConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * Spring org.springframework.ws.server.endpoint.MessageEndpoint for
         * dispatching messages received by Spring-WS to a Camel endpoint, to
         * integrate with existing (legacy) endpoint mappings like
         * PayloadRootQNameEndpointMapping, SoapActionEndpointMapping, etc. The
         * option is a
         * <code>org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher</code> type.
         */
        public SpringWebserviceConsumerBuilder endpointDispatcher(
                Object endpointDispatcher) {
            this.properties.put("endpointDispatcher", endpointDispatcher);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * Spring org.springframework.ws.server.endpoint.MessageEndpoint for
         * dispatching messages received by Spring-WS to a Camel endpoint, to
         * integrate with existing (legacy) endpoint mappings like
         * PayloadRootQNameEndpointMapping, SoapActionEndpointMapping, etc. The
         * option will be converted to a
         * <code>org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher</code> type.
         */
        public SpringWebserviceConsumerBuilder endpointDispatcher(
                String endpointDispatcher) {
            this.properties.put("endpointDispatcher", endpointDispatcher);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * Reference to an instance of
         * org.apache.camel.component.spring.ws.bean.CamelEndpointMapping in the
         * Registry/ApplicationContext. Only one bean is required in the
         * registry to serve all Camel/Spring-WS endpoints. This bean is
         * auto-discovered by the MessageDispatcher and used to map requests to
         * Camel endpoints based on characteristics specified on the endpoint
         * (like root QName, SOAP action, etc). The option is a
         * <code>org.apache.camel.component.spring.ws.bean.CamelSpringWSEndpointMapping</code> type.
         */
        public SpringWebserviceConsumerBuilder endpointMapping(
                Object endpointMapping) {
            this.properties.put("endpointMapping", endpointMapping);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * Reference to an instance of
         * org.apache.camel.component.spring.ws.bean.CamelEndpointMapping in the
         * Registry/ApplicationContext. Only one bean is required in the
         * registry to serve all Camel/Spring-WS endpoints. This bean is
         * auto-discovered by the MessageDispatcher and used to map requests to
         * Camel endpoints based on characteristics specified on the endpoint
         * (like root QName, SOAP action, etc). The option will be converted to
         * a
         * <code>org.apache.camel.component.spring.ws.bean.CamelSpringWSEndpointMapping</code> type.
         */
        public SpringWebserviceConsumerBuilder endpointMapping(
                String endpointMapping) {
            this.properties.put("endpointMapping", endpointMapping);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * The XPath expression to use when option type=xpathresult. Then this
         * option is required to be configured. The option is a
         * <code>java.lang.String</code> type.
         */
        public SpringWebserviceConsumerBuilder expression(String expression) {
            this.properties.put("expression", expression);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public SpringWebserviceConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public SpringWebserviceConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public SpringWebserviceConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (SpringWebserviceConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public SpringWebserviceConsumerBuilder exchangePattern(
                String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (SpringWebserviceConsumerBuilder) this;
        }
    }

    /**
     * Builder for endpoint producers for the Spring WebService component.
     */
    public static class SpringWebserviceProducerBuilder
            extends
                SpringWebserviceCommonBuilder<SpringWebserviceProducerBuilder>
            implements
                EndpointProducerBuilder {
        public SpringWebserviceProducerBuilder(String path) {
            super(path);
        }
        /**
         * The default Web Service endpoint uri to use for the producer. The
         * option is a <code>java.lang.String</code> type.
         */
        public SpringWebserviceProducerBuilder webServiceEndpointUri(
                String webServiceEndpointUri) {
            this.properties.put("webServiceEndpointUri", webServiceEndpointUri);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to override soap response attachments in in/out exchange with
         * attachments from the actual service layer. If the invoked service
         * appends or rewrites the soap attachments this option when set to
         * true, allows the modified soap attachments to be overwritten in
         * in/out message attachments. The option is a <code>boolean</code>
         * type.
         */
        public SpringWebserviceProducerBuilder allowResponseAttachmentOverride(
                boolean allowResponseAttachmentOverride) {
            this.properties.put("allowResponseAttachmentOverride", allowResponseAttachmentOverride);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to override soap response attachments in in/out exchange with
         * attachments from the actual service layer. If the invoked service
         * appends or rewrites the soap attachments this option when set to
         * true, allows the modified soap attachments to be overwritten in
         * in/out message attachments. The option will be converted to a
         * <code>boolean</code> type.
         */
        public SpringWebserviceProducerBuilder allowResponseAttachmentOverride(
                String allowResponseAttachmentOverride) {
            this.properties.put("allowResponseAttachmentOverride", allowResponseAttachmentOverride);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to override soap response header in in/out exchange with
         * header info from the actual service layer. If the invoked service
         * appends or rewrites the soap header this option when set to true,
         * allows the modified soap header to be overwritten in in/out message
         * headers. The option is a <code>boolean</code> type.
         */
        public SpringWebserviceProducerBuilder allowResponseHeaderOverride(
                boolean allowResponseHeaderOverride) {
            this.properties.put("allowResponseHeaderOverride", allowResponseHeaderOverride);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to override soap response header in in/out exchange with
         * header info from the actual service layer. If the invoked service
         * appends or rewrites the soap header this option when set to true,
         * allows the modified soap header to be overwritten in in/out message
         * headers. The option will be converted to a <code>boolean</code> type.
         */
        public SpringWebserviceProducerBuilder allowResponseHeaderOverride(
                String allowResponseHeaderOverride) {
            this.properties.put("allowResponseHeaderOverride", allowResponseHeaderOverride);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Signifies the value for the faultAction response WS-Addressing Fault
         * Action header that is provided by the method. The option is a
         * <code>java.net.URI</code> type.
         */
        public SpringWebserviceProducerBuilder faultAction(URI faultAction) {
            this.properties.put("faultAction", faultAction);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Signifies the value for the faultAction response WS-Addressing Fault
         * Action header that is provided by the method. The option will be
         * converted to a <code>java.net.URI</code> type.
         */
        public SpringWebserviceProducerBuilder faultAction(String faultAction) {
            this.properties.put("faultAction", faultAction);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Signifies the value for the faultAction response WS-Addressing
         * FaultTo header that is provided by the method. The option is a
         * <code>java.net.URI</code> type.
         */
        public SpringWebserviceProducerBuilder faultTo(URI faultTo) {
            this.properties.put("faultTo", faultTo);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Signifies the value for the faultAction response WS-Addressing
         * FaultTo header that is provided by the method. The option will be
         * converted to a <code>java.net.URI</code> type.
         */
        public SpringWebserviceProducerBuilder faultTo(String faultTo) {
            this.properties.put("faultTo", faultTo);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to provide a custom WebServiceMessageFactory. For example when
         * you want Apache Axiom to handle web service messages instead of SAAJ.
         * The option is a
         * <code>org.springframework.ws.WebServiceMessageFactory</code> type.
         */
        public SpringWebserviceProducerBuilder messageFactory(
                Object messageFactory) {
            this.properties.put("messageFactory", messageFactory);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to provide a custom WebServiceMessageFactory. For example when
         * you want Apache Axiom to handle web service messages instead of SAAJ.
         * The option will be converted to a
         * <code>org.springframework.ws.WebServiceMessageFactory</code> type.
         */
        public SpringWebserviceProducerBuilder messageFactory(
                String messageFactory) {
            this.properties.put("messageFactory", messageFactory);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to provide a custom MessageIdStrategy to control generation of
         * unique message ids. The option is a
         * <code>org.springframework.ws.soap.addressing.messageid.MessageIdStrategy</code> type.
         */
        public SpringWebserviceProducerBuilder messageIdStrategy(
                Object messageIdStrategy) {
            this.properties.put("messageIdStrategy", messageIdStrategy);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to provide a custom MessageIdStrategy to control generation of
         * unique message ids. The option will be converted to a
         * <code>org.springframework.ws.soap.addressing.messageid.MessageIdStrategy</code> type.
         */
        public SpringWebserviceProducerBuilder messageIdStrategy(
                String messageIdStrategy) {
            this.properties.put("messageIdStrategy", messageIdStrategy);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to provide a custom WebServiceMessageSender. For example to
         * perform authentication or use alternative transports. The option is a
         * <code>org.springframework.ws.transport.WebServiceMessageSender</code>
         * type.
         */
        public SpringWebserviceProducerBuilder messageSender(
                Object messageSender) {
            this.properties.put("messageSender", messageSender);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to provide a custom WebServiceMessageSender. For example to
         * perform authentication or use alternative transports. The option will
         * be converted to a
         * <code>org.springframework.ws.transport.WebServiceMessageSender</code>
         * type.
         */
        public SpringWebserviceProducerBuilder messageSender(
                String messageSender) {
            this.properties.put("messageSender", messageSender);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Signifies the value for the response WS-Addressing Action header that
         * is provided by the method. The option is a <code>java.net.URI</code>
         * type.
         */
        public SpringWebserviceProducerBuilder outputAction(URI outputAction) {
            this.properties.put("outputAction", outputAction);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Signifies the value for the response WS-Addressing Action header that
         * is provided by the method. The option will be converted to a
         * <code>java.net.URI</code> type.
         */
        public SpringWebserviceProducerBuilder outputAction(String outputAction) {
            this.properties.put("outputAction", outputAction);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Signifies the value for the replyTo response WS-Addressing ReplyTo
         * header that is provided by the method. The option is a
         * <code>java.net.URI</code> type.
         */
        public SpringWebserviceProducerBuilder replyTo(URI replyTo) {
            this.properties.put("replyTo", replyTo);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Signifies the value for the replyTo response WS-Addressing ReplyTo
         * header that is provided by the method. The option will be converted
         * to a <code>java.net.URI</code> type.
         */
        public SpringWebserviceProducerBuilder replyTo(String replyTo) {
            this.properties.put("replyTo", replyTo);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * SOAP action to include inside a SOAP request when accessing remote
         * web services. The option is a <code>java.lang.String</code> type.
         */
        public SpringWebserviceProducerBuilder soapAction(String soapAction) {
            this.properties.put("soapAction", soapAction);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Sets the socket read timeout (in milliseconds) while invoking a
         * webservice using the producer, see URLConnection.setReadTimeout() and
         * CommonsHttpMessageSender.setReadTimeout(). This option works when
         * using the built-in message sender implementations:
         * CommonsHttpMessageSender and HttpUrlConnectionMessageSender. One of
         * these implementations will be used by default for HTTP based services
         * unless you customize the Spring WS configuration options supplied to
         * the component. If you are using a non-standard sender, it is assumed
         * that you will handle your own timeout configuration. The built-in
         * message sender HttpComponentsMessageSender is considered instead of
         * CommonsHttpMessageSender which has been deprecated, see
         * HttpComponentsMessageSender.setReadTimeout(). The option is a
         * <code>int</code> type.
         */
        public SpringWebserviceProducerBuilder timeout(int timeout) {
            this.properties.put("timeout", timeout);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Sets the socket read timeout (in milliseconds) while invoking a
         * webservice using the producer, see URLConnection.setReadTimeout() and
         * CommonsHttpMessageSender.setReadTimeout(). This option works when
         * using the built-in message sender implementations:
         * CommonsHttpMessageSender and HttpUrlConnectionMessageSender. One of
         * these implementations will be used by default for HTTP based services
         * unless you customize the Spring WS configuration options supplied to
         * the component. If you are using a non-standard sender, it is assumed
         * that you will handle your own timeout configuration. The built-in
         * message sender HttpComponentsMessageSender is considered instead of
         * CommonsHttpMessageSender which has been deprecated, see
         * HttpComponentsMessageSender.setReadTimeout(). The option will be
         * converted to a <code>int</code> type.
         */
        public SpringWebserviceProducerBuilder timeout(String timeout) {
            this.properties.put("timeout", timeout);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to provide a custom WebServiceTemplate. This allows for full
         * control over client-side web services handling; like adding a custom
         * interceptor or specifying a fault resolver, message sender or message
         * factory. The option is a
         * <code>org.springframework.ws.client.core.WebServiceTemplate</code>
         * type.
         */
        public SpringWebserviceProducerBuilder webServiceTemplate(
                Object webServiceTemplate) {
            this.properties.put("webServiceTemplate", webServiceTemplate);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * Option to provide a custom WebServiceTemplate. This allows for full
         * control over client-side web services handling; like adding a custom
         * interceptor or specifying a fault resolver, message sender or message
         * factory. The option will be converted to a
         * <code>org.springframework.ws.client.core.WebServiceTemplate</code>
         * type.
         */
        public SpringWebserviceProducerBuilder webServiceTemplate(
                String webServiceTemplate) {
            this.properties.put("webServiceTemplate", webServiceTemplate);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * WS-Addressing 1.0 action header to include when accessing web
         * services. The To header is set to the address of the web service as
         * specified in the endpoint URI (default Spring-WS behavior). The
         * option is a <code>java.net.URI</code> type.
         */
        public SpringWebserviceProducerBuilder wsAddressingAction(
                URI wsAddressingAction) {
            this.properties.put("wsAddressingAction", wsAddressingAction);
            return (SpringWebserviceProducerBuilder) this;
        }
        /**
         * WS-Addressing 1.0 action header to include when accessing web
         * services. The To header is set to the address of the web service as
         * specified in the endpoint URI (default Spring-WS behavior). The
         * option will be converted to a <code>java.net.URI</code> type.
         */
        public SpringWebserviceProducerBuilder wsAddressingAction(
                String wsAddressingAction) {
            this.properties.put("wsAddressingAction", wsAddressingAction);
            return (SpringWebserviceProducerBuilder) this;
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.spring.ws.type.EndpointMappingType</code> enum.
     */
    public static enum EndpointMappingType {
        ROOT_QNAME, ACTION, TO, SOAP_ACTION, XPATHRESULT, URI, URI_PATH, BEANNAME;
    }
    /**
     * The spring-ws component is used for SOAP WebServices using Spring
     * WebServices. Creates a builder to build a consumer endpoint for the
     * Spring WebService component.
     */
    public default SpringWebserviceConsumerBuilder fromSpringWebservice(
            String path) {
        return new SpringWebserviceConsumerBuilder(path);
    }
    /**
     * The spring-ws component is used for SOAP WebServices using Spring
     * WebServices. Creates a builder to build a producer endpoint for the
     * Spring WebService component.
     */
    public default SpringWebserviceProducerBuilder toSpringWebservice(
            String path) {
        return new SpringWebserviceProducerBuilder(path);
    }
}