/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.List;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Socket level networking using TCP or UDP with the Apache Mina 2.x library.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class Mina2Endpoint {


    public static class Mina2Common<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        Mina2Common(String path) {
            super("mina", path);
        }
        /**
         * Protocol to use. The option is a java.lang.String type.
         */
        public T protocol(String protocol) {
            this.properties.put("protocol", protocol);
            return (T) this;
        }
        /**
         * Hostname to use. Use localhost or 0.0.0.0 for local server as
         * consumer. For producer use the hostname or ip address of the remote
         * server. The option is a java.lang.String type.
         */
        public T host(String host) {
            this.properties.put("host", host);
            return (T) this;
        }
        /**
         * Port number. The option is a int type.
         */
        public T port(int port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Whether or not to disconnect(close) from Mina session right after
         * use. Can be used for both consumer and producer. The option is a
         * boolean type.
         */
        public T disconnect(boolean disconnect) {
            this.properties.put("disconnect", disconnect);
            return (T) this;
        }
        /**
         * You can enable the Apache MINA logging filter. Apache MINA uses slf4j
         * logging at INFO level to log all input and output. The option is a
         * boolean type.
         */
        public T minaLogger(boolean minaLogger) {
            this.properties.put("minaLogger", minaLogger);
            return (T) this;
        }
        /**
         * Setting to set endpoint as one-way or request-response. The option is
         * a boolean type.
         */
        public T sync(boolean sync) {
            this.properties.put("sync", sync);
            return (T) this;
        }
        /**
         * You can configure the timeout that specifies how long to wait for a
         * response from a remote server. The timeout unit is in milliseconds,
         * so 60000 is 60 seconds. The option is a long type.
         */
        public T timeout(long timeout) {
            this.properties.put("timeout", timeout);
            return (T) this;
        }
        /**
         * Maximum amount of time it should take to send data to the MINA
         * session. Default is 10000 milliseconds. The option is a long type.
         */
        public T writeTimeout(long writeTimeout) {
            this.properties.put("writeTimeout", writeTimeout);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Number of worker threads in the worker pool for TCP and UDP. The
         * option is a int type.
         */
        public T maximumPoolSize(int maximumPoolSize) {
            this.properties.put("maximumPoolSize", maximumPoolSize);
            return (T) this;
        }
        /**
         * Whether to use ordered thread pool, to ensure events are processed
         * orderly on the same channel. The option is a boolean type.
         */
        public T orderedThreadPoolExecutor(boolean orderedThreadPoolExecutor) {
            this.properties.put("orderedThreadPoolExecutor", orderedThreadPoolExecutor);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Only used for TCP. You can transfer the exchange over the wire
         * instead of just the body. The following fields are transferred: In
         * body, Out body, fault body, In headers, Out headers, fault headers,
         * exchange properties, exchange exception. This requires that the
         * objects are serializable. Camel will exclude any non-serializable
         * objects and log it at WARN level. The option is a boolean type.
         */
        public T transferExchange(boolean transferExchange) {
            this.properties.put("transferExchange", transferExchange);
            return (T) this;
        }
        /**
         * The mina component installs a default codec if both, codec is null
         * and textline is false. Setting allowDefaultCodec to false prevents
         * the mina component from installing a default codec as the first
         * element in the filter chain. This is useful in scenarios where
         * another filter must be the first in the filter chain, like the SSL
         * filter. The option is a boolean type.
         */
        public T allowDefaultCodec(boolean allowDefaultCodec) {
            this.properties.put("allowDefaultCodec", allowDefaultCodec);
            return (T) this;
        }
        /**
         * To use a custom minda codec implementation. The option is a
         * org.apache.mina.filter.codec.ProtocolCodecFactory type.
         */
        public T codec(Object codec) {
            this.properties.put("codec", codec);
            return (T) this;
        }
        /**
         * To set the textline protocol decoder max line length. By default the
         * default value of Mina itself is used which are 1024. The option is a
         * int type.
         */
        public T decoderMaxLineLength(int decoderMaxLineLength) {
            this.properties.put("decoderMaxLineLength", decoderMaxLineLength);
            return (T) this;
        }
        /**
         * To set the textline protocol encoder max line length. By default the
         * default value of Mina itself is used which are Integer.MAX_VALUE. The
         * option is a int type.
         */
        public T encoderMaxLineLength(int encoderMaxLineLength) {
            this.properties.put("encoderMaxLineLength", encoderMaxLineLength);
            return (T) this;
        }
        /**
         * You can configure the encoding (a charset name) to use for the TCP
         * textline codec and the UDP protocol. If not provided, Camel will use
         * the JVM default Charset. The option is a java.lang.String type.
         */
        public T encoding(String encoding) {
            this.properties.put("encoding", encoding);
            return (T) this;
        }
        /**
         * You can set a list of Mina IoFilters to use. The option is a
         * java.util.List<org.apache.mina.core.filterchain.IoFilter> type.
         */
        public T filters(List<Object> filters) {
            this.properties.put("filters", filters);
            return (T) this;
        }
        /**
         * Only used for TCP. If no codec is specified, you can use this flag to
         * indicate a text line based codec; if not specified or the value is
         * false, then Object Serialization is assumed over TCP. The option is a
         * boolean type.
         */
        public T textline(boolean textline) {
            this.properties.put("textline", textline);
            return (T) this;
        }
        /**
         * Only used for TCP and if textline=true. Sets the text line delimiter
         * to use. If none provided, Camel will use DEFAULT. This delimiter is
         * used to mark the end of text. The option is a
         * org.apache.camel.component.mina2.Mina2TextLineDelimiter type.
         */
        public T textlineDelimiter(Mina2TextLineDelimiter textlineDelimiter) {
            this.properties.put("textlineDelimiter", textlineDelimiter);
            return (T) this;
        }
        /**
         * Whether to auto start SSL handshake. The option is a boolean type.
         */
        public T autoStartTls(boolean autoStartTls) {
            this.properties.put("autoStartTls", autoStartTls);
            return (T) this;
        }
        /**
         * To configure SSL security. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        public T sslContextParameters(Object sslContextParameters) {
            this.properties.put("sslContextParameters", sslContextParameters);
            return (T) this;
        }
    }

    public static class Mina2Consumer
            extends
                Mina2Common<Mina2Consumer>
            implements
                EndpointDefinition.Consumer {
        public Mina2Consumer(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public Mina2Consumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (Mina2Consumer) this;
        }
        /**
         * If the clientMode is true, mina consumer will connect the address as
         * a TCP client. The option is a boolean type.
         */
        public Mina2Consumer clientMode(boolean clientMode) {
            this.properties.put("clientMode", clientMode);
            return (Mina2Consumer) this;
        }
        /**
         * If sync is enabled then this option dictates MinaConsumer if it
         * should disconnect where there is no reply to send back. The option is
         * a boolean type.
         */
        public Mina2Consumer disconnectOnNoReply(boolean disconnectOnNoReply) {
            this.properties.put("disconnectOnNoReply", disconnectOnNoReply);
            return (Mina2Consumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public Mina2Consumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (Mina2Consumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public Mina2Consumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (Mina2Consumer) this;
        }
        /**
         * If sync is enabled this option dictates MinaConsumer which logging
         * level to use when logging a there is no reply to send back. The
         * option is a org.apache.camel.LoggingLevel type.
         */
        public Mina2Consumer noReplyLogLevel(LoggingLevel noReplyLogLevel) {
            this.properties.put("noReplyLogLevel", noReplyLogLevel);
            return (Mina2Consumer) this;
        }
    }

    public static class Mina2Producer
            extends
                Mina2Common<Mina2Producer>
            implements
                EndpointDefinition.Producer {
        public Mina2Producer(String path) {
            super(path);
        }
        /**
         * Whether to create the InetAddress once and reuse. Setting this to
         * false allows to pickup DNS changes in the network. The option is a
         * boolean type.
         */
        public Mina2Producer cachedAddress(boolean cachedAddress) {
            this.properties.put("cachedAddress", cachedAddress);
            return (Mina2Producer) this;
        }
        /**
         * Sessions can be lazily created to avoid exceptions, if the remote
         * server is not up and running when the Camel producer is started. The
         * option is a boolean type.
         */
        public Mina2Producer lazySessionCreation(boolean lazySessionCreation) {
            this.properties.put("lazySessionCreation", lazySessionCreation);
            return (Mina2Producer) this;
        }
    }

    public static enum Mina2TextLineDelimiter {
        DEFAULT, AUTO, UNIX, WINDOWS, MAC;
    }
}