/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.List;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Socket level networking using TCP or UDP with the Apache Mina 2.x library.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class Mina2Endpoint {


    public static class Mina2Common extends EndpointConfiguration {
        /**
         * Protocol to use. The option is a java.lang.String type.
         */
        private String protocol;
        /**
         * Hostname to use. Use localhost or 0.0.0.0 for local server as
         * consumer. For producer use the hostname or ip address of the remote
         * server. The option is a java.lang.String type.
         */
        private String host;
        /**
         * Port number. The option is a int type.
         */
        private int port;
        /**
         * Whether or not to disconnect(close) from Mina session right after
         * use. Can be used for both consumer and producer. The option is a
         * boolean type.
         */
        private boolean disconnect;
        /**
         * You can enable the Apache MINA logging filter. Apache MINA uses slf4j
         * logging at INFO level to log all input and output. The option is a
         * boolean type.
         */
        private boolean minaLogger;
        /**
         * Setting to set endpoint as one-way or request-response. The option is
         * a boolean type.
         */
        private boolean sync;
        /**
         * You can configure the timeout that specifies how long to wait for a
         * response from a remote server. The timeout unit is in milliseconds,
         * so 60000 is 60 seconds. The option is a long type.
         */
        private long timeout;
        /**
         * Maximum amount of time it should take to send data to the MINA
         * session. Default is 10000 milliseconds. The option is a long type.
         */
        private long writeTimeout;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Number of worker threads in the worker pool for TCP and UDP. The
         * option is a int type.
         */
        private int maximumPoolSize;
        /**
         * Whether to use ordered thread pool, to ensure events are processed
         * orderly on the same channel. The option is a boolean type.
         */
        private boolean orderedThreadPoolExecutor;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * Only used for TCP. You can transfer the exchange over the wire
         * instead of just the body. The following fields are transferred: In
         * body, Out body, fault body, In headers, Out headers, fault headers,
         * exchange properties, exchange exception. This requires that the
         * objects are serializable. Camel will exclude any non-serializable
         * objects and log it at WARN level. The option is a boolean type.
         */
        private boolean transferExchange;
        /**
         * The mina component installs a default codec if both, codec is null
         * and textline is false. Setting allowDefaultCodec to false prevents
         * the mina component from installing a default codec as the first
         * element in the filter chain. This is useful in scenarios where
         * another filter must be the first in the filter chain, like the SSL
         * filter. The option is a boolean type.
         */
        private boolean allowDefaultCodec;
        /**
         * To use a custom minda codec implementation. The option is a
         * org.apache.mina.filter.codec.ProtocolCodecFactory type.
         */
        private Object codec;
        /**
         * To set the textline protocol decoder max line length. By default the
         * default value of Mina itself is used which are 1024. The option is a
         * int type.
         */
        private int decoderMaxLineLength;
        /**
         * To set the textline protocol encoder max line length. By default the
         * default value of Mina itself is used which are Integer.MAX_VALUE. The
         * option is a int type.
         */
        private int encoderMaxLineLength;
        /**
         * You can configure the encoding (a charset name) to use for the TCP
         * textline codec and the UDP protocol. If not provided, Camel will use
         * the JVM default Charset. The option is a java.lang.String type.
         */
        private String encoding;
        /**
         * You can set a list of Mina IoFilters to use. The option is a
         * java.util.List<org.apache.mina.core.filterchain.IoFilter> type.
         */
        private List<Object> filters;
        /**
         * Only used for TCP. If no codec is specified, you can use this flag to
         * indicate a text line based codec; if not specified or the value is
         * false, then Object Serialization is assumed over TCP. The option is a
         * boolean type.
         */
        private boolean textline;
        /**
         * Only used for TCP and if textline=true. Sets the text line delimiter
         * to use. If none provided, Camel will use DEFAULT. This delimiter is
         * used to mark the end of text. The option is a
         * org.apache.camel.component.mina2.Mina2TextLineDelimiter type.
         */
        private Mina2TextLineDelimiter textlineDelimiter;
        /**
         * Whether to auto start SSL handshake. The option is a boolean type.
         */
        private boolean autoStartTls;
        /**
         * To configure SSL security. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        private Object sslContextParameters;

        public String getProtocol() {
            return protocol;
        }

        public void setProtocol(String protocol) {
            this.protocol = protocol;
        }

        public String getHost() {
            return host;
        }

        public void setHost(String host) {
            this.host = host;
        }

        public int getPort() {
            return port;
        }

        public void setPort(int port) {
            this.port = port;
        }

        public boolean getDisconnect() {
            return disconnect;
        }

        public void setDisconnect(boolean disconnect) {
            this.disconnect = disconnect;
        }

        public boolean getMinaLogger() {
            return minaLogger;
        }

        public void setMinaLogger(boolean minaLogger) {
            this.minaLogger = minaLogger;
        }

        public boolean getSync() {
            return sync;
        }

        public void setSync(boolean sync) {
            this.sync = sync;
        }

        public long getTimeout() {
            return timeout;
        }

        public void setTimeout(long timeout) {
            this.timeout = timeout;
        }

        public long getWriteTimeout() {
            return writeTimeout;
        }

        public void setWriteTimeout(long writeTimeout) {
            this.writeTimeout = writeTimeout;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public int getMaximumPoolSize() {
            return maximumPoolSize;
        }

        public void setMaximumPoolSize(int maximumPoolSize) {
            this.maximumPoolSize = maximumPoolSize;
        }

        public boolean getOrderedThreadPoolExecutor() {
            return orderedThreadPoolExecutor;
        }

        public void setOrderedThreadPoolExecutor(
                boolean orderedThreadPoolExecutor) {
            this.orderedThreadPoolExecutor = orderedThreadPoolExecutor;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public boolean getTransferExchange() {
            return transferExchange;
        }

        public void setTransferExchange(boolean transferExchange) {
            this.transferExchange = transferExchange;
        }

        public boolean getAllowDefaultCodec() {
            return allowDefaultCodec;
        }

        public void setAllowDefaultCodec(boolean allowDefaultCodec) {
            this.allowDefaultCodec = allowDefaultCodec;
        }

        public Object getCodec() {
            return codec;
        }

        public void setCodec(Object codec) {
            this.codec = codec;
        }

        public int getDecoderMaxLineLength() {
            return decoderMaxLineLength;
        }

        public void setDecoderMaxLineLength(int decoderMaxLineLength) {
            this.decoderMaxLineLength = decoderMaxLineLength;
        }

        public int getEncoderMaxLineLength() {
            return encoderMaxLineLength;
        }

        public void setEncoderMaxLineLength(int encoderMaxLineLength) {
            this.encoderMaxLineLength = encoderMaxLineLength;
        }

        public String getEncoding() {
            return encoding;
        }

        public void setEncoding(String encoding) {
            this.encoding = encoding;
        }

        public List<Object> getFilters() {
            return filters;
        }

        public void setFilters(List<Object> filters) {
            this.filters = filters;
        }

        public boolean getTextline() {
            return textline;
        }

        public void setTextline(boolean textline) {
            this.textline = textline;
        }

        public Mina2TextLineDelimiter getTextlineDelimiter() {
            return textlineDelimiter;
        }

        public void setTextlineDelimiter(
                Mina2TextLineDelimiter textlineDelimiter) {
            this.textlineDelimiter = textlineDelimiter;
        }

        public boolean getAutoStartTls() {
            return autoStartTls;
        }

        public void setAutoStartTls(boolean autoStartTls) {
            this.autoStartTls = autoStartTls;
        }

        public Object getSslContextParameters() {
            return sslContextParameters;
        }

        public void setSslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
        }
    }

    public static class Mina2Consumer extends Mina2Common {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * If the clientMode is true, mina consumer will connect the address as
         * a TCP client. The option is a boolean type.
         */
        private boolean clientMode;
        /**
         * If sync is enabled then this option dictates MinaConsumer if it
         * should disconnect where there is no reply to send back. The option is
         * a boolean type.
         */
        private boolean disconnectOnNoReply;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;
        /**
         * If sync is enabled this option dictates MinaConsumer which logging
         * level to use when logging a there is no reply to send back. The
         * option is a org.apache.camel.LoggingLevel type.
         */
        private LoggingLevel noReplyLogLevel;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public boolean getClientMode() {
            return clientMode;
        }

        public void setClientMode(boolean clientMode) {
            this.clientMode = clientMode;
        }

        public boolean getDisconnectOnNoReply() {
            return disconnectOnNoReply;
        }

        public void setDisconnectOnNoReply(boolean disconnectOnNoReply) {
            this.disconnectOnNoReply = disconnectOnNoReply;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }

        public LoggingLevel getNoReplyLogLevel() {
            return noReplyLogLevel;
        }

        public void setNoReplyLogLevel(LoggingLevel noReplyLogLevel) {
            this.noReplyLogLevel = noReplyLogLevel;
        }
    }

    public static class Mina2Producer extends Mina2Common {
        /**
         * Whether to create the InetAddress once and reuse. Setting this to
         * false allows to pickup DNS changes in the network. The option is a
         * boolean type.
         */
        private boolean cachedAddress;
        /**
         * Sessions can be lazily created to avoid exceptions, if the remote
         * server is not up and running when the Camel producer is started. The
         * option is a boolean type.
         */
        private boolean lazySessionCreation;

        public boolean getCachedAddress() {
            return cachedAddress;
        }

        public void setCachedAddress(boolean cachedAddress) {
            this.cachedAddress = cachedAddress;
        }

        public boolean getLazySessionCreation() {
            return lazySessionCreation;
        }

        public void setLazySessionCreation(boolean lazySessionCreation) {
            this.lazySessionCreation = lazySessionCreation;
        }
    }

    public static enum Mina2TextLineDelimiter {
        DEFAULT, AUTO, UNIX, WINDOWS, MAC;
    }
}