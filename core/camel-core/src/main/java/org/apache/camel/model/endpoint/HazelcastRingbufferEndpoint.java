/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;

/**
 * The hazelcast-ringbuffer component is used to access Hazelcast distributed
 * ringbuffer.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class HazelcastRingbufferEndpoint {


    public static class HazelcastRingbufferCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String cacheName;
        private Boolean reliable;
        private HazelcastOperation defaultOperation;
        private Object hazelcastInstance;
        private String hazelcastInstanceName;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;
        private Integer concurrentConsumers;
        private Integer onErrorDelay;
        private Integer pollTimeout;
        private Boolean transacted;
        private Boolean transferExchange;

        /**
         * The name of the cache. The option is a java.lang.String type.
         */
        public T cacheName(String cacheName) {
            this.cacheName = cacheName;
            return (T) this;
        }

        /**
         * Define if the endpoint will use a reliable Topic struct or not. The
         * option is a boolean type.
         */
        public T reliable(boolean reliable) {
            this.reliable = reliable;
            return (T) this;
        }

        /**
         * To specify a default operation to use, if no operation header has
         * been provided. The option is a
         * org.apache.camel.component.hazelcast.HazelcastOperation type.
         */
        public T defaultOperation(HazelcastOperation defaultOperation) {
            this.defaultOperation = defaultOperation;
            return (T) this;
        }

        /**
         * The hazelcast instance reference which can be used for hazelcast
         * endpoint. The option is a com.hazelcast.core.HazelcastInstance type.
         */
        public T hazelcastInstance(Object hazelcastInstance) {
            this.hazelcastInstance = hazelcastInstance;
            return (T) this;
        }

        /**
         * The hazelcast instance reference name which can be used for hazelcast
         * endpoint. If you don't specify the instance reference, camel use the
         * default hazelcast instance from the camel-hazelcast instance. The
         * option is a java.lang.String type.
         */
        public T hazelcastInstanceName(String hazelcastInstanceName) {
            this.hazelcastInstanceName = hazelcastInstanceName;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        /**
         * To use concurrent consumers polling from the SEDA queue. The option
         * is a int type.
         */
        public T concurrentConsumers(int concurrentConsumers) {
            this.concurrentConsumers = concurrentConsumers;
            return (T) this;
        }

        /**
         * Milliseconds before consumer continues polling after an error has
         * occurred. The option is a int type.
         */
        public T onErrorDelay(int onErrorDelay) {
            this.onErrorDelay = onErrorDelay;
            return (T) this;
        }

        /**
         * The timeout used when consuming from the SEDA queue. When a timeout
         * occurs, the consumer can check whether it is allowed to continue
         * running. Setting a lower value allows the consumer to react more
         * quickly upon shutdown. The option is a int type.
         */
        public T pollTimeout(int pollTimeout) {
            this.pollTimeout = pollTimeout;
            return (T) this;
        }

        /**
         * If set to true then the consumer runs in transaction mode, where the
         * messages in the seda queue will only be removed if the transaction
         * commits, which happens when the processing is complete. The option is
         * a boolean type.
         */
        public T transacted(boolean transacted) {
            this.transacted = transacted;
            return (T) this;
        }

        /**
         * If set to true the whole Exchange will be transfered. If header or
         * body contains not serializable objects, they will be skipped. The
         * option is a boolean type.
         */
        public T transferExchange(boolean transferExchange) {
            this.transferExchange = transferExchange;
            return (T) this;
        }

        public String getCacheName() {
            return cacheName;
        }

        public void setCacheName(String cacheName) {
            this.cacheName = cacheName;
        }

        public Boolean getReliable() {
            return reliable;
        }

        public void setReliable(Boolean reliable) {
            this.reliable = reliable;
        }

        public HazelcastOperation getDefaultOperation() {
            return defaultOperation;
        }

        public void setDefaultOperation(HazelcastOperation defaultOperation) {
            this.defaultOperation = defaultOperation;
        }

        public Object getHazelcastInstance() {
            return hazelcastInstance;
        }

        public void setHazelcastInstance(Object hazelcastInstance) {
            this.hazelcastInstance = hazelcastInstance;
        }

        public String getHazelcastInstanceName() {
            return hazelcastInstanceName;
        }

        public void setHazelcastInstanceName(String hazelcastInstanceName) {
            this.hazelcastInstanceName = hazelcastInstanceName;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Integer getConcurrentConsumers() {
            return concurrentConsumers;
        }

        public void setConcurrentConsumers(Integer concurrentConsumers) {
            this.concurrentConsumers = concurrentConsumers;
        }

        public Integer getOnErrorDelay() {
            return onErrorDelay;
        }

        public void setOnErrorDelay(Integer onErrorDelay) {
            this.onErrorDelay = onErrorDelay;
        }

        public Integer getPollTimeout() {
            return pollTimeout;
        }

        public void setPollTimeout(Integer pollTimeout) {
            this.pollTimeout = pollTimeout;
        }

        public Boolean getTransacted() {
            return transacted;
        }

        public void setTransacted(Boolean transacted) {
            this.transacted = transacted;
        }

        public Boolean getTransferExchange() {
            return transferExchange;
        }

        public void setTransferExchange(Boolean transferExchange) {
            this.transferExchange = transferExchange;
        }
    }

    public static class HazelcastRingbufferConsumer
            extends
                HazelcastRingbufferCommon<HazelcastRingbufferConsumer> {
    }

    public static class HazelcastRingbufferProducer
            extends
                HazelcastRingbufferCommon<HazelcastRingbufferProducer> {
    }

    public static enum HazelcastOperation {
        PUT, DELETE, GET, UPDATE, QUERY, GET_ALL, CLEAR, PUT_IF_ABSENT, ADD_ALL, REMOVE_ALL, RETAIN_ALL, EVICT, EVICT_ALL, VALUE_COUNT, CONTAINS_KEY, CONTAINS_VALUE, GET_KEYS, REMOVE_VALUE, INCREMENT, DECREMENT, SET_VALUE, DESTROY, COMPARE_AND_SET, GET_AND_ADD, ADD, OFFER, PEEK, POLL, REMAINING_CAPACITY, DRAIN_TO, REMOVE_IF, TAKE, PUBLISH, READ_ONCE_HEAD, READ_ONCE_TAIL, CAPACITY;
    }
}