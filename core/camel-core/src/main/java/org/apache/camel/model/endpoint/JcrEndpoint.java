/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The jcr component allows you to add/read nodes to/from a JCR compliant
 * content repository.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class JcrEndpoint {


    public static class JcrCommon extends EndpointConfiguration {
        /**
         * Name of the javax.jcr.Repository to lookup from the Camel registry to
         * be used. The option is a java.lang.String type.
         */
        private String host;
        /**
         * Get the base node when accessing the repository. The option is a
         * java.lang.String type.
         */
        private String base;
        /**
         * When isDeep is true, events whose associated parent node is at
         * absPath or within its subgraph are received. The option is a boolean
         * type.
         */
        private boolean deep;
        /**
         * eventTypes (a combination of one or more event types encoded as a bit
         * mask value such as javax.jcr.observation.Event.NODE_ADDED,
         * javax.jcr.observation.Event.NODE_REMOVED, etc.). The option is a int
         * type.
         */
        private int eventTypes;
        /**
         * When a comma separated nodeTypeName list string is set, only events
         * whose associated parent node has one of the node types (or a subtype
         * of one of the node types) in this list will be received. The option
         * is a java.lang.String type.
         */
        private String nodeTypeNames;
        /**
         * If noLocal is true, then events generated by the session through
         * which the listener was registered are ignored. Otherwise, they are
         * not ignored. The option is a boolean type.
         */
        private boolean noLocal;
        /**
         * Password for login. The option is a java.lang.String type.
         */
        private String password;
        /**
         * Interval in milliseconds to wait before each session live checking
         * The default value is 60000 ms. The option is a long type.
         */
        private long sessionLiveCheckInterval;
        /**
         * Interval in milliseconds to wait before the first session live
         * checking. The default value is 3000 ms. The option is a long type.
         */
        private long sessionLiveCheckIntervalOnStart;
        /**
         * Username for login. The option is a java.lang.String type.
         */
        private String username;
        /**
         * When a comma separated uuid list string is set, only events whose
         * associated parent node has one of the identifiers in the comma
         * separated uuid list will be received. The option is a
         * java.lang.String type.
         */
        private String uuids;
        /**
         * The workspace to access. If it's not specified then the default one
         * will be used. The option is a java.lang.String type.
         */
        private String workspaceName;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;

        public String getHost() {
            return host;
        }

        public void setHost(String host) {
            this.host = host;
        }

        public String getBase() {
            return base;
        }

        public void setBase(String base) {
            this.base = base;
        }

        public boolean getDeep() {
            return deep;
        }

        public void setDeep(boolean deep) {
            this.deep = deep;
        }

        public int getEventTypes() {
            return eventTypes;
        }

        public void setEventTypes(int eventTypes) {
            this.eventTypes = eventTypes;
        }

        public String getNodeTypeNames() {
            return nodeTypeNames;
        }

        public void setNodeTypeNames(String nodeTypeNames) {
            this.nodeTypeNames = nodeTypeNames;
        }

        public boolean getNoLocal() {
            return noLocal;
        }

        public void setNoLocal(boolean noLocal) {
            this.noLocal = noLocal;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public long getSessionLiveCheckInterval() {
            return sessionLiveCheckInterval;
        }

        public void setSessionLiveCheckInterval(long sessionLiveCheckInterval) {
            this.sessionLiveCheckInterval = sessionLiveCheckInterval;
        }

        public long getSessionLiveCheckIntervalOnStart() {
            return sessionLiveCheckIntervalOnStart;
        }

        public void setSessionLiveCheckIntervalOnStart(
                long sessionLiveCheckIntervalOnStart) {
            this.sessionLiveCheckIntervalOnStart = sessionLiveCheckIntervalOnStart;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getUuids() {
            return uuids;
        }

        public void setUuids(String uuids) {
            this.uuids = uuids;
        }

        public String getWorkspaceName() {
            return workspaceName;
        }

        public void setWorkspaceName(String workspaceName) {
            this.workspaceName = workspaceName;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class JcrConsumer extends JcrCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class JcrProducer extends JcrCommon {
    }
}