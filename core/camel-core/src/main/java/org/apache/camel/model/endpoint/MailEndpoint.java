/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.HeaderFilterStrategy;
import org.apache.camel.spi.IdempotentRepository;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * To send or receive emails using imap/pop3 or smtp protocols.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface MailEndpoint {


    public static class MailCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        MailCommon(String path) {
            super("imap", path);
        }
        /**
         * The mail server host name. The option is a java.lang.String type.
         */
        public T host(String host) {
            this.properties.put("host", host);
            return (T) this;
        }
        /**
         * The port number of the mail server. The option is a int type.
         */
        public T port(int port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Sets additional java mail properties, that will append/override any
         * default properties that is set based on all the other options. This
         * is useful if you need to add some special options but want to keep
         * the others as is. The option is a java.util.Properties type.
         */
        public T additionalJavaMailProperties(
                Properties additionalJavaMailProperties) {
            this.properties.put("additionalJavaMailProperties", additionalJavaMailProperties);
            return (T) this;
        }
        /**
         * Specifies the key to an IN message header that contains an
         * alternative email body. For example, if you send emails in text/html
         * format and want to provide an alternative mail body for non-HTML
         * email clients, set the alternative mail body with this key as a
         * header. The option is a java.lang.String type.
         */
        public T alternativeBodyHeader(String alternativeBodyHeader) {
            this.properties.put("alternativeBodyHeader", alternativeBodyHeader);
            return (T) this;
        }
        /**
         * To use a custom AttachmentsContentTransferEncodingResolver to resolve
         * what content-type-encoding to use for attachments. The option is a
         * org.apache.camel.component.mail.AttachmentsContentTransferEncodingResolver type.
         */
        public T attachmentsContentTransferEncodingResolver(
                Object attachmentsContentTransferEncodingResolver) {
            this.properties.put("attachmentsContentTransferEncodingResolver", attachmentsContentTransferEncodingResolver);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets the binding used to convert from a Camel message to and from a
         * Mail message. The option is a
         * org.apache.camel.component.mail.MailBinding type.
         */
        public T binding(Object binding) {
            this.properties.put("binding", binding);
            return (T) this;
        }
        /**
         * The connection timeout in milliseconds. The option is a int type.
         */
        public T connectionTimeout(int connectionTimeout) {
            this.properties.put("connectionTimeout", connectionTimeout);
            return (T) this;
        }
        /**
         * The mail message content type. Use text/html for HTML mails. The
         * option is a java.lang.String type.
         */
        public T contentType(String contentType) {
            this.properties.put("contentType", contentType);
            return (T) this;
        }
        /**
         * Resolver to determine Content-Type for file attachments. The option
         * is a org.apache.camel.component.mail.ContentTypeResolver type.
         */
        public T contentTypeResolver(Object contentTypeResolver) {
            this.properties.put("contentTypeResolver", contentTypeResolver);
            return (T) this;
        }
        /**
         * Enable debug mode on the underlying mail framework. The SUN Mail
         * framework logs the debug messages to System.out by default. The
         * option is a boolean type.
         */
        public T debugMode(boolean debugMode) {
            this.properties.put("debugMode", debugMode);
            return (T) this;
        }
        /**
         * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter
         * headers. The option is a org.apache.camel.spi.HeaderFilterStrategy
         * type.
         */
        public T headerFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {
            this.properties.put("headerFilterStrategy", headerFilterStrategy);
            return (T) this;
        }
        /**
         * Option to let Camel ignore unsupported charset in the local JVM when
         * sending mails. If the charset is unsupported then charset=XXX (where
         * XXX represents the unsupported charset) is removed from the
         * content-type and it relies on the platform default instead. The
         * option is a boolean type.
         */
        public T ignoreUnsupportedCharset(boolean ignoreUnsupportedCharset) {
            this.properties.put("ignoreUnsupportedCharset", ignoreUnsupportedCharset);
            return (T) this;
        }
        /**
         * Option to let Camel ignore unsupported charset in the local JVM when
         * sending mails. If the charset is unsupported then charset=XXX (where
         * XXX represents the unsupported charset) is removed from the
         * content-type and it relies on the platform default instead. The
         * option is a boolean type.
         */
        public T ignoreUriScheme(boolean ignoreUriScheme) {
            this.properties.put("ignoreUriScheme", ignoreUriScheme);
            return (T) this;
        }
        /**
         * Specifies the mail session that camel should use for all mail
         * interactions. Useful in scenarios where mail sessions are created and
         * managed by some other resource, such as a JavaEE container. If this
         * is not specified, Camel automatically creates the mail session for
         * you. The option is a javax.mail.Session type.
         */
        public T session(Object session) {
            this.properties.put("session", session);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Whether to use disposition inline or attachment. The option is a
         * boolean type.
         */
        public T useInlineAttachments(boolean useInlineAttachments) {
            this.properties.put("useInlineAttachments", useInlineAttachments);
            return (T) this;
        }
        /**
         * To use a dummy security setting for trusting all certificates. Should
         * only be used for development mode, and not production. The option is
         * a boolean type.
         */
        public T dummyTrustManager(boolean dummyTrustManager) {
            this.properties.put("dummyTrustManager", dummyTrustManager);
            return (T) this;
        }
        /**
         * The password for login. The option is a java.lang.String type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * To configure security using SSLContextParameters. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        public T sslContextParameters(Object sslContextParameters) {
            this.properties.put("sslContextParameters", sslContextParameters);
            return (T) this;
        }
        /**
         * The username for login. The option is a java.lang.String type.
         */
        public T username(String username) {
            this.properties.put("username", username);
            return (T) this;
        }
    }

    public static class MailConsumer
            extends
                MailCommon<MailConsumer>
            implements
                EndpointDefinition.Consumer {
        public MailConsumer(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public MailConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (MailConsumer) this;
        }
        /**
         * Whether the consumer should close the folder after polling. Setting
         * this option to false and having disconnect=false as well, then the
         * consumer keep the folder open between polls. The option is a boolean
         * type.
         */
        public MailConsumer closeFolder(boolean closeFolder) {
            this.properties.put("closeFolder", closeFolder);
            return (MailConsumer) this;
        }
        /**
         * After processing a mail message, it can be copied to a mail folder
         * with the given name. You can override this configuration value, with
         * a header with the key copyTo, allowing you to copy messages to folder
         * names configured at runtime. The option is a java.lang.String type.
         */
        public MailConsumer copyTo(String copyTo) {
            this.properties.put("copyTo", copyTo);
            return (MailConsumer) this;
        }
        /**
         * Deletes the messages after they have been processed. This is done by
         * setting the DELETED flag on the mail message. If false, the SEEN flag
         * is set instead. As of Camel 2.10 you can override this configuration
         * option by setting a header with the key delete to determine if the
         * mail should be deleted or not. The option is a boolean type.
         */
        public MailConsumer delete(boolean delete) {
            this.properties.put("delete", delete);
            return (MailConsumer) this;
        }
        /**
         * Whether the consumer should disconnect after polling. If enabled this
         * forces Camel to connect on each poll. The option is a boolean type.
         */
        public MailConsumer disconnect(boolean disconnect) {
            this.properties.put("disconnect", disconnect);
            return (MailConsumer) this;
        }
        /**
         * If the mail consumer cannot retrieve a given mail message, then this
         * option allows to handle the caused exception by the consumer's error
         * handler. By enable the bridge error handler on the consumer, then the
         * Camel routing error handler can handle the exception instead. The
         * default behavior would be the consumer throws an exception and no
         * mails from the batch would be able to be routed by Camel. The option
         * is a boolean type.
         */
        public MailConsumer handleFailedMessage(boolean handleFailedMessage) {
            this.properties.put("handleFailedMessage", handleFailedMessage);
            return (MailConsumer) this;
        }
        /**
         * Specifies the maximum number of messages to gather per poll. By
         * default, no maximum is set. Can be used to set a limit of e.g. 1000
         * to avoid downloading thousands of files when the server starts up.
         * Set a value of 0 or negative to disable this option. The option is a
         * int type.
         */
        public MailConsumer maxMessagesPerPoll(int maxMessagesPerPoll) {
            this.properties.put("maxMessagesPerPoll", maxMessagesPerPoll);
            return (MailConsumer) this;
        }
        /**
         * This option enables transparent MIME decoding and unfolding for mail
         * headers. The option is a boolean type.
         */
        public MailConsumer mimeDecodeHeaders(boolean mimeDecodeHeaders) {
            this.properties.put("mimeDecodeHeaders", mimeDecodeHeaders);
            return (MailConsumer) this;
        }
        /**
         * Will mark the javax.mail.Message as peeked before processing the mail
         * message. This applies to IMAPMessage messages types only. By using
         * peek the mail will not be eager marked as SEEN on the mail server,
         * which allows us to rollback the mail message if there is an error
         * processing in Camel. The option is a boolean type.
         */
        public MailConsumer peek(boolean peek) {
            this.properties.put("peek", peek);
            return (MailConsumer) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option is a
         * boolean type.
         */
        public MailConsumer sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (MailConsumer) this;
        }
        /**
         * If the mail consumer cannot retrieve a given mail message, then this
         * option allows to skip the message and move on to retrieve the next
         * mail message. The default behavior would be the consumer throws an
         * exception and no mails from the batch would be able to be routed by
         * Camel. The option is a boolean type.
         */
        public MailConsumer skipFailedMessage(boolean skipFailedMessage) {
            this.properties.put("skipFailedMessage", skipFailedMessage);
            return (MailConsumer) this;
        }
        /**
         * Whether to limit by unseen mails only. The option is a boolean type.
         */
        public MailConsumer unseen(boolean unseen) {
            this.properties.put("unseen", unseen);
            return (MailConsumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public MailConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (MailConsumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public MailConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (MailConsumer) this;
        }
        /**
         * Sets the maximum number of messages to consume during a poll. This
         * can be used to avoid overloading a mail server, if a mailbox folder
         * contains a lot of messages. Default value of -1 means no fetch size
         * and all messages will be consumed. Setting the value to 0 is a
         * special corner case, where Camel will not consume any messages at
         * all. The option is a int type.
         */
        public MailConsumer fetchSize(int fetchSize) {
            this.properties.put("fetchSize", fetchSize);
            return (MailConsumer) this;
        }
        /**
         * The folder to poll. The option is a java.lang.String type.
         */
        public MailConsumer folderName(String folderName) {
            this.properties.put("folderName", folderName);
            return (MailConsumer) this;
        }
        /**
         * A pluggable MailUidGenerator that allows to use custom logic to
         * generate UUID of the mail message. The option is a
         * org.apache.camel.component.mail.MailUidGenerator type.
         */
        public MailConsumer mailUidGenerator(Object mailUidGenerator) {
            this.properties.put("mailUidGenerator", mailUidGenerator);
            return (MailConsumer) this;
        }
        /**
         * Specifies whether Camel should map the received mail message to Camel
         * body/headers. If set to true, the body of the mail message is mapped
         * to the body of the Camel IN message and the mail headers are mapped
         * to IN headers. If this option is set to false then the IN message
         * contains a raw javax.mail.Message. You can retrieve this raw message
         * by calling exchange.getIn().getBody(javax.mail.Message.class). The
         * option is a boolean type.
         */
        public MailConsumer mapMailMessage(boolean mapMailMessage) {
            this.properties.put("mapMailMessage", mapMailMessage);
            return (MailConsumer) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option is a
         * org.apache.camel.spi.PollingConsumerPollStrategy type.
         */
        public MailConsumer pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (MailConsumer) this;
        }
        /**
         * Refers to an MailBoxPostProcessAction for doing post processing tasks
         * on the mailbox once the normal processing ended. The option is a
         * org.apache.camel.component.mail.MailBoxPostProcessAction type.
         */
        public MailConsumer postProcessAction(Object postProcessAction) {
            this.properties.put("postProcessAction", postProcessAction);
            return (MailConsumer) this;
        }
        /**
         * A pluggable repository org.apache.camel.spi.IdempotentRepository
         * which allows to cluster consuming from the same mailbox, and let the
         * repository coordinate whether a mail message is valid for the
         * consumer to process. By default no repository is in use. The option
         * is a org.apache.camel.spi.IdempotentRepository type.
         */
        public MailConsumer idempotentRepository(
                IdempotentRepository idempotentRepository) {
            this.properties.put("idempotentRepository", idempotentRepository);
            return (MailConsumer) this;
        }
        /**
         * When using idempotent repository, then when the mail message has been
         * successfully processed and is committed, should the message id be
         * removed from the idempotent repository (default) or be kept in the
         * repository. By default its assumed the message id is unique and has
         * no value to be kept in the repository, because the mail message will
         * be marked as seen/moved or deleted to prevent it from being consumed
         * again. And therefore having the message id stored in the idempotent
         * repository has little value. However this option allows to store the
         * message id, for whatever reason you may have. The option is a boolean
         * type.
         */
        public MailConsumer idempotentRepositoryRemoveOnCommit(
                boolean idempotentRepositoryRemoveOnCommit) {
            this.properties.put("idempotentRepositoryRemoveOnCommit", idempotentRepositoryRemoveOnCommit);
            return (MailConsumer) this;
        }
        /**
         * Refers to a javax.mail.search.SearchTerm which allows to filter mails
         * based on search criteria such as subject, body, from, sent after a
         * certain date etc. The option is a javax.mail.search.SearchTerm type.
         */
        public MailConsumer searchTerm(Object searchTerm) {
            this.properties.put("searchTerm", searchTerm);
            return (MailConsumer) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * is a int type.
         */
        public MailConsumer backoffErrorThreshold(int backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (MailConsumer) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option is a int type.
         */
        public MailConsumer backoffIdleThreshold(int backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (MailConsumer) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option is a int type.
         */
        public MailConsumer backoffMultiplier(int backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (MailConsumer) this;
        }
        /**
         * Milliseconds before the next poll. The option is a long type.
         */
        public MailConsumer delay(long delay) {
            this.properties.put("delay", delay);
            return (MailConsumer) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option is a boolean type.
         */
        public MailConsumer greedy(boolean greedy) {
            this.properties.put("greedy", greedy);
            return (MailConsumer) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public MailConsumer initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (MailConsumer) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * is a org.apache.camel.LoggingLevel type.
         */
        public MailConsumer runLoggingLevel(LoggingLevel runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (MailConsumer) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option is a java.util.concurrent.ScheduledExecutorService
         * type.
         */
        public MailConsumer scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (MailConsumer) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option is a
         * org.apache.camel.spi.ScheduledPollConsumerScheduler type.
         */
        public MailConsumer scheduler(ScheduledPollConsumerScheduler scheduler) {
            this.properties.put("scheduler", scheduler);
            return (MailConsumer) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public MailConsumer schedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (MailConsumer) this;
        }
        /**
         * Whether the scheduler should be auto started. The option is a boolean
         * type.
         */
        public MailConsumer startScheduler(boolean startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (MailConsumer) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option is a
         * java.util.concurrent.TimeUnit type.
         */
        public MailConsumer timeUnit(TimeUnit timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (MailConsumer) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option is a boolean
         * type.
         */
        public MailConsumer useFixedDelay(boolean useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (MailConsumer) this;
        }
        /**
         * Sorting order for messages. Only natively supported for IMAP.
         * Emulated to some degree when using POP3 or when IMAP server does not
         * have the SORT capability. The option is a java.lang.String type.
         */
        public MailConsumer sortTerm(Object[] sortTerm) {
            this.properties.put("sortTerm", sortTerm);
            return (MailConsumer) this;
        }
    }

    public static class MailProducer
            extends
                MailCommon<MailProducer>
            implements
                EndpointDefinition.Producer {
        public MailProducer(String path) {
            super(path);
        }
        /**
         * Sets the BCC email address. Separate multiple email addresses with
         * comma. The option is a java.lang.String type.
         */
        public MailProducer bcc(String bcc) {
            this.properties.put("bcc", bcc);
            return (MailProducer) this;
        }
        /**
         * Sets the CC email address. Separate multiple email addresses with
         * comma. The option is a java.lang.String type.
         */
        public MailProducer cc(String cc) {
            this.properties.put("cc", cc);
            return (MailProducer) this;
        }
        /**
         * The from email address. The option is a java.lang.String type.
         */
        public MailProducer from(String from) {
            this.properties.put("from", from);
            return (MailProducer) this;
        }
        /**
         * The Reply-To recipients (the receivers of the response mail).
         * Separate multiple email addresses with a comma. The option is a
         * java.lang.String type.
         */
        public MailProducer replyTo(String replyTo) {
            this.properties.put("replyTo", replyTo);
            return (MailProducer) this;
        }
        /**
         * The Subject of the message being sent. Note: Setting the subject in
         * the header takes precedence over this option. The option is a
         * java.lang.String type.
         */
        public MailProducer subject(String subject) {
            this.properties.put("subject", subject);
            return (MailProducer) this;
        }
        /**
         * Sets the To email address. Separate multiple email addresses with
         * comma. The option is a java.lang.String type.
         */
        public MailProducer to(String to) {
            this.properties.put("to", to);
            return (MailProducer) this;
        }
        /**
         * To use a custom org.apache.camel.component.mail.JavaMailSender for
         * sending emails. The option is a
         * org.apache.camel.component.mail.JavaMailSender type.
         */
        public MailProducer javaMailSender(Object javaMailSender) {
            this.properties.put("javaMailSender", javaMailSender);
            return (MailProducer) this;
        }
    }
    public default MailConsumer fromMail(String path) {
        return new MailConsumer(path);
    }
    public default MailProducer toMail(String path) {
        return new MailProducer(path);
    }
}