/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;

/**
 * The Validator component performs bean validation of the message body using
 * the Java Bean Validation API.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface BeanValidatorEndpointBuilder {


    /**
     * Base class for the Bean Validator component builders.
     */
    public static class BeanValidatorCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        BeanValidatorCommonBuilder(String path) {
            super("bean-validator", path);
        }
        /**
         * Where label is an arbitrary text value describing the endpoint. The
         * option is a <code>java.lang.String</code> type.
         */
        public T label(String label) {
            this.properties.put("label", label);
            return (T) this;
        }
        /**
         * To use a custom ConstraintValidatorFactory. The option is a
         * <code>javax.validation.ConstraintValidatorFactory</code> type.
         */
        public T constraintValidatorFactory(Object constraintValidatorFactory) {
            this.properties.put("constraintValidatorFactory", constraintValidatorFactory);
            return (T) this;
        }
        /**
         * To use a custom ConstraintValidatorFactory. The option will be
         * converted to a
         * <code>javax.validation.ConstraintValidatorFactory</code> type.
         */
        public T constraintValidatorFactory(String constraintValidatorFactory) {
            this.properties.put("constraintValidatorFactory", constraintValidatorFactory);
            return (T) this;
        }
        /**
         * To use a custom validation group. The option is a
         * <code>java.lang.String</code> type.
         */
        public T group(String group) {
            this.properties.put("group", group);
            return (T) this;
        }
        /**
         * To use a custom MessageInterpolator. The option is a
         * <code>javax.validation.MessageInterpolator</code> type.
         */
        public T messageInterpolator(Object messageInterpolator) {
            this.properties.put("messageInterpolator", messageInterpolator);
            return (T) this;
        }
        /**
         * To use a custom MessageInterpolator. The option will be converted to
         * a <code>javax.validation.MessageInterpolator</code> type.
         */
        public T messageInterpolator(String messageInterpolator) {
            this.properties.put("messageInterpolator", messageInterpolator);
            return (T) this;
        }
        /**
         * To use a custom TraversableResolver. The option is a
         * <code>javax.validation.TraversableResolver</code> type.
         */
        public T traversableResolver(Object traversableResolver) {
            this.properties.put("traversableResolver", traversableResolver);
            return (T) this;
        }
        /**
         * To use a custom TraversableResolver. The option will be converted to
         * a <code>javax.validation.TraversableResolver</code> type.
         */
        public T traversableResolver(String traversableResolver) {
            this.properties.put("traversableResolver", traversableResolver);
            return (T) this;
        }
        /**
         * To use a a custom ValidationProviderResolver. The option is a
         * <code>javax.validation.ValidationProviderResolver</code> type.
         */
        public T validationProviderResolver(Object validationProviderResolver) {
            this.properties.put("validationProviderResolver", validationProviderResolver);
            return (T) this;
        }
        /**
         * To use a a custom ValidationProviderResolver. The option will be
         * converted to a
         * <code>javax.validation.ValidationProviderResolver</code> type.
         */
        public T validationProviderResolver(String validationProviderResolver) {
            this.properties.put("validationProviderResolver", validationProviderResolver);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint producers for the Bean Validator component.
     */
    public static class BeanValidatorProducerBuilder
            extends
                BeanValidatorCommonBuilder<BeanValidatorProducerBuilder>
            implements
                EndpointProducerBuilder {
        public BeanValidatorProducerBuilder(String path) {
            super(path);
        }
    }
    /**
     * The Validator component performs bean validation of the message body
     * using the Java Bean Validation API. Creates a builder to build a producer
     * endpoint for the Bean Validator component.
     */
    public default BeanValidatorProducerBuilder toBeanValidator(String path) {
        return new BeanValidatorProducerBuilder(path);
    }
}