/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;

/**
 * The DigitalOcean component allows you to manage Droplets and resources within
 * the DigitalOcean cloud.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class DigitalOceanEndpoint {


    public static class DigitalOceanCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private DigitalOceanOperations operation;
        private Integer page;
        private Integer perPage;
        private DigitalOceanResources resource;
        private Boolean basicPropertyBinding;
        private Object digitalOceanClient;
        private Boolean synchronous;
        private String httpProxyHost;
        private String httpProxyPassword;
        private Integer httpProxyPort;
        private String httpProxyUser;
        private String oAuthToken;

        /**
         * The operation to perform to the given resource. The option is a
         * org.apache.camel.component.digitalocean.constants.DigitalOceanOperations type.
         */
        public T operation(DigitalOceanOperations operation) {
            this.operation = operation;
            return (T) this;
        }

        /**
         * Use for pagination. Force the page number. The option is a
         * java.lang.Integer type.
         */
        public T page(Integer page) {
            this.page = page;
            return (T) this;
        }

        /**
         * Use for pagination. Set the number of item per request. The maximum
         * number of results per page is 200. The option is a java.lang.Integer
         * type.
         */
        public T perPage(Integer perPage) {
            this.perPage = perPage;
            return (T) this;
        }

        /**
         * The DigitalOcean resource type on which perform the operation. The
         * option is a
         * org.apache.camel.component.digitalocean.constants.DigitalOceanResources type.
         */
        public T resource(DigitalOceanResources resource) {
            this.resource = resource;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * To use a existing configured DigitalOceanClient as client. The option
         * is a com.myjeeva.digitalocean.impl.DigitalOceanClient type.
         */
        public T digitalOceanClient(Object digitalOceanClient) {
            this.digitalOceanClient = digitalOceanClient;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        /**
         * Set a proxy host if needed. The option is a java.lang.String type.
         */
        public T httpProxyHost(String httpProxyHost) {
            this.httpProxyHost = httpProxyHost;
            return (T) this;
        }

        /**
         * Set a proxy password if needed. The option is a java.lang.String
         * type.
         */
        public T httpProxyPassword(String httpProxyPassword) {
            this.httpProxyPassword = httpProxyPassword;
            return (T) this;
        }

        /**
         * Set a proxy port if needed. The option is a java.lang.Integer type.
         */
        public T httpProxyPort(Integer httpProxyPort) {
            this.httpProxyPort = httpProxyPort;
            return (T) this;
        }

        /**
         * Set a proxy host if needed. The option is a java.lang.String type.
         */
        public T httpProxyUser(String httpProxyUser) {
            this.httpProxyUser = httpProxyUser;
            return (T) this;
        }

        /**
         * DigitalOcean OAuth Token. The option is a java.lang.String type.
         */
        public T oAuthToken(String oAuthToken) {
            this.oAuthToken = oAuthToken;
            return (T) this;
        }

        public DigitalOceanOperations getOperation() {
            return operation;
        }

        public void setOperation(DigitalOceanOperations operation) {
            this.operation = operation;
        }

        public Integer getPage() {
            return page;
        }

        public void setPage(Integer page) {
            this.page = page;
        }

        public Integer getPerPage() {
            return perPage;
        }

        public void setPerPage(Integer perPage) {
            this.perPage = perPage;
        }

        public DigitalOceanResources getResource() {
            return resource;
        }

        public void setResource(DigitalOceanResources resource) {
            this.resource = resource;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Object getDigitalOceanClient() {
            return digitalOceanClient;
        }

        public void setDigitalOceanClient(Object digitalOceanClient) {
            this.digitalOceanClient = digitalOceanClient;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public String getHttpProxyHost() {
            return httpProxyHost;
        }

        public void setHttpProxyHost(String httpProxyHost) {
            this.httpProxyHost = httpProxyHost;
        }

        public String getHttpProxyPassword() {
            return httpProxyPassword;
        }

        public void setHttpProxyPassword(String httpProxyPassword) {
            this.httpProxyPassword = httpProxyPassword;
        }

        public Integer getHttpProxyPort() {
            return httpProxyPort;
        }

        public void setHttpProxyPort(Integer httpProxyPort) {
            this.httpProxyPort = httpProxyPort;
        }

        public String getHttpProxyUser() {
            return httpProxyUser;
        }

        public void setHttpProxyUser(String httpProxyUser) {
            this.httpProxyUser = httpProxyUser;
        }

        public String getOAuthToken() {
            return oAuthToken;
        }

        public void setOAuthToken(String oAuthToken) {
            this.oAuthToken = oAuthToken;
        }
    }

    public static class DigitalOceanConsumer
            extends
                DigitalOceanCommon<DigitalOceanConsumer> {
    }

    public static class DigitalOceanProducer
            extends
                DigitalOceanCommon<DigitalOceanProducer> {
    }

    public static enum DigitalOceanOperations {
        create, update, delete, list, ownList, get, listBackups, listActions, listNeighbors, listSnapshots, listKernels, listAllNeighbors, enableBackups, disableBackups, reboot, powerCycle, shutdown, powerOn, powerOff, restore, resetPassword, resize, rebuild, rename, changeKernel, enableIpv6, enablePrivateNetworking, takeSnapshot, transfer, convert, attach, detach, assign, unassign, tag, untag;
    }

    public static enum DigitalOceanResources {
        account, actions, blockStorages, droplets, mages, snapshots, keys, regions, sizes, floatingIPs, tags;
    }
}