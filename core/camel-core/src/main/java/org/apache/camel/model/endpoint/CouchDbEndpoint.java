/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The couchdb component is used for integrate with CouchDB databases.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class CouchDbEndpoint {


    public static class CouchDbCommon extends EndpointConfiguration {
        /**
         * The protocol to use for communicating with the database. The option
         * is a java.lang.String type.
         */
        private String protocol;
        /**
         * Hostname of the running couchdb instance. The option is a
         * java.lang.String type.
         */
        private String hostname;
        /**
         * Port number for the running couchdb instance. The option is a int
         * type.
         */
        private int port;
        /**
         * Name of the database to use. The option is a java.lang.String type.
         */
        private String database;
        /**
         * Creates the database if it does not already exist. The option is a
         * boolean type.
         */
        private boolean createDatabase;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * Password for authenticated databases. The option is a
         * java.lang.String type.
         */
        private String password;
        /**
         * Username in case of authenticated databases. The option is a
         * java.lang.String type.
         */
        private String username;

        public String getProtocol() {
            return protocol;
        }

        public void setProtocol(String protocol) {
            this.protocol = protocol;
        }

        public String getHostname() {
            return hostname;
        }

        public void setHostname(String hostname) {
            this.hostname = hostname;
        }

        public int getPort() {
            return port;
        }

        public void setPort(int port) {
            this.port = port;
        }

        public String getDatabase() {
            return database;
        }

        public void setDatabase(String database) {
            this.database = database;
        }

        public boolean getCreateDatabase() {
            return createDatabase;
        }

        public void setCreateDatabase(boolean createDatabase) {
            this.createDatabase = createDatabase;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }
    }

    public static class CouchDbConsumer extends CouchDbCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * Document deletes are published as events. The option is a boolean
         * type.
         */
        private boolean deletes;
        /**
         * How often to send an empty message to keep socket alive in millis.
         * The option is a long type.
         */
        private long heartbeat;
        /**
         * Start tracking changes immediately after the given update sequence.
         * The default, null, will start monitoring from the latest sequence.
         * The option is a java.lang.String type.
         */
        private String since;
        /**
         * Specifies how many revisions are returned in the changes array. The
         * default, main_only, will only return the current winning revision;
         * all_docs will return all leaf revisions (including conflicts and
         * deleted former conflicts.). The option is a java.lang.String type.
         */
        private String style;
        /**
         * Document inserts/updates are published as events. The option is a
         * boolean type.
         */
        private boolean updates;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public boolean getDeletes() {
            return deletes;
        }

        public void setDeletes(boolean deletes) {
            this.deletes = deletes;
        }

        public long getHeartbeat() {
            return heartbeat;
        }

        public void setHeartbeat(long heartbeat) {
            this.heartbeat = heartbeat;
        }

        public String getSince() {
            return since;
        }

        public void setSince(String since) {
            this.since = since;
        }

        public String getStyle() {
            return style;
        }

        public void setStyle(String style) {
            this.style = style;
        }

        public boolean getUpdates() {
            return updates;
        }

        public void setUpdates(boolean updates) {
            this.updates = updates;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class CouchDbProducer extends CouchDbCommon {
    }
}