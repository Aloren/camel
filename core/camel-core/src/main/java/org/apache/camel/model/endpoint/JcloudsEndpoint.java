/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * For interacting with cloud compute & blobstore service via jclouds.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class JcloudsEndpoint {


    public static class JcloudsCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private JcloudsCommand command;
        private String providerId;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;
        private String container;

        /**
         * What command to execute such as blobstore or compute. The option is a
         * org.apache.camel.component.jclouds.JcloudsCommand type.
         */
        public T command(JcloudsCommand command) {
            this.command = command;
            return (T) this;
        }

        /**
         * The name of the cloud provider that provides the target service (e.g.
         * aws-s3 or aws_ec2). The option is a java.lang.String type.
         */
        public T providerId(String providerId) {
            this.providerId = providerId;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        /**
         * The name of the blob container. The option is a java.lang.String
         * type.
         */
        public T container(String container) {
            this.container = container;
            return (T) this;
        }

        public JcloudsCommand getCommand() {
            return command;
        }

        public void setCommand(JcloudsCommand command) {
            this.command = command;
        }

        public String getProviderId() {
            return providerId;
        }

        public void setProviderId(String providerId) {
            this.providerId = providerId;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public String getContainer() {
            return container;
        }

        public void setContainer(String container) {
            this.container = container;
        }
    }

    public static class JcloudsConsumer
            extends
                JcloudsCommon<JcloudsConsumer> {
        private Boolean bridgeErrorHandler;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;
        private String directory;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public JcloudsConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (JcloudsConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public JcloudsConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (JcloudsConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public JcloudsConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (JcloudsConsumer) this;
        }

        /**
         * An optional directory name to use. The option is a java.lang.String
         * type.
         */
        public JcloudsConsumer directory(String directory) {
            this.directory = directory;
            return (JcloudsConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }

        public String getDirectory() {
            return directory;
        }

        public void setDirectory(String directory) {
            this.directory = directory;
        }
    }

    public static class JcloudsProducer
            extends
                JcloudsCommon<JcloudsProducer> {
        private String blobName;
        private String group;
        private String hardwareId;
        private String imageId;
        private String locationId;
        private String nodeId;
        private String nodeState;
        private String operation;
        private String user;

        /**
         * The name of the blob. The option is a java.lang.String type.
         */
        public JcloudsProducer blobName(String blobName) {
            this.blobName = blobName;
            return (JcloudsProducer) this;
        }

        /**
         * The group that will be assigned to the newly created node. Values
         * depend on the actual cloud provider. The option is a java.lang.String
         * type.
         */
        public JcloudsProducer group(String group) {
            this.group = group;
            return (JcloudsProducer) this;
        }

        /**
         * The hardware that will be used for creating a node. Values depend on
         * the actual cloud provider. The option is a java.lang.String type.
         */
        public JcloudsProducer hardwareId(String hardwareId) {
            this.hardwareId = hardwareId;
            return (JcloudsProducer) this;
        }

        /**
         * The imageId that will be used for creating a node. Values depend on
         * the actual cloud provider. The option is a java.lang.String type.
         */
        public JcloudsProducer imageId(String imageId) {
            this.imageId = imageId;
            return (JcloudsProducer) this;
        }

        /**
         * The location that will be used for creating a node. Values depend on
         * the actual cloud provider. The option is a java.lang.String type.
         */
        public JcloudsProducer locationId(String locationId) {
            this.locationId = locationId;
            return (JcloudsProducer) this;
        }

        /**
         * The id of the node that will run the script or destroyed. The option
         * is a java.lang.String type.
         */
        public JcloudsProducer nodeId(String nodeId) {
            this.nodeId = nodeId;
            return (JcloudsProducer) this;
        }

        /**
         * To filter by node status to only select running nodes etc. The option
         * is a java.lang.String type.
         */
        public JcloudsProducer nodeState(String nodeState) {
            this.nodeState = nodeState;
            return (JcloudsProducer) this;
        }

        /**
         * Specifies the type of operation that will be performed to the
         * blobstore. The option is a java.lang.String type.
         */
        public JcloudsProducer operation(String operation) {
            this.operation = operation;
            return (JcloudsProducer) this;
        }

        /**
         * The user on the target node that will run the script. The option is a
         * java.lang.String type.
         */
        public JcloudsProducer user(String user) {
            this.user = user;
            return (JcloudsProducer) this;
        }

        public String getBlobName() {
            return blobName;
        }

        public void setBlobName(String blobName) {
            this.blobName = blobName;
        }

        public String getGroup() {
            return group;
        }

        public void setGroup(String group) {
            this.group = group;
        }

        public String getHardwareId() {
            return hardwareId;
        }

        public void setHardwareId(String hardwareId) {
            this.hardwareId = hardwareId;
        }

        public String getImageId() {
            return imageId;
        }

        public void setImageId(String imageId) {
            this.imageId = imageId;
        }

        public String getLocationId() {
            return locationId;
        }

        public void setLocationId(String locationId) {
            this.locationId = locationId;
        }

        public String getNodeId() {
            return nodeId;
        }

        public void setNodeId(String nodeId) {
            this.nodeId = nodeId;
        }

        public String getNodeState() {
            return nodeState;
        }

        public void setNodeState(String nodeState) {
            this.nodeState = nodeState;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }

        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }
    }

    public static enum JcloudsCommand {
        blobstore, compute;
    }
}