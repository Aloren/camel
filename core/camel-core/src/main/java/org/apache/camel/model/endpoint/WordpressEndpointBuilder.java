/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Integrates Camel with Wordpress.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface WordpressEndpointBuilder {


    /**
     * Base class for the Wordpress component builders.
     */
    public static class WordpressCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        WordpressCommonBuilder(String path) {
            super("wordpress", path);
        }
        /**
         * The endpoint operation.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T operation(String operation) {
            this.properties.put("operation", operation);
            return (T) this;
        }
        /**
         * The second part of an endpoint operation. Needed only when endpoint
         * semantic is not enough, like wordpress:post:delete.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T operationDetail(String operationDetail) {
            this.properties.put("operationDetail", operationDetail);
            return (T) this;
        }
        /**
         * The Wordpress REST API version.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T apiVersion(String apiVersion) {
            this.properties.put("apiVersion", apiVersion);
            return (T) this;
        }
        /**
         * The criteria to use with complex searches.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group common
         */
        public T criteria(Map<String, Object> criteria) {
            this.properties.put("criteria", criteria);
            return (T) this;
        }
        /**
         * The criteria to use with complex searches.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group common
         */
        public T criteria(String criteria) {
            this.properties.put("criteria", criteria);
            return (T) this;
        }
        /**
         * Whether to bypass trash and force deletion.
         * The option is a <code>java.lang.Boolean</code> type.
         * @group common
         */
        public T force(Boolean force) {
            this.properties.put("force", force);
            return (T) this;
        }
        /**
         * Whether to bypass trash and force deletion.
         * The option will be converted to a <code>java.lang.Boolean</code>
         * type.
         * @group common
         */
        public T force(String force) {
            this.properties.put("force", force);
            return (T) this;
        }
        /**
         * The entity ID. Should be passed when the operation performed requires
         * a specific entity, e.g. deleting a post.
         * The option is a <code>java.lang.Integer</code> type.
         * @group common
         */
        public T id(Integer id) {
            this.properties.put("id", id);
            return (T) this;
        }
        /**
         * The entity ID. Should be passed when the operation performed requires
         * a specific entity, e.g. deleting a post.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         * @group common
         */
        public T id(String id) {
            this.properties.put("id", id);
            return (T) this;
        }
        /**
         * Password from authorized user.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * Search criteria.
         * The option is a
         * <code>org.apache.camel.component.wordpress.api.model.SearchCriteria</code> type.
         * @group common
         */
        public T searchCriteria(Object searchCriteria) {
            this.properties.put("searchCriteria", searchCriteria);
            return (T) this;
        }
        /**
         * Search criteria.
         * The option will be converted to a
         * <code>org.apache.camel.component.wordpress.api.model.SearchCriteria</code> type.
         * @group common
         */
        public T searchCriteria(String searchCriteria) {
            this.properties.put("searchCriteria", searchCriteria);
            return (T) this;
        }
        /**
         * The Wordpress API URL from your site, e.g.
         * http://myblog.com/wp-json/.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T url(String url) {
            this.properties.put("url", url);
            return (T) this;
        }
        /**
         * Authorized user to perform writing operations.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T user(String user) {
            this.properties.put("user", user);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint consumers for the Wordpress component.
     */
    public static class WordpressConsumerBuilder
            extends
                WordpressCommonBuilder<WordpressConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public WordpressConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public WordpressConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (WordpressConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public WordpressConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (WordpressConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        public WordpressConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (WordpressConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        public WordpressConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (WordpressConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        public WordpressConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (WordpressConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        public WordpressConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (WordpressConsumerBuilder) this;
        }
    }

    /**
     * Builder for endpoint producers for the Wordpress component.
     */
    public static class WordpressProducerBuilder
            extends
                WordpressCommonBuilder<WordpressProducerBuilder>
            implements
                EndpointProducerBuilder {
        public WordpressProducerBuilder(String path) {
            super(path);
        }
    }
    /**
     * Integrates Camel with Wordpress. Creates a builder to build a consumer
     * endpoint for the Wordpress component.
     */
    public default WordpressConsumerBuilder fromWordpress(String path) {
        return new WordpressConsumerBuilder(path);
    }
    /**
     * Integrates Camel with Wordpress. Creates a builder to build a producer
     * endpoint for the Wordpress component.
     */
    public default WordpressProducerBuilder toWordpress(String path) {
        return new WordpressProducerBuilder(path);
    }
}