/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;

/**
 * To send passive checks to Nagios using JSendNSCA.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface NagiosEndpointBuilder {


    /**
     * Base class for the Nagios component builders.
     */
    public static class NagiosCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        NagiosCommonBuilder(String path) {
            super("nagios", path);
        }
        /**
         * This is the address of the Nagios host where checks should be send.
         * The option is a <code>java.lang.String</code> type.
         * @group producer
         */
        public T host(String host) {
            this.properties.put("host", host);
            return (T) this;
        }
        /**
         * The port number of the host.
         * The option is a <code>int</code> type.
         * @group producer
         */
        public T port(int port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * The port number of the host.
         * The option will be converted to a <code>int</code> type.
         * @group producer
         */
        public T port(String port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Connection timeout in millis.
         * The option is a <code>int</code> type.
         * @group producer
         */
        public T connectionTimeout(int connectionTimeout) {
            this.properties.put("connectionTimeout", connectionTimeout);
            return (T) this;
        }
        /**
         * Connection timeout in millis.
         * The option will be converted to a <code>int</code> type.
         * @group producer
         */
        public T connectionTimeout(String connectionTimeout) {
            this.properties.put("connectionTimeout", connectionTimeout);
            return (T) this;
        }
        /**
         * Whether or not to use synchronous when sending a passive check.
         * Setting it to false will allow Camel to continue routing the message
         * and the passive check message will be send asynchronously.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public T sendSync(boolean sendSync) {
            this.properties.put("sendSync", sendSync);
            return (T) this;
        }
        /**
         * Whether or not to use synchronous when sending a passive check.
         * Setting it to false will allow Camel to continue routing the message
         * and the passive check message will be send asynchronously.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public T sendSync(String sendSync) {
            this.properties.put("sendSync", sendSync);
            return (T) this;
        }
        /**
         * Sending timeout in millis.
         * The option is a <code>int</code> type.
         * @group producer
         */
        public T timeout(int timeout) {
            this.properties.put("timeout", timeout);
            return (T) this;
        }
        /**
         * Sending timeout in millis.
         * The option will be converted to a <code>int</code> type.
         * @group producer
         */
        public T timeout(String timeout) {
            this.properties.put("timeout", timeout);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * To specify an encryption method.
         * The option is a
         * <code>com.googlecode.jsendnsca.encryption.Encryption</code> type.
         * @group security
         */
        public T encryption(Encryption encryption) {
            this.properties.put("encryption", encryption);
            return (T) this;
        }
        /**
         * To specify an encryption method.
         * The option will be converted to a
         * <code>com.googlecode.jsendnsca.encryption.Encryption</code> type.
         * @group security
         */
        public T encryption(String encryption) {
            this.properties.put("encryption", encryption);
            return (T) this;
        }
        /**
         * To specify an encryption method.
         * The option is a
         * <code>org.apache.camel.component.nagios.NagiosEncryptionMethod</code>
         * type.
         * @group security
         */
        @Deprecated
        public T encryptionMethod(NagiosEncryptionMethod encryptionMethod) {
            this.properties.put("encryptionMethod", encryptionMethod);
            return (T) this;
        }
        /**
         * To specify an encryption method.
         * The option will be converted to a
         * <code>org.apache.camel.component.nagios.NagiosEncryptionMethod</code>
         * type.
         * @group security
         */
        @Deprecated
        public T encryptionMethod(String encryptionMethod) {
            this.properties.put("encryptionMethod", encryptionMethod);
            return (T) this;
        }
        /**
         * Password to be authenticated when sending checks to Nagios.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint producers for the Nagios component.
     */
    public static class NagiosProducerBuilder
            extends
                NagiosCommonBuilder<NagiosProducerBuilder>
            implements
                EndpointProducerBuilder {
        public NagiosProducerBuilder(String path) {
            super(path);
        }
    }

    /**
     * Proxy enum for
     * <code>com.googlecode.jsendnsca.encryption.Encryption</code> enum.
     */
    public static enum Encryption {
        NONE, TRIPLE_DES, XOR, RIJNDAEL128, RIJNDAEL192, RIJNDAEL256, BLOWFISH;
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.nagios.NagiosEncryptionMethod</code>
     * enum.
     */
    public static enum NagiosEncryptionMethod {
        No, Xor, TripleDes;
    }
    /**
     * To send passive checks to Nagios using JSendNSCA. Creates a builder to
     * build a producer endpoint for the Nagios component.
     */
    public default NagiosProducerBuilder toNagios(String path) {
        return new NagiosProducerBuilder(path);
    }
}