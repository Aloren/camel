/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * The aws-s3 component is used for storing and retrieving objecct from Amazon
 * S3 Storage Service.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class S3Endpoint {


    public static class S3Common extends EndpointConfiguration {
        /**
         * Bucket name or ARN. The option is a java.lang.String type.
         */
        private String bucketNameOrArn;
        /**
         * Reference to a com.amazonaws.services.s3.AmazonS3 in the
         * link:registry.htmlRegistry. The option is a
         * com.amazonaws.services.s3.AmazonS3 type.
         */
        private Object amazonS3Client;
        /**
         * Setting the autocreation of the bucket. The option is a boolean type.
         */
        private boolean autoCreateBucket;
        /**
         * Whether or not the S3 client should use path style access. The option
         * is a boolean type.
         */
        private boolean pathStyleAccess;
        /**
         * The policy for this queue to set in the
         * com.amazonaws.services.s3.AmazonS3#setBucketPolicy() method. The
         * option is a java.lang.String type.
         */
        private String policy;
        /**
         * To define a proxy host when instantiating the SQS client. The option
         * is a java.lang.String type.
         */
        private String proxyHost;
        /**
         * Specify a proxy port to be used inside the client definition. The
         * option is a java.lang.Integer type.
         */
        private Integer proxyPort;
        /**
         * The region in which S3 client needs to work. The option is a
         * java.lang.String type.
         */
        private String region;
        /**
         * Set whether the S3 client should expect to load credentials on an EC2
         * instance or to expect static credentials to be passed in. The option
         * is a boolean type.
         */
        private boolean useIAMCredentials;
        /**
         * The encryption materials to use in case of Symmetric/Asymmetric
         * client usage. The option is a
         * com.amazonaws.services.s3.model.EncryptionMaterials type.
         */
        private Object encryptionMaterials;
        /**
         * Define if encryption must be used or not. The option is a boolean
         * type.
         */
        private boolean useEncryption;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * Define if Accelerate Mode enabled is true or false. The option is a
         * boolean type.
         */
        private boolean accelerateModeEnabled;
        /**
         * Define if disabled Chunked Encoding is true or false. The option is a
         * boolean type.
         */
        private boolean chunkedEncodingDisabled;
        /**
         * Define if Dualstack enabled is true or false. The option is a boolean
         * type.
         */
        private boolean dualstackEnabled;
        /**
         * Define if Force Global Bucket Access enabled is true or false. The
         * option is a boolean type.
         */
        private boolean forceGlobalBucketAccessEnabled;
        /**
         * Define if Payload Signing enabled is true or false. The option is a
         * boolean type.
         */
        private boolean payloadSigningEnabled;
        /**
         * Amazon AWS Access Key. The option is a java.lang.String type.
         */
        private String accessKey;
        /**
         * Amazon AWS Secret Key. The option is a java.lang.String type.
         */
        private String secretKey;

        public String getBucketNameOrArn() {
            return bucketNameOrArn;
        }

        public void setBucketNameOrArn(String bucketNameOrArn) {
            this.bucketNameOrArn = bucketNameOrArn;
        }

        public Object getAmazonS3Client() {
            return amazonS3Client;
        }

        public void setAmazonS3Client(Object amazonS3Client) {
            this.amazonS3Client = amazonS3Client;
        }

        public boolean getAutoCreateBucket() {
            return autoCreateBucket;
        }

        public void setAutoCreateBucket(boolean autoCreateBucket) {
            this.autoCreateBucket = autoCreateBucket;
        }

        public boolean getPathStyleAccess() {
            return pathStyleAccess;
        }

        public void setPathStyleAccess(boolean pathStyleAccess) {
            this.pathStyleAccess = pathStyleAccess;
        }

        public String getPolicy() {
            return policy;
        }

        public void setPolicy(String policy) {
            this.policy = policy;
        }

        public String getProxyHost() {
            return proxyHost;
        }

        public void setProxyHost(String proxyHost) {
            this.proxyHost = proxyHost;
        }

        public Integer getProxyPort() {
            return proxyPort;
        }

        public void setProxyPort(Integer proxyPort) {
            this.proxyPort = proxyPort;
        }

        public String getRegion() {
            return region;
        }

        public void setRegion(String region) {
            this.region = region;
        }

        public boolean getUseIAMCredentials() {
            return useIAMCredentials;
        }

        public void setUseIAMCredentials(boolean useIAMCredentials) {
            this.useIAMCredentials = useIAMCredentials;
        }

        public Object getEncryptionMaterials() {
            return encryptionMaterials;
        }

        public void setEncryptionMaterials(Object encryptionMaterials) {
            this.encryptionMaterials = encryptionMaterials;
        }

        public boolean getUseEncryption() {
            return useEncryption;
        }

        public void setUseEncryption(boolean useEncryption) {
            this.useEncryption = useEncryption;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public boolean getAccelerateModeEnabled() {
            return accelerateModeEnabled;
        }

        public void setAccelerateModeEnabled(boolean accelerateModeEnabled) {
            this.accelerateModeEnabled = accelerateModeEnabled;
        }

        public boolean getChunkedEncodingDisabled() {
            return chunkedEncodingDisabled;
        }

        public void setChunkedEncodingDisabled(boolean chunkedEncodingDisabled) {
            this.chunkedEncodingDisabled = chunkedEncodingDisabled;
        }

        public boolean getDualstackEnabled() {
            return dualstackEnabled;
        }

        public void setDualstackEnabled(boolean dualstackEnabled) {
            this.dualstackEnabled = dualstackEnabled;
        }

        public boolean getForceGlobalBucketAccessEnabled() {
            return forceGlobalBucketAccessEnabled;
        }

        public void setForceGlobalBucketAccessEnabled(
                boolean forceGlobalBucketAccessEnabled) {
            this.forceGlobalBucketAccessEnabled = forceGlobalBucketAccessEnabled;
        }

        public boolean getPayloadSigningEnabled() {
            return payloadSigningEnabled;
        }

        public void setPayloadSigningEnabled(boolean payloadSigningEnabled) {
            this.payloadSigningEnabled = payloadSigningEnabled;
        }

        public String getAccessKey() {
            return accessKey;
        }

        public void setAccessKey(String accessKey) {
            this.accessKey = accessKey;
        }

        public String getSecretKey() {
            return secretKey;
        }

        public void setSecretKey(String secretKey) {
            this.secretKey = secretKey;
        }
    }

    public static class S3Consumer extends S3Common {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * Delete objects from S3 after they have been retrieved. The delete is
         * only performed if the Exchange is committed. If a rollback occurs,
         * the object is not deleted. If this option is false, then the same
         * objects will be retrieve over and over again on the polls. Therefore
         * you need to use the Idempotent Consumer EIP in the route to filter
         * out duplicates. You can filter using the S3Constants#BUCKET_NAME and
         * S3Constants#KEY headers, or only the S3Constants#KEY header. The
         * option is a boolean type.
         */
        private boolean deleteAfterRead;
        /**
         * The delimiter which is used in the
         * com.amazonaws.services.s3.model.ListObjectsRequest to only consume
         * objects we are interested in. The option is a java.lang.String type.
         */
        private String delimiter;
        /**
         * To get the object from the bucket with the given file name. The
         * option is a java.lang.String type.
         */
        private String fileName;
        /**
         * If it is true, the exchange body will be set to a stream to the
         * contents of the file. If false, the headers will be set with the S3
         * object metadata, but the body will be null. This option is strongly
         * related to autocloseBody option. In case of setting includeBody to
         * true and autocloseBody to false, it will be up to the caller to close
         * the S3Object stream. Setting autocloseBody to true, will close the
         * S3Object stream automatically. The option is a boolean type.
         */
        private boolean includeBody;
        /**
         * Set the maxConnections parameter in the S3 client configuration. The
         * option is a int type.
         */
        private int maxConnections;
        /**
         * Gets the maximum number of messages as a limit to poll at each
         * polling. Is default unlimited, but use 0 or negative number to
         * disable it as unlimited. The option is a int type.
         */
        private int maxMessagesPerPoll;
        /**
         * The prefix which is used in the
         * com.amazonaws.services.s3.model.ListObjectsRequest to only consume
         * objects we are interested in. The option is a java.lang.String type.
         */
        private String prefix;
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option is a
         * boolean type.
         */
        private boolean sendEmptyMessageWhenIdle;
        /**
         * If this option is true and includeBody is true, then the
         * S3Object.close() method will be called on exchange completion. This
         * option is strongly related to includeBody option. In case of setting
         * includeBody to true and autocloseBody to false, it will be up to the
         * caller to close the S3Object stream. Setting autocloseBody to true,
         * will close the S3Object stream automatically. The option is a boolean
         * type.
         */
        private boolean autocloseBody;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option is a
         * org.apache.camel.spi.PollingConsumerPollStrategy type.
         */
        private PollingConsumerPollStrategy pollStrategy;
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * is a int type.
         */
        private int backoffErrorThreshold;
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option is a int type.
         */
        private int backoffIdleThreshold;
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option is a int type.
         */
        private int backoffMultiplier;
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        private long delay;
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option is a boolean type.
         */
        private boolean greedy;
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        private long initialDelay;
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * is a org.apache.camel.LoggingLevel type.
         */
        private LoggingLevel runLoggingLevel;
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option is a java.util.concurrent.ScheduledExecutorService
         * type.
         */
        private ScheduledExecutorService scheduledExecutorService;
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option is a
         * org.apache.camel.spi.ScheduledPollConsumerScheduler type.
         */
        private ScheduledPollConsumerScheduler scheduler;
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        private Map<String, Object> schedulerProperties;
        /**
         * Whether the scheduler should be auto started. The option is a boolean
         * type.
         */
        private boolean startScheduler;
        /**
         * Time unit for initialDelay and delay options. The option is a
         * java.util.concurrent.TimeUnit type.
         */
        private TimeUnit timeUnit;
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option is a boolean
         * type.
         */
        private boolean useFixedDelay;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public boolean getDeleteAfterRead() {
            return deleteAfterRead;
        }

        public void setDeleteAfterRead(boolean deleteAfterRead) {
            this.deleteAfterRead = deleteAfterRead;
        }

        public String getDelimiter() {
            return delimiter;
        }

        public void setDelimiter(String delimiter) {
            this.delimiter = delimiter;
        }

        public String getFileName() {
            return fileName;
        }

        public void setFileName(String fileName) {
            this.fileName = fileName;
        }

        public boolean getIncludeBody() {
            return includeBody;
        }

        public void setIncludeBody(boolean includeBody) {
            this.includeBody = includeBody;
        }

        public int getMaxConnections() {
            return maxConnections;
        }

        public void setMaxConnections(int maxConnections) {
            this.maxConnections = maxConnections;
        }

        public int getMaxMessagesPerPoll() {
            return maxMessagesPerPoll;
        }

        public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {
            this.maxMessagesPerPoll = maxMessagesPerPoll;
        }

        public String getPrefix() {
            return prefix;
        }

        public void setPrefix(String prefix) {
            this.prefix = prefix;
        }

        public boolean getSendEmptyMessageWhenIdle() {
            return sendEmptyMessageWhenIdle;
        }

        public void setSendEmptyMessageWhenIdle(boolean sendEmptyMessageWhenIdle) {
            this.sendEmptyMessageWhenIdle = sendEmptyMessageWhenIdle;
        }

        public boolean getAutocloseBody() {
            return autocloseBody;
        }

        public void setAutocloseBody(boolean autocloseBody) {
            this.autocloseBody = autocloseBody;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }

        public PollingConsumerPollStrategy getPollStrategy() {
            return pollStrategy;
        }

        public void setPollStrategy(PollingConsumerPollStrategy pollStrategy) {
            this.pollStrategy = pollStrategy;
        }

        public int getBackoffErrorThreshold() {
            return backoffErrorThreshold;
        }

        public void setBackoffErrorThreshold(int backoffErrorThreshold) {
            this.backoffErrorThreshold = backoffErrorThreshold;
        }

        public int getBackoffIdleThreshold() {
            return backoffIdleThreshold;
        }

        public void setBackoffIdleThreshold(int backoffIdleThreshold) {
            this.backoffIdleThreshold = backoffIdleThreshold;
        }

        public int getBackoffMultiplier() {
            return backoffMultiplier;
        }

        public void setBackoffMultiplier(int backoffMultiplier) {
            this.backoffMultiplier = backoffMultiplier;
        }

        public long getDelay() {
            return delay;
        }

        public void setDelay(long delay) {
            this.delay = delay;
        }

        public boolean getGreedy() {
            return greedy;
        }

        public void setGreedy(boolean greedy) {
            this.greedy = greedy;
        }

        public long getInitialDelay() {
            return initialDelay;
        }

        public void setInitialDelay(long initialDelay) {
            this.initialDelay = initialDelay;
        }

        public LoggingLevel getRunLoggingLevel() {
            return runLoggingLevel;
        }

        public void setRunLoggingLevel(LoggingLevel runLoggingLevel) {
            this.runLoggingLevel = runLoggingLevel;
        }

        public ScheduledExecutorService getScheduledExecutorService() {
            return scheduledExecutorService;
        }

        public void setScheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.scheduledExecutorService = scheduledExecutorService;
        }

        public ScheduledPollConsumerScheduler getScheduler() {
            return scheduler;
        }

        public void setScheduler(ScheduledPollConsumerScheduler scheduler) {
            this.scheduler = scheduler;
        }

        public Map<String, Object> getSchedulerProperties() {
            return schedulerProperties;
        }

        public void setSchedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.schedulerProperties = schedulerProperties;
        }

        public boolean getStartScheduler() {
            return startScheduler;
        }

        public void setStartScheduler(boolean startScheduler) {
            this.startScheduler = startScheduler;
        }

        public TimeUnit getTimeUnit() {
            return timeUnit;
        }

        public void setTimeUnit(TimeUnit timeUnit) {
            this.timeUnit = timeUnit;
        }

        public boolean getUseFixedDelay() {
            return useFixedDelay;
        }

        public void setUseFixedDelay(boolean useFixedDelay) {
            this.useFixedDelay = useFixedDelay;
        }
    }

    public static class S3Producer extends S3Common {
        /**
         * Delete file object after the S3 file has been uploaded. The option is
         * a boolean type.
         */
        private boolean deleteAfterWrite;
        /**
         * If it is true, camel will upload the file with multi part format, the
         * part size is decided by the option of partSize. The option is a
         * boolean type.
         */
        private boolean multiPartUpload;
        /**
         * The operation to do in case the user don't want to do only an upload.
         * The option is a org.apache.camel.component.aws.s3.S3Operations type.
         */
        private S3Operations operation;
        /**
         * Setup the partSize which is used in multi part upload, the default
         * size is 25M. The option is a long type.
         */
        private long partSize;
        /**
         * Sets the server-side encryption algorithm when encrypting the object
         * using AWS-managed keys. For example use AES256. The option is a
         * java.lang.String type.
         */
        private String serverSideEncryption;
        /**
         * The storage class to set in the
         * com.amazonaws.services.s3.model.PutObjectRequest request. The option
         * is a java.lang.String type.
         */
        private String storageClass;
        /**
         * Define the id of KMS key to use in case KMS is enabled. The option is
         * a java.lang.String type.
         */
        private String awsKMSKeyId;
        /**
         * Define if KMS must be used or not. The option is a boolean type.
         */
        private boolean useAwsKMS;

        public boolean getDeleteAfterWrite() {
            return deleteAfterWrite;
        }

        public void setDeleteAfterWrite(boolean deleteAfterWrite) {
            this.deleteAfterWrite = deleteAfterWrite;
        }

        public boolean getMultiPartUpload() {
            return multiPartUpload;
        }

        public void setMultiPartUpload(boolean multiPartUpload) {
            this.multiPartUpload = multiPartUpload;
        }

        public S3Operations getOperation() {
            return operation;
        }

        public void setOperation(S3Operations operation) {
            this.operation = operation;
        }

        public long getPartSize() {
            return partSize;
        }

        public void setPartSize(long partSize) {
            this.partSize = partSize;
        }

        public String getServerSideEncryption() {
            return serverSideEncryption;
        }

        public void setServerSideEncryption(String serverSideEncryption) {
            this.serverSideEncryption = serverSideEncryption;
        }

        public String getStorageClass() {
            return storageClass;
        }

        public void setStorageClass(String storageClass) {
            this.storageClass = storageClass;
        }

        public String getAwsKMSKeyId() {
            return awsKMSKeyId;
        }

        public void setAwsKMSKeyId(String awsKMSKeyId) {
            this.awsKMSKeyId = awsKMSKeyId;
        }

        public boolean getUseAwsKMS() {
            return useAwsKMS;
        }

        public void setUseAwsKMS(boolean useAwsKMS) {
            this.useAwsKMS = useAwsKMS;
        }
    }

    public static enum S3Operations {
        copyObject, deleteBucket, listBuckets, downloadLink;
    }
}