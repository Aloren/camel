/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The nats component allows you produce and consume messages from NATS.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class NatsEndpoint {


    public static class NatsCommon extends EndpointConfiguration {
        /**
         * URLs to one or more NAT servers. Use comma to separate URLs when
         * specifying multiple servers. The option is a java.lang.String type.
         */
        private String servers;
        /**
         * Reference an already instantiated connection to Nats server. The
         * option is a io.nats.client.Connection type.
         */
        private Object connection;
        /**
         * Timeout for connection attempts. (in milliseconds). The option is a
         * int type.
         */
        private int connectionTimeout;
        /**
         * Define if we want to flush connection or not. The option is a boolean
         * type.
         */
        private boolean flushConnection;
        /**
         * Set the flush timeout (in milliseconds). The option is a int type.
         */
        private int flushTimeout;
        /**
         * maximum number of pings have not received a response allowed by the
         * client. The option is a int type.
         */
        private int maxPingsOut;
        /**
         * Max reconnection attempts. The option is a int type.
         */
        private int maxReconnectAttempts;
        /**
         * Turn off echo. If supported by the gnatsd version you are connecting
         * to this flag will prevent the server from echoing messages back to
         * the connection if it has subscriptions on the subject being published
         * to. The option is a boolean type.
         */
        private boolean noEcho;
        /**
         * Whether or not randomizing the order of servers for the connection
         * attempts. The option is a boolean type.
         */
        private boolean noRandomizeServers;
        /**
         * Whether or not running in pedantic mode (this affects performace).
         * The option is a boolean type.
         */
        private boolean pedantic;
        /**
         * Ping interval to be aware if connection is still alive (in
         * milliseconds). The option is a int type.
         */
        private int pingInterval;
        /**
         * Whether or not using reconnection feature. The option is a boolean
         * type.
         */
        private boolean reconnect;
        /**
         * Waiting time before attempts reconnection (in milliseconds). The
         * option is a int type.
         */
        private int reconnectTimeWait;
        /**
         * Interval to clean up cancelled/timed out requests. The option is a
         * int type.
         */
        private int requestCleanupInterval;
        /**
         * The name of topic we want to use. The option is a java.lang.String
         * type.
         */
        private String topic;
        /**
         * Whether or not running in verbose mode. The option is a boolean type.
         */
        private boolean verbose;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * Set secure option indicating TLS is required. The option is a boolean
         * type.
         */
        private boolean secure;
        /**
         * To configure security using SSLContextParameters. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        private Object sslContextParameters;

        public String getServers() {
            return servers;
        }

        public void setServers(String servers) {
            this.servers = servers;
        }

        public Object getConnection() {
            return connection;
        }

        public void setConnection(Object connection) {
            this.connection = connection;
        }

        public int getConnectionTimeout() {
            return connectionTimeout;
        }

        public void setConnectionTimeout(int connectionTimeout) {
            this.connectionTimeout = connectionTimeout;
        }

        public boolean getFlushConnection() {
            return flushConnection;
        }

        public void setFlushConnection(boolean flushConnection) {
            this.flushConnection = flushConnection;
        }

        public int getFlushTimeout() {
            return flushTimeout;
        }

        public void setFlushTimeout(int flushTimeout) {
            this.flushTimeout = flushTimeout;
        }

        public int getMaxPingsOut() {
            return maxPingsOut;
        }

        public void setMaxPingsOut(int maxPingsOut) {
            this.maxPingsOut = maxPingsOut;
        }

        public int getMaxReconnectAttempts() {
            return maxReconnectAttempts;
        }

        public void setMaxReconnectAttempts(int maxReconnectAttempts) {
            this.maxReconnectAttempts = maxReconnectAttempts;
        }

        public boolean getNoEcho() {
            return noEcho;
        }

        public void setNoEcho(boolean noEcho) {
            this.noEcho = noEcho;
        }

        public boolean getNoRandomizeServers() {
            return noRandomizeServers;
        }

        public void setNoRandomizeServers(boolean noRandomizeServers) {
            this.noRandomizeServers = noRandomizeServers;
        }

        public boolean getPedantic() {
            return pedantic;
        }

        public void setPedantic(boolean pedantic) {
            this.pedantic = pedantic;
        }

        public int getPingInterval() {
            return pingInterval;
        }

        public void setPingInterval(int pingInterval) {
            this.pingInterval = pingInterval;
        }

        public boolean getReconnect() {
            return reconnect;
        }

        public void setReconnect(boolean reconnect) {
            this.reconnect = reconnect;
        }

        public int getReconnectTimeWait() {
            return reconnectTimeWait;
        }

        public void setReconnectTimeWait(int reconnectTimeWait) {
            this.reconnectTimeWait = reconnectTimeWait;
        }

        public int getRequestCleanupInterval() {
            return requestCleanupInterval;
        }

        public void setRequestCleanupInterval(int requestCleanupInterval) {
            this.requestCleanupInterval = requestCleanupInterval;
        }

        public String getTopic() {
            return topic;
        }

        public void setTopic(String topic) {
            this.topic = topic;
        }

        public boolean getVerbose() {
            return verbose;
        }

        public void setVerbose(boolean verbose) {
            this.verbose = verbose;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public boolean getSecure() {
            return secure;
        }

        public void setSecure(boolean secure) {
            this.secure = secure;
        }

        public Object getSslContextParameters() {
            return sslContextParameters;
        }

        public void setSslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
        }
    }

    public static class NatsConsumer extends NatsCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * Stop receiving messages from a topic we are subscribing to after
         * maxMessages. The option is a java.lang.String type.
         */
        private String maxMessages;
        /**
         * Consumer pool size. The option is a int type.
         */
        private int poolSize;
        /**
         * The Queue name if we are using nats for a queue configuration. The
         * option is a java.lang.String type.
         */
        private String queueName;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public String getMaxMessages() {
            return maxMessages;
        }

        public void setMaxMessages(String maxMessages) {
            this.maxMessages = maxMessages;
        }

        public int getPoolSize() {
            return poolSize;
        }

        public void setPoolSize(int poolSize) {
            this.poolSize = poolSize;
        }

        public String getQueueName() {
            return queueName;
        }

        public void setQueueName(String queueName) {
            this.queueName = queueName;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class NatsProducer extends NatsCommon {
        /**
         * the subject to which subscribers should send response. The option is
         * a java.lang.String type.
         */
        private String replySubject;

        public String getReplySubject() {
            return replySubject;
        }

        public void setReplySubject(String replySubject) {
            this.replySubject = replySubject;
        }
    }
}