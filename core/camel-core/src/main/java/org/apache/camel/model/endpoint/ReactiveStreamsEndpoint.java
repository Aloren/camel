/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Reactive Camel using reactive streams
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class ReactiveStreamsEndpoint {


    public static class ReactiveStreamsCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String stream;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;

        /**
         * Name of the stream channel used by the endpoint to exchange messages.
         * The option is a java.lang.String type.
         */
        public T stream(String stream) {
            this.stream = stream;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public String getStream() {
            return stream;
        }

        public void setStream(String stream) {
            this.stream = stream;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class ReactiveStreamsConsumer
            extends
                ReactiveStreamsCommon<ReactiveStreamsConsumer> {
        private Boolean bridgeErrorHandler;
        private Integer concurrentConsumers;
        private Double exchangesRefillLowWatermark;
        private Boolean forwardOnComplete;
        private Boolean forwardOnError;
        private Integer maxInflightExchanges;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public ReactiveStreamsConsumer bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (ReactiveStreamsConsumer) this;
        }

        /**
         * Number of threads used to process exchanges in the Camel route. The
         * option is a int type.
         */
        public ReactiveStreamsConsumer concurrentConsumers(
                int concurrentConsumers) {
            this.concurrentConsumers = concurrentConsumers;
            return (ReactiveStreamsConsumer) this;
        }

        /**
         * Set the low watermark of requested exchanges to the active
         * subscription as percentage of the maxInflightExchanges. When the
         * number of pending items from the upstream source is lower than the
         * watermark, new items can be requested to the subscription. If set to
         * 0, the subscriber will request items in batches of
         * maxInflightExchanges, only after all items of the previous batch have
         * been processed. If set to 1, the subscriber can request a new item
         * each time an exchange is processed (chatty). Any intermediate value
         * can be used. The option is a double type.
         */
        public ReactiveStreamsConsumer exchangesRefillLowWatermark(
                double exchangesRefillLowWatermark) {
            this.exchangesRefillLowWatermark = exchangesRefillLowWatermark;
            return (ReactiveStreamsConsumer) this;
        }

        /**
         * Determines if onComplete events should be pushed to the Camel route.
         * The option is a boolean type.
         */
        public ReactiveStreamsConsumer forwardOnComplete(
                boolean forwardOnComplete) {
            this.forwardOnComplete = forwardOnComplete;
            return (ReactiveStreamsConsumer) this;
        }

        /**
         * Determines if onError events should be pushed to the Camel route.
         * Exceptions will be set as message body. The option is a boolean type.
         */
        public ReactiveStreamsConsumer forwardOnError(boolean forwardOnError) {
            this.forwardOnError = forwardOnError;
            return (ReactiveStreamsConsumer) this;
        }

        /**
         * Maximum number of exchanges concurrently being processed by Camel.
         * This parameter controls backpressure on the stream. Setting a
         * non-positive value will disable backpressure. The option is a
         * java.lang.Integer type.
         */
        public ReactiveStreamsConsumer maxInflightExchanges(
                Integer maxInflightExchanges) {
            this.maxInflightExchanges = maxInflightExchanges;
            return (ReactiveStreamsConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public ReactiveStreamsConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (ReactiveStreamsConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public ReactiveStreamsConsumer exchangePattern(
                ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (ReactiveStreamsConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public Integer getConcurrentConsumers() {
            return concurrentConsumers;
        }

        public void setConcurrentConsumers(Integer concurrentConsumers) {
            this.concurrentConsumers = concurrentConsumers;
        }

        public Double getExchangesRefillLowWatermark() {
            return exchangesRefillLowWatermark;
        }

        public void setExchangesRefillLowWatermark(
                Double exchangesRefillLowWatermark) {
            this.exchangesRefillLowWatermark = exchangesRefillLowWatermark;
        }

        public Boolean getForwardOnComplete() {
            return forwardOnComplete;
        }

        public void setForwardOnComplete(Boolean forwardOnComplete) {
            this.forwardOnComplete = forwardOnComplete;
        }

        public Boolean getForwardOnError() {
            return forwardOnError;
        }

        public void setForwardOnError(Boolean forwardOnError) {
            this.forwardOnError = forwardOnError;
        }

        public Integer getMaxInflightExchanges() {
            return maxInflightExchanges;
        }

        public void setMaxInflightExchanges(Integer maxInflightExchanges) {
            this.maxInflightExchanges = maxInflightExchanges;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class ReactiveStreamsProducer
            extends
                ReactiveStreamsCommon<ReactiveStreamsProducer> {
        private ReactiveStreamsBackpressureStrategy backpressureStrategy;

        /**
         * The backpressure strategy to use when pushing events to a slow
         * subscriber. The option is a
         * org.apache.camel.component.reactive.streams.ReactiveStreamsBackpressureStrategy type.
         */
        public ReactiveStreamsProducer backpressureStrategy(
                ReactiveStreamsBackpressureStrategy backpressureStrategy) {
            this.backpressureStrategy = backpressureStrategy;
            return (ReactiveStreamsProducer) this;
        }

        public ReactiveStreamsBackpressureStrategy getBackpressureStrategy() {
            return backpressureStrategy;
        }

        public void setBackpressureStrategy(
                ReactiveStreamsBackpressureStrategy backpressureStrategy) {
            this.backpressureStrategy = backpressureStrategy;
        }
    }

    public static enum ReactiveStreamsBackpressureStrategy {
        BUFFER, OLDEST, LATEST;
    }
}