/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The jira component interacts with the JIRA issue tracker.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface JiraEndpointBuilder {


    public static class JiraCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        JiraCommonBuilder(String path) {
            super("jira", path);
        }
        /**
         * Operation to perform. Consumers: NewIssues, NewComments. Producers:
         * AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue,
         * Watchers. See this class javadoc description for more information.
         * The option is a <code>org.apache.camel.component.jira.JiraType</code>
         * type.
         */
        public T type(JiraType type) {
            this.properties.put("type", type);
            return (T) this;
        }
        /**
         * Operation to perform. Consumers: NewIssues, NewComments. Producers:
         * AddIssue, AttachFile, DeleteIssue, TransitionIssue, UpdateIssue,
         * Watchers. See this class javadoc description for more information.
         * The option will be converted to a
         * <code>org.apache.camel.component.jira.JiraType</code> type.
         */
        public T type(String type) {
            this.properties.put("type", type);
            return (T) this;
        }
        /**
         * Time in milliseconds to elapse for the next poll. The option is a
         * <code>java.lang.Integer</code> type.
         */
        public T delay(Integer delay) {
            this.properties.put("delay", delay);
            return (T) this;
        }
        /**
         * Time in milliseconds to elapse for the next poll. The option will be
         * converted to a <code>java.lang.Integer</code> type.
         */
        public T delay(String delay) {
            this.properties.put("delay", delay);
            return (T) this;
        }
        /**
         * The Jira server url, example: http://my_jira.com:8081. The option is
         * a <code>java.lang.String</code> type.
         */
        public T jiraUrl(String jiraUrl) {
            this.properties.put("jiraUrl", jiraUrl);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * (OAuth only) The access token generated by the Jira server. The
         * option is a <code>java.lang.String</code> type.
         */
        public T accessToken(String accessToken) {
            this.properties.put("accessToken", accessToken);
            return (T) this;
        }
        /**
         * (OAuth only) The consumer key from Jira settings. The option is a
         * <code>java.lang.String</code> type.
         */
        public T consumerKey(String consumerKey) {
            this.properties.put("consumerKey", consumerKey);
            return (T) this;
        }
        /**
         * (Basic authentication only) The password to authenticate to the Jira
         * server. Use only if username basic authentication is used. The option
         * is a <code>java.lang.String</code> type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * (OAuth only) The private key generated by the client to encrypt the
         * conversation to the server. The option is a
         * <code>java.lang.String</code> type.
         */
        public T privateKey(String privateKey) {
            this.properties.put("privateKey", privateKey);
            return (T) this;
        }
        /**
         * (Basic authentication only) The username to authenticate to the Jira
         * server. Use only if OAuth is not enabled on the Jira server. Do not
         * set the username and OAuth token parameter, if they are both set, the
         * username basic authentication takes precedence. The option is a
         * <code>java.lang.String</code> type.
         */
        public T username(String username) {
            this.properties.put("username", username);
            return (T) this;
        }
        /**
         * (OAuth only) The verification code from Jira generated in the first
         * step of the authorization proccess. The option is a
         * <code>java.lang.String</code> type.
         */
        public T verificationCode(String verificationCode) {
            this.properties.put("verificationCode", verificationCode);
            return (T) this;
        }
    }

    public static class JiraConsumerBuilder
            extends
                JiraCommonBuilder<JiraConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public JiraConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public JiraConsumerBuilder bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (JiraConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public JiraConsumerBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (JiraConsumerBuilder) this;
        }
        /**
         * JQL is the query language from JIRA which allows you to retrieve the
         * data you want. For example jql=project=MyProject Where MyProject is
         * the product key in Jira. It is important to use the RAW() and set the
         * JQL inside it to prevent camel parsing it, example: RAW(project in
         * (MYP, COM) AND resolution = Unresolved). The option is a
         * <code>java.lang.String</code> type.
         */
        public JiraConsumerBuilder jql(String jql) {
            this.properties.put("jql", jql);
            return (JiraConsumerBuilder) this;
        }
        /**
         * Max number of issues to search for. The option is a
         * <code>java.lang.Integer</code> type.
         */
        public JiraConsumerBuilder maxResults(Integer maxResults) {
            this.properties.put("maxResults", maxResults);
            return (JiraConsumerBuilder) this;
        }
        /**
         * Max number of issues to search for. The option will be converted to a
         * <code>java.lang.Integer</code> type.
         */
        public JiraConsumerBuilder maxResults(String maxResults) {
            this.properties.put("maxResults", maxResults);
            return (JiraConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public JiraConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (JiraConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public JiraConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (JiraConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public JiraConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (JiraConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public JiraConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (JiraConsumerBuilder) this;
        }
    }

    public static class JiraProducerBuilder
            extends
                JiraCommonBuilder<JiraProducerBuilder>
            implements
                EndpointProducerBuilder {
        public JiraProducerBuilder(String path) {
            super(path);
        }
    }

    public static enum JiraType {
        ADDCOMMENT, ADDISSUE, ATTACH, DELETEISSUE, NEWISSUES, NEWCOMMENTS, UPDATEISSUE, TRANSITIONISSUE, WATCHERS;
    }
    public default JiraConsumerBuilder fromJira(String path) {
        return new JiraConsumerBuilder(path);
    }
    public default JiraProducerBuilder toJira(String path) {
        return new JiraProducerBuilder(path);
    }
}