/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.List;
import javax.annotation.Generated;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;

/**
 * Transforms the message using a XSLT template.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface XsltEndpointBuilder {


    public static class XsltCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        XsltCommonBuilder(String path) {
            super("xslt", path);
        }
        /**
         * Path to the template. The following is supported by the default
         * URIResolver. You can prefix with: classpath, file, http, ref, or
         * bean. classpath, file and http loads the resource using these
         * protocols (classpath is default). ref will lookup the resource in the
         * registry. bean will call a method on a bean to be used as the
         * resource. For bean you can specify the method name after dot, eg
         * bean:myBean.myMethod. The option is a java.lang.String type.
         */
        public T resourceUri(String resourceUri) {
            this.properties.put("resourceUri", resourceUri);
            return (T) this;
        }
        /**
         * Whether to allow using StAX as the javax.xml.transform.Source. The
         * option is a boolean type.
         */
        public T allowStAX(boolean allowStAX) {
            this.properties.put("allowStAX", allowStAX);
            return (T) this;
        }
        /**
         * Cache for the resource content (the stylesheet file) when it is
         * loaded. If set to false Camel will reload the stylesheet file on each
         * message processing. This is good for development. A cached stylesheet
         * can be forced to reload at runtime via JMX using the
         * clearCachedStylesheet operation. The option is a boolean type.
         */
        public T contentCache(boolean contentCache) {
            this.properties.put("contentCache", contentCache);
            return (T) this;
        }
        /**
         * If you have output=file then this option dictates whether or not the
         * output file should be deleted when the Exchange is done processing.
         * For example suppose the output file is a temporary file, then it can
         * be a good idea to delete it after use. The option is a boolean type.
         */
        public T deleteOutputFile(boolean deleteOutputFile) {
            this.properties.put("deleteOutputFile", deleteOutputFile);
            return (T) this;
        }
        /**
         * Whether or not to throw an exception if the input body is null. The
         * option is a boolean type.
         */
        public T failOnNullBody(boolean failOnNullBody) {
            this.properties.put("failOnNullBody", failOnNullBody);
            return (T) this;
        }
        /**
         * Option to specify which output type to use. Possible values are:
         * string, bytes, DOM, file. The first three options are all in memory
         * based, where as file is streamed directly to a java.io.File. For file
         * you must specify the filename in the IN header with the key
         * Exchange.XSLT_FILE_NAME which is also CamelXsltFileName. Also any
         * paths leading to the filename must be created beforehand, otherwise
         * an exception is thrown at runtime. The option is a
         * org.apache.camel.component.xslt.XsltOutput type.
         */
        public T output(XsltOutput output) {
            this.properties.put("output", output);
            return (T) this;
        }
        /**
         * Whether to use Saxon as the transformerFactoryClass. If enabled then
         * the class net.sf.saxon.TransformerFactoryImpl. You would need to add
         * Saxon to the classpath. The option is a boolean type.
         */
        public T saxon(boolean saxon) {
            this.properties.put("saxon", saxon);
            return (T) this;
        }
        /**
         * The number of javax.xml.transform.Transformer object that are cached
         * for reuse to avoid calls to Template.newTransformer(). The option is
         * a int type.
         */
        public T transformerCacheSize(int transformerCacheSize) {
            this.properties.put("transformerCacheSize", transformerCacheSize);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * To use a custom org.xml.sax.EntityResolver with
         * javax.xml.transform.sax.SAXSource. The option is a
         * org.xml.sax.EntityResolver type.
         */
        public T entityResolver(Object entityResolver) {
            this.properties.put("entityResolver", entityResolver);
            return (T) this;
        }
        /**
         * Allows to configure to use a custom
         * javax.xml.transform.ErrorListener. Beware when doing this then the
         * default error listener which captures any errors or fatal errors and
         * store information on the Exchange as properties is not in use. So
         * only use this option for special use-cases. The option is a
         * javax.xml.transform.ErrorListener type.
         */
        public T errorListener(Object errorListener) {
            this.properties.put("errorListener", errorListener);
            return (T) this;
        }
        /**
         * Allows you to use a custom
         * org.apache.camel.builder.xml.ResultHandlerFactory which is capable of
         * using custom org.apache.camel.builder.xml.ResultHandler types. The
         * option is a org.apache.camel.component.xslt.ResultHandlerFactory
         * type.
         */
        public T resultHandlerFactory(Object resultHandlerFactory) {
            this.properties.put("resultHandlerFactory", resultHandlerFactory);
            return (T) this;
        }
        /**
         * To use a custom Saxon configuration. The option is a java.lang.Object
         * type.
         */
        public T saxonConfiguration(Object saxonConfiguration) {
            this.properties.put("saxonConfiguration", saxonConfiguration);
            return (T) this;
        }
        /**
         * Allows you to use a custom
         * net.sf.saxon.lib.ExtensionFunctionDefinition. You would need to add
         * camel-saxon to the classpath. The function is looked up in the
         * registry, where you can comma to separate multiple values to lookup.
         * The option is a java.lang.String type.
         */
        public T saxonExtensionFunctions(List<Object> saxonExtensionFunctions) {
            this.properties.put("saxonExtensionFunctions", saxonExtensionFunctions);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * To use a custom XSLT transformer factory. The option is a
         * javax.xml.transform.TransformerFactory type.
         */
        public T transformerFactory(Object transformerFactory) {
            this.properties.put("transformerFactory", transformerFactory);
            return (T) this;
        }
        /**
         * To use a custom XSLT transformer factory, specified as a FQN class
         * name. The option is a java.lang.String type.
         */
        public T transformerFactoryClass(String transformerFactoryClass) {
            this.properties.put("transformerFactoryClass", transformerFactoryClass);
            return (T) this;
        }
        /**
         * To use a custom javax.xml.transform.URIResolver. The option is a
         * javax.xml.transform.URIResolver type.
         */
        public T uriResolver(Object uriResolver) {
            this.properties.put("uriResolver", uriResolver);
            return (T) this;
        }
    }

    public static class XsltProducerBuilder
            extends
                XsltCommonBuilder<XsltProducerBuilder>
            implements
                EndpointProducerBuilder {
        public XsltProducerBuilder(String path) {
            super(path);
        }
    }

    public static enum XsltOutput {
        string, bytes, DOM, file;
    }
    public default XsltProducerBuilder toXslt(String path) {
        return new XsltProducerBuilder(path);
    }
}