/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URI;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The spring-ws component is used for SOAP WebServices using Spring
 * WebServices.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class SpringWebserviceEndpoint {


    public static class SpringWebserviceCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private Object messageFilter;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;
        private Object sslContextParameters;

        /**
         * Option to provide a custom MessageFilter. For example when you want
         * to process your headers or attachments by your own. The option is a
         * org.apache.camel.component.spring.ws.filter.MessageFilter type.
         */
        public T messageFilter(Object messageFilter) {
            this.messageFilter = messageFilter;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        /**
         * To configure security using SSLContextParameters. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        public T sslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
            return (T) this;
        }

        public Object getMessageFilter() {
            return messageFilter;
        }

        public void setMessageFilter(Object messageFilter) {
            this.messageFilter = messageFilter;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Object getSslContextParameters() {
            return sslContextParameters;
        }

        public void setSslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
        }
    }

    public static class SpringWebserviceConsumer
            extends
                SpringWebserviceCommon<SpringWebserviceConsumer> {
        private EndpointMappingType type;
        private String lookupKey;
        private Boolean bridgeErrorHandler;
        private Object endpointDispatcher;
        private Object endpointMapping;
        private String expression;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Endpoint mapping type if endpoint mapping is used. rootqname - Offers
         * the option to map web service requests based on the qualified name of
         * the root element contained in the message. soapaction - Used to map
         * web service requests based on the SOAP action specified in the header
         * of the message. uri - In order to map web service requests that
         * target a specific URI. xpathresult - Used to map web service requests
         * based on the evaluation of an XPath expression against the incoming
         * message. The result of the evaluation should match the XPath result
         * specified in the endpoint URI. beanname - Allows you to reference an
         * org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher
         * object in order to integrate with existing (legacy) endpoint mappings
         * like PayloadRootQNameEndpointMapping, SoapActionEndpointMapping, etc.
         * The option is a
         * org.apache.camel.component.spring.ws.type.EndpointMappingType type.
         */
        public SpringWebserviceConsumer type(EndpointMappingType type) {
            this.type = type;
            return (SpringWebserviceConsumer) this;
        }

        /**
         * Endpoint mapping key if endpoint mapping is used. The option is a
         * java.lang.String type.
         */
        public SpringWebserviceConsumer lookupKey(String lookupKey) {
            this.lookupKey = lookupKey;
            return (SpringWebserviceConsumer) this;
        }

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public SpringWebserviceConsumer bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (SpringWebserviceConsumer) this;
        }

        /**
         * Spring org.springframework.ws.server.endpoint.MessageEndpoint for
         * dispatching messages received by Spring-WS to a Camel endpoint, to
         * integrate with existing (legacy) endpoint mappings like
         * PayloadRootQNameEndpointMapping, SoapActionEndpointMapping, etc. The
         * option is a
         * org.apache.camel.component.spring.ws.bean.CamelEndpointDispatcher
         * type.
         */
        public SpringWebserviceConsumer endpointDispatcher(
                Object endpointDispatcher) {
            this.endpointDispatcher = endpointDispatcher;
            return (SpringWebserviceConsumer) this;
        }

        /**
         * Reference to an instance of
         * org.apache.camel.component.spring.ws.bean.CamelEndpointMapping in the
         * Registry/ApplicationContext. Only one bean is required in the
         * registry to serve all Camel/Spring-WS endpoints. This bean is
         * auto-discovered by the MessageDispatcher and used to map requests to
         * Camel endpoints based on characteristics specified on the endpoint
         * (like root QName, SOAP action, etc). The option is a
         * org.apache.camel.component.spring.ws.bean.CamelSpringWSEndpointMapping type.
         */
        public SpringWebserviceConsumer endpointMapping(Object endpointMapping) {
            this.endpointMapping = endpointMapping;
            return (SpringWebserviceConsumer) this;
        }

        /**
         * The XPath expression to use when option type=xpathresult. Then this
         * option is required to be configured. The option is a java.lang.String
         * type.
         */
        public SpringWebserviceConsumer expression(String expression) {
            this.expression = expression;
            return (SpringWebserviceConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public SpringWebserviceConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (SpringWebserviceConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public SpringWebserviceConsumer exchangePattern(
                ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (SpringWebserviceConsumer) this;
        }

        public EndpointMappingType getType() {
            return type;
        }

        public void setType(EndpointMappingType type) {
            this.type = type;
        }

        public String getLookupKey() {
            return lookupKey;
        }

        public void setLookupKey(String lookupKey) {
            this.lookupKey = lookupKey;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public Object getEndpointDispatcher() {
            return endpointDispatcher;
        }

        public void setEndpointDispatcher(Object endpointDispatcher) {
            this.endpointDispatcher = endpointDispatcher;
        }

        public Object getEndpointMapping() {
            return endpointMapping;
        }

        public void setEndpointMapping(Object endpointMapping) {
            this.endpointMapping = endpointMapping;
        }

        public String getExpression() {
            return expression;
        }

        public void setExpression(String expression) {
            this.expression = expression;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class SpringWebserviceProducer
            extends
                SpringWebserviceCommon<SpringWebserviceProducer> {
        private String webServiceEndpointUri;
        private Boolean allowResponseAttachmentOverride;
        private Boolean allowResponseHeaderOverride;
        private URI faultAction;
        private URI faultTo;
        private Object messageFactory;
        private Object messageIdStrategy;
        private Object messageSender;
        private URI outputAction;
        private URI replyTo;
        private String soapAction;
        private Integer timeout;
        private Object webServiceTemplate;
        private URI wsAddressingAction;

        /**
         * The default Web Service endpoint uri to use for the producer. The
         * option is a java.lang.String type.
         */
        public SpringWebserviceProducer webServiceEndpointUri(
                String webServiceEndpointUri) {
            this.webServiceEndpointUri = webServiceEndpointUri;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Option to override soap response attachments in in/out exchange with
         * attachments from the actual service layer. If the invoked service
         * appends or rewrites the soap attachments this option when set to
         * true, allows the modified soap attachments to be overwritten in
         * in/out message attachments. The option is a boolean type.
         */
        public SpringWebserviceProducer allowResponseAttachmentOverride(
                boolean allowResponseAttachmentOverride) {
            this.allowResponseAttachmentOverride = allowResponseAttachmentOverride;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Option to override soap response header in in/out exchange with
         * header info from the actual service layer. If the invoked service
         * appends or rewrites the soap header this option when set to true,
         * allows the modified soap header to be overwritten in in/out message
         * headers. The option is a boolean type.
         */
        public SpringWebserviceProducer allowResponseHeaderOverride(
                boolean allowResponseHeaderOverride) {
            this.allowResponseHeaderOverride = allowResponseHeaderOverride;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Signifies the value for the faultAction response WS-Addressing Fault
         * Action header that is provided by the method. The option is a
         * java.net.URI type.
         */
        public SpringWebserviceProducer faultAction(URI faultAction) {
            this.faultAction = faultAction;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Signifies the value for the faultAction response WS-Addressing
         * FaultTo header that is provided by the method. The option is a
         * java.net.URI type.
         */
        public SpringWebserviceProducer faultTo(URI faultTo) {
            this.faultTo = faultTo;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Option to provide a custom WebServiceMessageFactory. For example when
         * you want Apache Axiom to handle web service messages instead of SAAJ.
         * The option is a org.springframework.ws.WebServiceMessageFactory type.
         */
        public SpringWebserviceProducer messageFactory(Object messageFactory) {
            this.messageFactory = messageFactory;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Option to provide a custom MessageIdStrategy to control generation of
         * unique message ids. The option is a
         * org.springframework.ws.soap.addressing.messageid.MessageIdStrategy
         * type.
         */
        public SpringWebserviceProducer messageIdStrategy(
                Object messageIdStrategy) {
            this.messageIdStrategy = messageIdStrategy;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Option to provide a custom WebServiceMessageSender. For example to
         * perform authentication or use alternative transports. The option is a
         * org.springframework.ws.transport.WebServiceMessageSender type.
         */
        public SpringWebserviceProducer messageSender(Object messageSender) {
            this.messageSender = messageSender;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Signifies the value for the response WS-Addressing Action header that
         * is provided by the method. The option is a java.net.URI type.
         */
        public SpringWebserviceProducer outputAction(URI outputAction) {
            this.outputAction = outputAction;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Signifies the value for the replyTo response WS-Addressing ReplyTo
         * header that is provided by the method. The option is a java.net.URI
         * type.
         */
        public SpringWebserviceProducer replyTo(URI replyTo) {
            this.replyTo = replyTo;
            return (SpringWebserviceProducer) this;
        }

        /**
         * SOAP action to include inside a SOAP request when accessing remote
         * web services. The option is a java.lang.String type.
         */
        public SpringWebserviceProducer soapAction(String soapAction) {
            this.soapAction = soapAction;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Sets the socket read timeout (in milliseconds) while invoking a
         * webservice using the producer, see URLConnection.setReadTimeout() and
         * CommonsHttpMessageSender.setReadTimeout(). This option works when
         * using the built-in message sender implementations:
         * CommonsHttpMessageSender and HttpUrlConnectionMessageSender. One of
         * these implementations will be used by default for HTTP based services
         * unless you customize the Spring WS configuration options supplied to
         * the component. If you are using a non-standard sender, it is assumed
         * that you will handle your own timeout configuration. The built-in
         * message sender HttpComponentsMessageSender is considered instead of
         * CommonsHttpMessageSender which has been deprecated, see
         * HttpComponentsMessageSender.setReadTimeout(). The option is a int
         * type.
         */
        public SpringWebserviceProducer timeout(int timeout) {
            this.timeout = timeout;
            return (SpringWebserviceProducer) this;
        }

        /**
         * Option to provide a custom WebServiceTemplate. This allows for full
         * control over client-side web services handling; like adding a custom
         * interceptor or specifying a fault resolver, message sender or message
         * factory. The option is a
         * org.springframework.ws.client.core.WebServiceTemplate type.
         */
        public SpringWebserviceProducer webServiceTemplate(
                Object webServiceTemplate) {
            this.webServiceTemplate = webServiceTemplate;
            return (SpringWebserviceProducer) this;
        }

        /**
         * WS-Addressing 1.0 action header to include when accessing web
         * services. The To header is set to the address of the web service as
         * specified in the endpoint URI (default Spring-WS behavior). The
         * option is a java.net.URI type.
         */
        public SpringWebserviceProducer wsAddressingAction(
                URI wsAddressingAction) {
            this.wsAddressingAction = wsAddressingAction;
            return (SpringWebserviceProducer) this;
        }

        public String getWebServiceEndpointUri() {
            return webServiceEndpointUri;
        }

        public void setWebServiceEndpointUri(String webServiceEndpointUri) {
            this.webServiceEndpointUri = webServiceEndpointUri;
        }

        public Boolean getAllowResponseAttachmentOverride() {
            return allowResponseAttachmentOverride;
        }

        public void setAllowResponseAttachmentOverride(
                Boolean allowResponseAttachmentOverride) {
            this.allowResponseAttachmentOverride = allowResponseAttachmentOverride;
        }

        public Boolean getAllowResponseHeaderOverride() {
            return allowResponseHeaderOverride;
        }

        public void setAllowResponseHeaderOverride(
                Boolean allowResponseHeaderOverride) {
            this.allowResponseHeaderOverride = allowResponseHeaderOverride;
        }

        public URI getFaultAction() {
            return faultAction;
        }

        public void setFaultAction(URI faultAction) {
            this.faultAction = faultAction;
        }

        public URI getFaultTo() {
            return faultTo;
        }

        public void setFaultTo(URI faultTo) {
            this.faultTo = faultTo;
        }

        public Object getMessageFactory() {
            return messageFactory;
        }

        public void setMessageFactory(Object messageFactory) {
            this.messageFactory = messageFactory;
        }

        public Object getMessageIdStrategy() {
            return messageIdStrategy;
        }

        public void setMessageIdStrategy(Object messageIdStrategy) {
            this.messageIdStrategy = messageIdStrategy;
        }

        public Object getMessageSender() {
            return messageSender;
        }

        public void setMessageSender(Object messageSender) {
            this.messageSender = messageSender;
        }

        public URI getOutputAction() {
            return outputAction;
        }

        public void setOutputAction(URI outputAction) {
            this.outputAction = outputAction;
        }

        public URI getReplyTo() {
            return replyTo;
        }

        public void setReplyTo(URI replyTo) {
            this.replyTo = replyTo;
        }

        public String getSoapAction() {
            return soapAction;
        }

        public void setSoapAction(String soapAction) {
            this.soapAction = soapAction;
        }

        public Integer getTimeout() {
            return timeout;
        }

        public void setTimeout(Integer timeout) {
            this.timeout = timeout;
        }

        public Object getWebServiceTemplate() {
            return webServiceTemplate;
        }

        public void setWebServiceTemplate(Object webServiceTemplate) {
            this.webServiceTemplate = webServiceTemplate;
        }

        public URI getWsAddressingAction() {
            return wsAddressingAction;
        }

        public void setWsAddressingAction(URI wsAddressingAction) {
            this.wsAddressingAction = wsAddressingAction;
        }
    }

    public static enum EndpointMappingType {
        ROOT_QNAME, ACTION, TO, SOAP_ACTION, XPATHRESULT, URI, URI_PATH, BEANNAME;
    }
}