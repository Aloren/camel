/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.concurrent.BlockingQueue;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.WaitForTaskToComplete;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The stub component provides a simple way to stub out any physical endpoints
 * while in development or testing.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class StubEndpoint {


    public static class StubCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String name;
        private Integer size;
        private Boolean basicPropertyBinding;
        private BlockingQueue queue;
        private Boolean synchronous;

        /**
         * Name of queue. The option is a java.lang.String type.
         */
        public T name(String name) {
            this.name = name;
            return (T) this;
        }

        /**
         * The maximum capacity of the SEDA queue (i.e., the number of messages
         * it can hold). Will by default use the defaultSize set on the SEDA
         * component. The option is a int type.
         */
        public T size(int size) {
            this.size = size;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Define the queue instance which will be used by the endpoint. This
         * option is only for rare use-cases where you want to use a custom
         * queue instance. The option is a java.util.concurrent.BlockingQueue
         * type.
         */
        public T queue(BlockingQueue queue) {
            this.queue = queue;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public Integer getSize() {
            return size;
        }

        public void setSize(Integer size) {
            this.size = size;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public BlockingQueue getQueue() {
            return queue;
        }

        public void setQueue(BlockingQueue queue) {
            this.queue = queue;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class StubConsumer extends StubCommon<StubConsumer> {
        private Boolean bridgeErrorHandler;
        private Integer concurrentConsumers;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;
        private Boolean limitConcurrentConsumers;
        private Boolean multipleConsumers;
        private Integer pollTimeout;
        private Boolean purgeWhenStopping;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public StubConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (StubConsumer) this;
        }

        /**
         * Number of concurrent threads processing exchanges. The option is a
         * int type.
         */
        public StubConsumer concurrentConsumers(int concurrentConsumers) {
            this.concurrentConsumers = concurrentConsumers;
            return (StubConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public StubConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (StubConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public StubConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (StubConsumer) this;
        }

        /**
         * Whether to limit the number of concurrentConsumers to the maximum of
         * 500. By default, an exception will be thrown if an endpoint is
         * configured with a greater number. You can disable that check by
         * turning this option off. The option is a boolean type.
         */
        public StubConsumer limitConcurrentConsumers(
                boolean limitConcurrentConsumers) {
            this.limitConcurrentConsumers = limitConcurrentConsumers;
            return (StubConsumer) this;
        }

        /**
         * Specifies whether multiple consumers are allowed. If enabled, you can
         * use SEDA for Publish-Subscribe messaging. That is, you can send a
         * message to the SEDA queue and have each consumer receive a copy of
         * the message. When enabled, this option should be specified on every
         * consumer endpoint. The option is a boolean type.
         */
        public StubConsumer multipleConsumers(boolean multipleConsumers) {
            this.multipleConsumers = multipleConsumers;
            return (StubConsumer) this;
        }

        /**
         * The timeout used when polling. When a timeout occurs, the consumer
         * can check whether it is allowed to continue running. Setting a lower
         * value allows the consumer to react more quickly upon shutdown. The
         * option is a int type.
         */
        public StubConsumer pollTimeout(int pollTimeout) {
            this.pollTimeout = pollTimeout;
            return (StubConsumer) this;
        }

        /**
         * Whether to purge the task queue when stopping the consumer/route.
         * This allows to stop faster, as any pending messages on the queue is
         * discarded. The option is a boolean type.
         */
        public StubConsumer purgeWhenStopping(boolean purgeWhenStopping) {
            this.purgeWhenStopping = purgeWhenStopping;
            return (StubConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public Integer getConcurrentConsumers() {
            return concurrentConsumers;
        }

        public void setConcurrentConsumers(Integer concurrentConsumers) {
            this.concurrentConsumers = concurrentConsumers;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }

        public Boolean getLimitConcurrentConsumers() {
            return limitConcurrentConsumers;
        }

        public void setLimitConcurrentConsumers(Boolean limitConcurrentConsumers) {
            this.limitConcurrentConsumers = limitConcurrentConsumers;
        }

        public Boolean getMultipleConsumers() {
            return multipleConsumers;
        }

        public void setMultipleConsumers(Boolean multipleConsumers) {
            this.multipleConsumers = multipleConsumers;
        }

        public Integer getPollTimeout() {
            return pollTimeout;
        }

        public void setPollTimeout(Integer pollTimeout) {
            this.pollTimeout = pollTimeout;
        }

        public Boolean getPurgeWhenStopping() {
            return purgeWhenStopping;
        }

        public void setPurgeWhenStopping(Boolean purgeWhenStopping) {
            this.purgeWhenStopping = purgeWhenStopping;
        }
    }

    public static class StubProducer extends StubCommon<StubProducer> {
        private Boolean blockWhenFull;
        private Boolean discardIfNoConsumers;
        private Boolean failIfNoConsumers;
        private Long offerTimeout;
        private Long timeout;
        private WaitForTaskToComplete waitForTaskToComplete;

        /**
         * Whether a thread that sends messages to a full SEDA queue will block
         * until the queue's capacity is no longer exhausted. By default, an
         * exception will be thrown stating that the queue is full. By enabling
         * this option, the calling thread will instead block and wait until the
         * message can be accepted. The option is a boolean type.
         */
        public StubProducer blockWhenFull(boolean blockWhenFull) {
            this.blockWhenFull = blockWhenFull;
            return (StubProducer) this;
        }

        /**
         * Whether the producer should discard the message (do not add the
         * message to the queue), when sending to a queue with no active
         * consumers. Only one of the options discardIfNoConsumers and
         * failIfNoConsumers can be enabled at the same time. The option is a
         * boolean type.
         */
        public StubProducer discardIfNoConsumers(boolean discardIfNoConsumers) {
            this.discardIfNoConsumers = discardIfNoConsumers;
            return (StubProducer) this;
        }

        /**
         * Whether the producer should fail by throwing an exception, when
         * sending to a queue with no active consumers. Only one of the options
         * discardIfNoConsumers and failIfNoConsumers can be enabled at the same
         * time. The option is a boolean type.
         */
        public StubProducer failIfNoConsumers(boolean failIfNoConsumers) {
            this.failIfNoConsumers = failIfNoConsumers;
            return (StubProducer) this;
        }

        /**
         * offerTimeout (in milliseconds) can be added to the block case when
         * queue is full. You can disable timeout by using 0 or a negative
         * value. The option is a long type.
         */
        public StubProducer offerTimeout(long offerTimeout) {
            this.offerTimeout = offerTimeout;
            return (StubProducer) this;
        }

        /**
         * Timeout (in milliseconds) before a SEDA producer will stop waiting
         * for an asynchronous task to complete. You can disable timeout by
         * using 0 or a negative value. The option is a long type.
         */
        public StubProducer timeout(long timeout) {
            this.timeout = timeout;
            return (StubProducer) this;
        }

        /**
         * Option to specify whether the caller should wait for the async task
         * to complete or not before continuing. The following three options are
         * supported: Always, Never or IfReplyExpected. The first two values are
         * self-explanatory. The last value, IfReplyExpected, will only wait if
         * the message is Request Reply based. The default option is
         * IfReplyExpected. The option is a
         * org.apache.camel.WaitForTaskToComplete type.
         */
        public StubProducer waitForTaskToComplete(
                WaitForTaskToComplete waitForTaskToComplete) {
            this.waitForTaskToComplete = waitForTaskToComplete;
            return (StubProducer) this;
        }

        public Boolean getBlockWhenFull() {
            return blockWhenFull;
        }

        public void setBlockWhenFull(Boolean blockWhenFull) {
            this.blockWhenFull = blockWhenFull;
        }

        public Boolean getDiscardIfNoConsumers() {
            return discardIfNoConsumers;
        }

        public void setDiscardIfNoConsumers(Boolean discardIfNoConsumers) {
            this.discardIfNoConsumers = discardIfNoConsumers;
        }

        public Boolean getFailIfNoConsumers() {
            return failIfNoConsumers;
        }

        public void setFailIfNoConsumers(Boolean failIfNoConsumers) {
            this.failIfNoConsumers = failIfNoConsumers;
        }

        public Long getOfferTimeout() {
            return offerTimeout;
        }

        public void setOfferTimeout(Long offerTimeout) {
            this.offerTimeout = offerTimeout;
        }

        public Long getTimeout() {
            return timeout;
        }

        public void setTimeout(Long timeout) {
            this.timeout = timeout;
        }

        public WaitForTaskToComplete getWaitForTaskToComplete() {
            return waitForTaskToComplete;
        }

        public void setWaitForTaskToComplete(
                WaitForTaskToComplete waitForTaskToComplete) {
            this.waitForTaskToComplete = waitForTaskToComplete;
        }
    }
}