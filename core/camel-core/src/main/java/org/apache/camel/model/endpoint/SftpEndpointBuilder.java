/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.security.KeyPair;
import java.util.Comparator;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.Exchange;
import org.apache.camel.ExchangePattern;
import org.apache.camel.Expression;
import org.apache.camel.LoggingLevel;
import org.apache.camel.Predicate;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.IdempotentRepository;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * The sftp (FTP over SSH) component is used for uploading or downloading files
 * from SFTP servers.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface SftpEndpointBuilder {


    /**
     * Base class for the SFTP component builders.
     */
    public static class SftpCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        SftpCommonBuilder(String path) {
            super("sftp", path);
        }
        /**
         * Hostname of the FTP server. The option is a
         * <code>java.lang.String</code> type.
         */
        public T host(String host) {
            this.properties.put("host", host);
            return (T) this;
        }
        /**
         * Port of the FTP server. The option is a <code>int</code> type.
         */
        public T port(int port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Port of the FTP server. The option will be converted to a
         * <code>int</code> type.
         */
        public T port(String port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * The starting directory. The option is a <code>java.lang.String</code>
         * type.
         */
        public T directoryName(String directoryName) {
            this.properties.put("directoryName", directoryName);
            return (T) this;
        }
        /**
         * This option is used to specify the encoding of the file. You can use
         * this on the consumer, to specify the encodings of the files, which
         * allow Camel to know the charset it should load the file content in
         * case the file content is being accessed. Likewise when writing a
         * file, you can use this option to specify which charset to write the
         * file as well. Do mind that when writing the file Camel may have to
         * read the message content into memory to be able to convert the data
         * into the configured charset, so do not use this if you have big
         * messages. The option is a <code>java.lang.String</code> type.
         */
        public T charset(String charset) {
            this.properties.put("charset", charset);
            return (T) this;
        }
        /**
         * Whether or not to disconnect from remote FTP server right after use.
         * Disconnect will only disconnect the current connection to the FTP
         * server. If you have a consumer which you want to stop, then you need
         * to stop the consumer/route instead. The option is a
         * <code>boolean</code> type.
         */
        public T disconnect(boolean disconnect) {
            this.properties.put("disconnect", disconnect);
            return (T) this;
        }
        /**
         * Whether or not to disconnect from remote FTP server right after use.
         * Disconnect will only disconnect the current connection to the FTP
         * server. If you have a consumer which you want to stop, then you need
         * to stop the consumer/route instead. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T disconnect(String disconnect) {
            this.properties.put("disconnect", disconnect);
            return (T) this;
        }
        /**
         * Producer: If provided, then Camel will write a 2nd done file when the
         * original file has been written. The done file will be empty. This
         * option configures what file name to use. Either you can specify a
         * fixed name. Or you can use dynamic placeholders. The done file will
         * always be written in the same folder as the original file. Consumer:
         * If provided, Camel will only consume files if a done file exists.
         * This option configures what file name to use. Either you can specify
         * a fixed name. Or you can use dynamic placeholders.The done file is
         * always expected in the same folder as the original file. Only
         * ${file.name} and ${file.name.noext} is supported as dynamic
         * placeholders. The option is a <code>java.lang.String</code> type.
         */
        public T doneFileName(String doneFileName) {
            this.properties.put("doneFileName", doneFileName);
            return (T) this;
        }
        /**
         * Use Expression such as File Language to dynamically set the filename.
         * For consumers, it's used as a filename filter. For producers, it's
         * used to evaluate the filename to write. If an expression is set, it
         * take precedence over the CamelFileName header. (Note: The header
         * itself can also be an Expression). The expression options support
         * both String and Expression types. If the expression is a String type,
         * it is always evaluated using the File Language. If the expression is
         * an Expression type, the specified Expression type is used - this
         * allows you, for instance, to use OGNL expressions. For the consumer,
         * you can use it to filter filenames, so you can for instance consume
         * today's file using the File Language syntax:
         * mydata-${date:now:yyyyMMdd}.txt. The producers support the
         * CamelOverruleFileName header which takes precedence over any existing
         * CamelFileName header; the CamelOverruleFileName is a header that is
         * used only once, and makes it easier as this avoids to temporary store
         * CamelFileName and have to restore it afterwards. The option is a
         * <code>org.apache.camel.Expression</code> type.
         */
        public T fileName(Expression fileName) {
            this.properties.put("fileName", fileName);
            return (T) this;
        }
        /**
         * Use Expression such as File Language to dynamically set the filename.
         * For consumers, it's used as a filename filter. For producers, it's
         * used to evaluate the filename to write. If an expression is set, it
         * take precedence over the CamelFileName header. (Note: The header
         * itself can also be an Expression). The expression options support
         * both String and Expression types. If the expression is a String type,
         * it is always evaluated using the File Language. If the expression is
         * an Expression type, the specified Expression type is used - this
         * allows you, for instance, to use OGNL expressions. For the consumer,
         * you can use it to filter filenames, so you can for instance consume
         * today's file using the File Language syntax:
         * mydata-${date:now:yyyyMMdd}.txt. The producers support the
         * CamelOverruleFileName header which takes precedence over any existing
         * CamelFileName header; the CamelOverruleFileName is a header that is
         * used only once, and makes it easier as this avoids to temporary store
         * CamelFileName and have to restore it afterwards. The option will be
         * converted to a <code>org.apache.camel.Expression</code> type.
         */
        public T fileName(String fileName) {
            this.properties.put("fileName", fileName);
            return (T) this;
        }
        /**
         * The logging level to use for JSCH activity logging. As JSCH is
         * verbose at by default at INFO level the threshold is WARN by default.
         * The option is a <code>org.apache.camel.LoggingLevel</code> type.
         */
        public T jschLoggingLevel(LoggingLevel jschLoggingLevel) {
            this.properties.put("jschLoggingLevel", jschLoggingLevel);
            return (T) this;
        }
        /**
         * The logging level to use for JSCH activity logging. As JSCH is
         * verbose at by default at INFO level the threshold is WARN by default.
         * The option will be converted to a
         * <code>org.apache.camel.LoggingLevel</code> type.
         */
        public T jschLoggingLevel(String jschLoggingLevel) {
            this.properties.put("jschLoggingLevel", jschLoggingLevel);
            return (T) this;
        }
        /**
         * Sets the path separator to be used. UNIX = Uses unix style path
         * separator Windows = Uses windows style path separator Auto = (is
         * default) Use existing path separator in file name. The option is a
         * <code>org.apache.camel.component.file.remote.RemoteFileConfiguration$PathSeparator</code> type.
         */
        public T separator(PathSeparator separator) {
            this.properties.put("separator", separator);
            return (T) this;
        }
        /**
         * Sets the path separator to be used. UNIX = Uses unix style path
         * separator Windows = Uses windows style path separator Auto = (is
         * default) Use existing path separator in file name. The option will be
         * converted to a
         * <code>org.apache.camel.component.file.remote.RemoteFileConfiguration$PathSeparator</code> type.
         */
        public T separator(String separator) {
            this.properties.put("separator", separator);
            return (T) this;
        }
        /**
         * If set this option to be true, camel-ftp will use the list file
         * directly to check if the file exists. Since some FTP server may not
         * support to list the file directly, if the option is false, camel-ftp
         * will use the old way to list the directory and check if the file
         * exists. This option also influences readLock=changed to control
         * whether it performs a fast check to update file information or not.
         * This can be used to speed up the process if the FTP server has a lot
         * of files. The option is a <code>boolean</code> type.
         */
        public T fastExistsCheck(boolean fastExistsCheck) {
            this.properties.put("fastExistsCheck", fastExistsCheck);
            return (T) this;
        }
        /**
         * If set this option to be true, camel-ftp will use the list file
         * directly to check if the file exists. Since some FTP server may not
         * support to list the file directly, if the option is false, camel-ftp
         * will use the old way to list the directory and check if the file
         * exists. This option also influences readLock=changed to control
         * whether it performs a fast check to update file information or not.
         * This can be used to speed up the process if the FTP server has a lot
         * of files. The option will be converted to a <code>boolean</code>
         * type.
         */
        public T fastExistsCheck(String fastExistsCheck) {
            this.properties.put("fastExistsCheck", fastExistsCheck);
            return (T) this;
        }
        /**
         * Automatically create missing directories in the file's pathname. For
         * the file consumer, that means creating the starting directory. For
         * the file producer, it means the directory the files should be written
         * to. The option is a <code>boolean</code> type.
         */
        public T autoCreate(boolean autoCreate) {
            this.properties.put("autoCreate", autoCreate);
            return (T) this;
        }
        /**
         * Automatically create missing directories in the file's pathname. For
         * the file consumer, that means creating the starting directory. For
         * the file producer, it means the directory the files should be written
         * to. The option will be converted to a <code>boolean</code> type.
         */
        public T autoCreate(String autoCreate) {
            this.properties.put("autoCreate", autoCreate);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Specifies the address of the local interface against which the
         * connection should bind. The option is a <code>java.lang.String</code>
         * type.
         */
        public T bindAddress(String bindAddress) {
            this.properties.put("bindAddress", bindAddress);
            return (T) this;
        }
        /**
         * Write buffer sized in bytes. The option is a <code>int</code> type.
         */
        public T bufferSize(int bufferSize) {
            this.properties.put("bufferSize", bufferSize);
            return (T) this;
        }
        /**
         * Write buffer sized in bytes. The option will be converted to a
         * <code>int</code> type.
         */
        public T bufferSize(String bufferSize) {
            this.properties.put("bufferSize", bufferSize);
            return (T) this;
        }
        /**
         * Specifies how many requests may be outstanding at any one time.
         * Increasing this value may slightly improve file transfer speed but
         * will increase memory usage. The option is a
         * <code>java.lang.Integer</code> type.
         */
        public T bulkRequests(Integer bulkRequests) {
            this.properties.put("bulkRequests", bulkRequests);
            return (T) this;
        }
        /**
         * Specifies how many requests may be outstanding at any one time.
         * Increasing this value may slightly improve file transfer speed but
         * will increase memory usage. The option will be converted to a
         * <code>java.lang.Integer</code> type.
         */
        public T bulkRequests(String bulkRequests) {
            this.properties.put("bulkRequests", bulkRequests);
            return (T) this;
        }
        /**
         * To use compression. Specify a level from 1 to 10. Important: You must
         * manually add the needed JSCH zlib JAR to the classpath for
         * compression support. The option is a <code>int</code> type.
         */
        public T compression(int compression) {
            this.properties.put("compression", compression);
            return (T) this;
        }
        /**
         * To use compression. Specify a level from 1 to 10. Important: You must
         * manually add the needed JSCH zlib JAR to the classpath for
         * compression support. The option will be converted to a
         * <code>int</code> type.
         */
        public T compression(String compression) {
            this.properties.put("compression", compression);
            return (T) this;
        }
        /**
         * Sets the connect timeout for waiting for a connection to be
         * established Used by both FTPClient and JSCH. The option is a
         * <code>int</code> type.
         */
        public T connectTimeout(int connectTimeout) {
            this.properties.put("connectTimeout", connectTimeout);
            return (T) this;
        }
        /**
         * Sets the connect timeout for waiting for a connection to be
         * established Used by both FTPClient and JSCH. The option will be
         * converted to a <code>int</code> type.
         */
        public T connectTimeout(String connectTimeout) {
            this.properties.put("connectTimeout", connectTimeout);
            return (T) this;
        }
        /**
         * Specifies the maximum reconnect attempts Camel performs when it tries
         * to connect to the remote FTP server. Use 0 to disable this behavior.
         * The option is a <code>int</code> type.
         */
        public T maximumReconnectAttempts(int maximumReconnectAttempts) {
            this.properties.put("maximumReconnectAttempts", maximumReconnectAttempts);
            return (T) this;
        }
        /**
         * Specifies the maximum reconnect attempts Camel performs when it tries
         * to connect to the remote FTP server. Use 0 to disable this behavior.
         * The option will be converted to a <code>int</code> type.
         */
        public T maximumReconnectAttempts(String maximumReconnectAttempts) {
            this.properties.put("maximumReconnectAttempts", maximumReconnectAttempts);
            return (T) this;
        }
        /**
         * To use a custom configured com.jcraft.jsch.Proxy. This proxy is used
         * to consume/send messages from the target SFTP host. The option is a
         * <code>com.jcraft.jsch.Proxy</code> type.
         */
        public T proxy(Object proxy) {
            this.properties.put("proxy", proxy);
            return (T) this;
        }
        /**
         * To use a custom configured com.jcraft.jsch.Proxy. This proxy is used
         * to consume/send messages from the target SFTP host. The option will
         * be converted to a <code>com.jcraft.jsch.Proxy</code> type.
         */
        public T proxy(String proxy) {
            this.properties.put("proxy", proxy);
            return (T) this;
        }
        /**
         * Delay in millis Camel will wait before performing a reconnect
         * attempt. The option is a <code>long</code> type.
         */
        public T reconnectDelay(long reconnectDelay) {
            this.properties.put("reconnectDelay", reconnectDelay);
            return (T) this;
        }
        /**
         * Delay in millis Camel will wait before performing a reconnect
         * attempt. The option will be converted to a <code>long</code> type.
         */
        public T reconnectDelay(String reconnectDelay) {
            this.properties.put("reconnectDelay", reconnectDelay);
            return (T) this;
        }
        /**
         * Allows you to set the serverAliveCountMax of the sftp session. The
         * option is a <code>int</code> type.
         */
        public T serverAliveCountMax(int serverAliveCountMax) {
            this.properties.put("serverAliveCountMax", serverAliveCountMax);
            return (T) this;
        }
        /**
         * Allows you to set the serverAliveCountMax of the sftp session. The
         * option will be converted to a <code>int</code> type.
         */
        public T serverAliveCountMax(String serverAliveCountMax) {
            this.properties.put("serverAliveCountMax", serverAliveCountMax);
            return (T) this;
        }
        /**
         * Allows you to set the serverAliveInterval of the sftp session. The
         * option is a <code>int</code> type.
         */
        public T serverAliveInterval(int serverAliveInterval) {
            this.properties.put("serverAliveInterval", serverAliveInterval);
            return (T) this;
        }
        /**
         * Allows you to set the serverAliveInterval of the sftp session. The
         * option will be converted to a <code>int</code> type.
         */
        public T serverAliveInterval(String serverAliveInterval) {
            this.properties.put("serverAliveInterval", serverAliveInterval);
            return (T) this;
        }
        /**
         * Sets the so timeout FTP and FTPS Only for Camel 2.4. SFTP for Camel
         * 2.14.3/2.15.3/2.16 onwards. Is the SocketOptions.SO_TIMEOUT value in
         * millis. Recommended option is to set this to 300000 so as not have a
         * hanged connection. On SFTP this option is set as timeout on the JSCH
         * Session instance. The option is a <code>int</code> type.
         */
        public T soTimeout(int soTimeout) {
            this.properties.put("soTimeout", soTimeout);
            return (T) this;
        }
        /**
         * Sets the so timeout FTP and FTPS Only for Camel 2.4. SFTP for Camel
         * 2.14.3/2.15.3/2.16 onwards. Is the SocketOptions.SO_TIMEOUT value in
         * millis. Recommended option is to set this to 300000 so as not have a
         * hanged connection. On SFTP this option is set as timeout on the JSCH
         * Session instance. The option will be converted to a <code>int</code>
         * type.
         */
        public T soTimeout(String soTimeout) {
            this.properties.put("soTimeout", soTimeout);
            return (T) this;
        }
        /**
         * Sets whether we should stepwise change directories while traversing
         * file structures when downloading files, or as well when uploading a
         * file to a directory. You can disable this if you for example are in a
         * situation where you cannot change directory on the FTP server due
         * security reasons. The option is a <code>boolean</code> type.
         */
        public T stepwise(boolean stepwise) {
            this.properties.put("stepwise", stepwise);
            return (T) this;
        }
        /**
         * Sets whether we should stepwise change directories while traversing
         * file structures when downloading files, or as well when uploading a
         * file to a directory. You can disable this if you for example are in a
         * situation where you cannot change directory on the FTP server due
         * security reasons. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T stepwise(String stepwise) {
            this.properties.put("stepwise", stepwise);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Should an exception be thrown if connection failed (exhausted) By
         * default exception is not thrown and a WARN is logged. You can use
         * this to enable exception being thrown and handle the thrown exception
         * from the org.apache.camel.spi.PollingConsumerPollStrategy rollback
         * method. The option is a <code>boolean</code> type.
         */
        public T throwExceptionOnConnectFailed(
                boolean throwExceptionOnConnectFailed) {
            this.properties.put("throwExceptionOnConnectFailed", throwExceptionOnConnectFailed);
            return (T) this;
        }
        /**
         * Should an exception be thrown if connection failed (exhausted) By
         * default exception is not thrown and a WARN is logged. You can use
         * this to enable exception being thrown and handle the thrown exception
         * from the org.apache.camel.spi.PollingConsumerPollStrategy rollback
         * method. The option will be converted to a <code>boolean</code> type.
         */
        public T throwExceptionOnConnectFailed(
                String throwExceptionOnConnectFailed) {
            this.properties.put("throwExceptionOnConnectFailed", throwExceptionOnConnectFailed);
            return (T) this;
        }
        /**
         * Sets the data timeout for waiting for reply Used only by FTPClient.
         * The option is a <code>int</code> type.
         */
        public T timeout(int timeout) {
            this.properties.put("timeout", timeout);
            return (T) this;
        }
        /**
         * Sets the data timeout for waiting for reply Used only by FTPClient.
         * The option will be converted to a <code>int</code> type.
         */
        public T timeout(String timeout) {
            this.properties.put("timeout", timeout);
            return (T) this;
        }
        /**
         * Set a comma separated list of ciphers that will be used in order of
         * preference. Possible cipher names are defined by JCraft JSCH. Some
         * examples include:
         * aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc,aes192-cbc,aes256-cbc. If not specified the default list from JSCH will be used. The option is a <code>java.lang.String</code> type.
         */
        public T ciphers(String ciphers) {
            this.properties.put("ciphers", ciphers);
            return (T) this;
        }
        /**
         * Sets a key pair of the public and private key so to that the SFTP
         * endpoint can do public/private key verification. The option is a
         * <code>java.security.KeyPair</code> type.
         */
        public T keyPair(KeyPair keyPair) {
            this.properties.put("keyPair", keyPair);
            return (T) this;
        }
        /**
         * Sets a key pair of the public and private key so to that the SFTP
         * endpoint can do public/private key verification. The option will be
         * converted to a <code>java.security.KeyPair</code> type.
         */
        public T keyPair(String keyPair) {
            this.properties.put("keyPair", keyPair);
            return (T) this;
        }
        /**
         * Sets the known_hosts from the byte array, so that the SFTP endpoint
         * can do host key verification. The option is a <code>byte[]</code>
         * type.
         */
        public T knownHosts(Byte[] knownHosts) {
            this.properties.put("knownHosts", knownHosts);
            return (T) this;
        }
        /**
         * Sets the known_hosts from the byte array, so that the SFTP endpoint
         * can do host key verification. The option will be converted to a
         * <code>byte[]</code> type.
         */
        public T knownHosts(String knownHosts) {
            this.properties.put("knownHosts", knownHosts);
            return (T) this;
        }
        /**
         * Sets the known_hosts file, so that the SFTP endpoint can do host key
         * verification. The option is a <code>java.lang.String</code> type.
         */
        public T knownHostsFile(String knownHostsFile) {
            this.properties.put("knownHostsFile", knownHostsFile);
            return (T) this;
        }
        /**
         * Sets the known_hosts file (loaded from classpath by default), so that
         * the SFTP endpoint can do host key verification. The option is a
         * <code>java.lang.String</code> type.
         */
        public T knownHostsUri(String knownHostsUri) {
            this.properties.put("knownHostsUri", knownHostsUri);
            return (T) this;
        }
        /**
         * Password to use for login. The option is a
         * <code>java.lang.String</code> type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * Set the preferred authentications which SFTP endpoint will used. Some
         * example include:password,publickey. If not specified the default list
         * from JSCH will be used. The option is a <code>java.lang.String</code>
         * type.
         */
        public T preferredAuthentications(String preferredAuthentications) {
            this.properties.put("preferredAuthentications", preferredAuthentications);
            return (T) this;
        }
        /**
         * Set the private key as byte so that the SFTP endpoint can do private
         * key verification. The option is a <code>byte[]</code> type.
         */
        public T privateKey(Byte[] privateKey) {
            this.properties.put("privateKey", privateKey);
            return (T) this;
        }
        /**
         * Set the private key as byte so that the SFTP endpoint can do private
         * key verification. The option will be converted to a
         * <code>byte[]</code> type.
         */
        public T privateKey(String privateKey) {
            this.properties.put("privateKey", privateKey);
            return (T) this;
        }
        /**
         * Set the private key file so that the SFTP endpoint can do private key
         * verification. The option is a <code>java.lang.String</code> type.
         */
        public T privateKeyFile(String privateKeyFile) {
            this.properties.put("privateKeyFile", privateKeyFile);
            return (T) this;
        }
        /**
         * Set the private key file passphrase so that the SFTP endpoint can do
         * private key verification. The option is a
         * <code>java.lang.String</code> type.
         */
        public T privateKeyPassphrase(String privateKeyPassphrase) {
            this.properties.put("privateKeyPassphrase", privateKeyPassphrase);
            return (T) this;
        }
        /**
         * Set the private key file (loaded from classpath by default) so that
         * the SFTP endpoint can do private key verification. The option is a
         * <code>java.lang.String</code> type.
         */
        public T privateKeyUri(String privateKeyUri) {
            this.properties.put("privateKeyUri", privateKeyUri);
            return (T) this;
        }
        /**
         * Sets whether to use strict host key checking. The option is a
         * <code>java.lang.String</code> type.
         */
        public T strictHostKeyChecking(String strictHostKeyChecking) {
            this.properties.put("strictHostKeyChecking", strictHostKeyChecking);
            return (T) this;
        }
        /**
         * Username to use for login. The option is a
         * <code>java.lang.String</code> type.
         */
        public T username(String username) {
            this.properties.put("username", username);
            return (T) this;
        }
        /**
         * If knownHostFile has not been explicit configured then use the host
         * file from System.getProperty(user.home)/.ssh/known_hosts. The option
         * is a <code>boolean</code> type.
         */
        public T useUserKnownHostsFile(boolean useUserKnownHostsFile) {
            this.properties.put("useUserKnownHostsFile", useUserKnownHostsFile);
            return (T) this;
        }
        /**
         * If knownHostFile has not been explicit configured then use the host
         * file from System.getProperty(user.home)/.ssh/known_hosts. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T useUserKnownHostsFile(String useUserKnownHostsFile) {
            this.properties.put("useUserKnownHostsFile", useUserKnownHostsFile);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint consumers for the SFTP component.
     */
    public static class SftpConsumerBuilder
            extends
                SftpCommonBuilder<SftpConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public SftpConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (SftpConsumerBuilder) this;
        }
        /**
         * If true, the file will be deleted after it is processed successfully.
         * The option is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder delete(boolean delete) {
            this.properties.put("delete", delete);
            return (SftpConsumerBuilder) this;
        }
        /**
         * If true, the file will be deleted after it is processed successfully.
         * The option will be converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder delete(String delete) {
            this.properties.put("delete", delete);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Sets the move failure expression based on Simple language. For
         * example, to move files into a .error subdirectory use: .error. Note:
         * When moving the files to the fail location Camel will handle the
         * error and will not pick up the file again. The option is a
         * <code>org.apache.camel.Expression</code> type.
         */
        public SftpConsumerBuilder moveFailed(Expression moveFailed) {
            this.properties.put("moveFailed", moveFailed);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Sets the move failure expression based on Simple language. For
         * example, to move files into a .error subdirectory use: .error. Note:
         * When moving the files to the fail location Camel will handle the
         * error and will not pick up the file again. The option will be
         * converted to a <code>org.apache.camel.Expression</code> type.
         */
        public SftpConsumerBuilder moveFailed(String moveFailed) {
            this.properties.put("moveFailed", moveFailed);
            return (SftpConsumerBuilder) this;
        }
        /**
         * If true, the file is not moved or deleted in any way. This option is
         * good for readonly data, or for ETL type requirements. If noop=true,
         * Camel will set idempotent=true as well, to avoid consuming the same
         * files over and over again. The option is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder noop(boolean noop) {
            this.properties.put("noop", noop);
            return (SftpConsumerBuilder) this;
        }
        /**
         * If true, the file is not moved or deleted in any way. This option is
         * good for readonly data, or for ETL type requirements. If noop=true,
         * Camel will set idempotent=true as well, to avoid consuming the same
         * files over and over again. The option will be converted to a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder noop(String noop) {
            this.properties.put("noop", noop);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Expression (such as File Language) used to dynamically set the
         * filename when moving it before processing. For example to move
         * in-progress files into the order directory set this value to order.
         * The option is a <code>org.apache.camel.Expression</code> type.
         */
        public SftpConsumerBuilder preMove(Expression preMove) {
            this.properties.put("preMove", preMove);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Expression (such as File Language) used to dynamically set the
         * filename when moving it before processing. For example to move
         * in-progress files into the order directory set this value to order.
         * The option will be converted to a
         * <code>org.apache.camel.Expression</code> type.
         */
        public SftpConsumerBuilder preMove(String preMove) {
            this.properties.put("preMove", preMove);
            return (SftpConsumerBuilder) this;
        }
        /**
         * When pre-sort is enabled then the consumer will sort the file and
         * directory names during polling, that was retrieved from the file
         * system. You may want to do this in case you need to operate on the
         * files in a sorted order. The pre-sort is executed before the consumer
         * starts to filter, and accept files to process by Camel. This option
         * is default=false meaning disabled. The option is a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder preSort(boolean preSort) {
            this.properties.put("preSort", preSort);
            return (SftpConsumerBuilder) this;
        }
        /**
         * When pre-sort is enabled then the consumer will sort the file and
         * directory names during polling, that was retrieved from the file
         * system. You may want to do this in case you need to operate on the
         * files in a sorted order. The pre-sort is executed before the consumer
         * starts to filter, and accept files to process by Camel. This option
         * is default=false meaning disabled. The option will be converted to a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder preSort(String preSort) {
            this.properties.put("preSort", preSort);
            return (SftpConsumerBuilder) this;
        }
        /**
         * If a directory, will look for files in all the sub-directories as
         * well. The option is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder recursive(boolean recursive) {
            this.properties.put("recursive", recursive);
            return (SftpConsumerBuilder) this;
        }
        /**
         * If a directory, will look for files in all the sub-directories as
         * well. The option will be converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder recursive(String recursive) {
            this.properties.put("recursive", recursive);
            return (SftpConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option is a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (SftpConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option will be
         * converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder sendEmptyMessageWhenIdle(
                String sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Sets the download method to use when not using a local working
         * directory. If set to true, the remote files are streamed to the route
         * as they are read. When set to false, the remote files are loaded into
         * memory before being sent into the route. The option is a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder streamDownload(boolean streamDownload) {
            this.properties.put("streamDownload", streamDownload);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Sets the download method to use when not using a local working
         * directory. If set to true, the remote files are streamed to the route
         * as they are read. When set to false, the remote files are loaded into
         * memory before being sent into the route. The option will be converted
         * to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder streamDownload(String streamDownload) {
            this.properties.put("streamDownload", streamDownload);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether the FTP consumer should download the file. If this option is
         * set to false, then the message body will be null, but the consumer
         * will still trigger a Camel Exchange that has details about the file
         * such as file name, file size, etc. It's just that the file will not
         * be downloaded. The option is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder download(boolean download) {
            this.properties.put("download", download);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether the FTP consumer should download the file. If this option is
         * set to false, then the message body will be null, but the consumer
         * will still trigger a Camel Exchange that has details about the file
         * such as file name, file size, etc. It's just that the file will not
         * be downloaded. The option will be converted to a <code>boolean</code>
         * type.
         */
        public SftpConsumerBuilder download(String download) {
            this.properties.put("download", download);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public SftpConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public SftpConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public SftpConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public SftpConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether to ignore when (trying to list files in directories or when
         * downloading a file), which does not exist or due to permission error.
         * By default when a directory or file does not exists or insufficient
         * permission, then an exception is thrown. Setting this option to true
         * allows to ignore that instead. The option is a <code>boolean</code>
         * type.
         */
        public SftpConsumerBuilder ignoreFileNotFoundOrPermissionError(
                boolean ignoreFileNotFoundOrPermissionError) {
            this.properties.put("ignoreFileNotFoundOrPermissionError", ignoreFileNotFoundOrPermissionError);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether to ignore when (trying to list files in directories or when
         * downloading a file), which does not exist or due to permission error.
         * By default when a directory or file does not exists or insufficient
         * permission, then an exception is thrown. Setting this option to true
         * allows to ignore that instead. The option will be converted to a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder ignoreFileNotFoundOrPermissionError(
                String ignoreFileNotFoundOrPermissionError) {
            this.properties.put("ignoreFileNotFoundOrPermissionError", ignoreFileNotFoundOrPermissionError);
            return (SftpConsumerBuilder) this;
        }
        /**
         * A pluggable in-progress repository
         * org.apache.camel.spi.IdempotentRepository. The in-progress repository
         * is used to account the current in progress files being consumed. By
         * default a memory based repository is used. The option is a
         * <code>org.apache.camel.spi.IdempotentRepository</code> type.
         */
        public SftpConsumerBuilder inProgressRepository(
                IdempotentRepository inProgressRepository) {
            this.properties.put("inProgressRepository", inProgressRepository);
            return (SftpConsumerBuilder) this;
        }
        /**
         * A pluggable in-progress repository
         * org.apache.camel.spi.IdempotentRepository. The in-progress repository
         * is used to account the current in progress files being consumed. By
         * default a memory based repository is used. The option will be
         * converted to a <code>org.apache.camel.spi.IdempotentRepository</code>
         * type.
         */
        public SftpConsumerBuilder inProgressRepository(
                String inProgressRepository) {
            this.properties.put("inProgressRepository", inProgressRepository);
            return (SftpConsumerBuilder) this;
        }
        /**
         * When consuming, a local work directory can be used to store the
         * remote file content directly in local files, to avoid loading the
         * content into memory. This is beneficial, if you consume a very big
         * remote file and thus can conserve memory. The option is a
         * <code>java.lang.String</code> type.
         */
        public SftpConsumerBuilder localWorkDirectory(String localWorkDirectory) {
            this.properties.put("localWorkDirectory", localWorkDirectory);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To use a custom org.apache.camel.spi.ExceptionHandler to handle any
         * thrown exceptions that happens during the file on completion process
         * where the consumer does either a commit or rollback. The default
         * implementation will log any exception at WARN level and ignore. The
         * option is a <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public SftpConsumerBuilder onCompletionExceptionHandler(
                ExceptionHandler onCompletionExceptionHandler) {
            this.properties.put("onCompletionExceptionHandler", onCompletionExceptionHandler);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To use a custom org.apache.camel.spi.ExceptionHandler to handle any
         * thrown exceptions that happens during the file on completion process
         * where the consumer does either a commit or rollback. The default
         * implementation will log any exception at WARN level and ignore. The
         * option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public SftpConsumerBuilder onCompletionExceptionHandler(
                String onCompletionExceptionHandler) {
            this.properties.put("onCompletionExceptionHandler", onCompletionExceptionHandler);
            return (SftpConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option is a
         * <code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.
         */
        public SftpConsumerBuilder pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (SftpConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option will be converted
         * to a <code>org.apache.camel.spi.PollingConsumerPollStrategy</code>
         * type.
         */
        public SftpConsumerBuilder pollStrategy(String pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (SftpConsumerBuilder) this;
        }
        /**
         * A pluggable
         * org.apache.camel.component.file.GenericFileProcessStrategy allowing
         * you to implement your own readLock option or similar. Can also be
         * used when special conditions must be met before a file can be
         * consumed, such as a special ready file exists. If this option is set
         * then the readLock option does not apply. The option is a
         * <code>org.apache.camel.component.file.GenericFileProcessStrategy&lt;org.apache.camel.component.file.remote.SftpRemoteFile&gt;</code> type.
         */
        public SftpConsumerBuilder processStrategy(Object processStrategy) {
            this.properties.put("processStrategy", processStrategy);
            return (SftpConsumerBuilder) this;
        }
        /**
         * A pluggable
         * org.apache.camel.component.file.GenericFileProcessStrategy allowing
         * you to implement your own readLock option or similar. Can also be
         * used when special conditions must be met before a file can be
         * consumed, such as a special ready file exists. If this option is set
         * then the readLock option does not apply. The option will be converted
         * to a
         * <code>org.apache.camel.component.file.GenericFileProcessStrategy&lt;org.apache.camel.component.file.remote.SftpRemoteFile&gt;</code> type.
         */
        public SftpConsumerBuilder processStrategy(String processStrategy) {
            this.properties.put("processStrategy", processStrategy);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether to allow using LIST command when downloading a file. Default
         * is true. In some use cases you may want to download a specific file
         * and are not allowed to use the LIST command, and therefore you can
         * set this option to false. Notice when using this option, then the
         * specific file to download does not include meta-data information such
         * as file size, timestamp, permissions etc, because those information
         * is only possible to retrieve when LIST command is in use. The option
         * is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder useList(boolean useList) {
            this.properties.put("useList", useList);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether to allow using LIST command when downloading a file. Default
         * is true. In some use cases you may want to download a specific file
         * and are not allowed to use the LIST command, and therefore you can
         * set this option to false. Notice when using this option, then the
         * specific file to download does not include meta-data information such
         * as file size, timestamp, permissions etc, because those information
         * is only possible to retrieve when LIST command is in use. The option
         * will be converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder useList(String useList) {
            this.properties.put("useList", useList);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Ant style filter exclusion. If both antInclude and antExclude are
         * used, antExclude takes precedence over antInclude. Multiple
         * exclusions may be specified in comma-delimited format. The option is
         * a <code>java.lang.String</code> type.
         */
        public SftpConsumerBuilder antExclude(String antExclude) {
            this.properties.put("antExclude", antExclude);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Sets case sensitive flag on ant filter. The option is a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder antFilterCaseSensitive(
                boolean antFilterCaseSensitive) {
            this.properties.put("antFilterCaseSensitive", antFilterCaseSensitive);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Sets case sensitive flag on ant filter. The option will be converted
         * to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder antFilterCaseSensitive(
                String antFilterCaseSensitive) {
            this.properties.put("antFilterCaseSensitive", antFilterCaseSensitive);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Ant style filter inclusion. Multiple inclusions may be specified in
         * comma-delimited format. The option is a <code>java.lang.String</code>
         * type.
         */
        public SftpConsumerBuilder antInclude(String antInclude) {
            this.properties.put("antInclude", antInclude);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Allows for controlling whether the limit from maxMessagesPerPoll is
         * eager or not. If eager then the limit is during the scanning of
         * files. Where as false would scan all files, and then perform sorting.
         * Setting this option to false allows for sorting all files first, and
         * then limit the poll. Mind that this requires a higher memory usage as
         * all file details are in memory to perform the sorting. The option is
         * a <code>boolean</code> type.
         */
        public SftpConsumerBuilder eagerMaxMessagesPerPoll(
                boolean eagerMaxMessagesPerPoll) {
            this.properties.put("eagerMaxMessagesPerPoll", eagerMaxMessagesPerPoll);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Allows for controlling whether the limit from maxMessagesPerPoll is
         * eager or not. If eager then the limit is during the scanning of
         * files. Where as false would scan all files, and then perform sorting.
         * Setting this option to false allows for sorting all files first, and
         * then limit the poll. Mind that this requires a higher memory usage as
         * all file details are in memory to perform the sorting. The option
         * will be converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder eagerMaxMessagesPerPoll(
                String eagerMaxMessagesPerPoll) {
            this.properties.put("eagerMaxMessagesPerPoll", eagerMaxMessagesPerPoll);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Is used to exclude files, if filename matches the regex pattern
         * (matching is case in-senstive). Notice if you use symbols such as
         * plus sign and others you would need to configure this using the RAW()
         * syntax if configuring this as an endpoint uri. See more details at
         * configuring endpoint uris. The option is a
         * <code>java.lang.String</code> type.
         */
        public SftpConsumerBuilder exclude(String exclude) {
            this.properties.put("exclude", exclude);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Pluggable filter as a
         * org.apache.camel.component.file.GenericFileFilter class. Will skip
         * files if filter returns false in its accept() method. The option is a
         * <code>org.apache.camel.component.file.GenericFileFilter&lt;org.apache.camel.component.file.remote.SftpRemoteFile&gt;</code> type.
         */
        public SftpConsumerBuilder filter(Object filter) {
            this.properties.put("filter", filter);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Pluggable filter as a
         * org.apache.camel.component.file.GenericFileFilter class. Will skip
         * files if filter returns false in its accept() method. The option will
         * be converted to a
         * <code>org.apache.camel.component.file.GenericFileFilter&lt;org.apache.camel.component.file.remote.SftpRemoteFile&gt;</code> type.
         */
        public SftpConsumerBuilder filter(String filter) {
            this.properties.put("filter", filter);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Filters the directory based on Simple language. For example to filter
         * on current date, you can use a simple date pattern such as
         * ${date:now:yyyMMdd}. The option is a
         * <code>org.apache.camel.Predicate</code> type.
         */
        public SftpConsumerBuilder filterDirectory(Predicate filterDirectory) {
            this.properties.put("filterDirectory", filterDirectory);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Filters the directory based on Simple language. For example to filter
         * on current date, you can use a simple date pattern such as
         * ${date:now:yyyMMdd}. The option will be converted to a
         * <code>org.apache.camel.Predicate</code> type.
         */
        public SftpConsumerBuilder filterDirectory(String filterDirectory) {
            this.properties.put("filterDirectory", filterDirectory);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Filters the file based on Simple language. For example to filter on
         * file size, you can use ${file:size} 5000. The option is a
         * <code>org.apache.camel.Predicate</code> type.
         */
        public SftpConsumerBuilder filterFile(Predicate filterFile) {
            this.properties.put("filterFile", filterFile);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Filters the file based on Simple language. For example to filter on
         * file size, you can use ${file:size} 5000. The option will be
         * converted to a <code>org.apache.camel.Predicate</code> type.
         */
        public SftpConsumerBuilder filterFile(String filterFile) {
            this.properties.put("filterFile", filterFile);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Option to use the Idempotent Consumer EIP pattern to let Camel skip
         * already processed files. Will by default use a memory based LRUCache
         * that holds 1000 entries. If noop=true then idempotent will be enabled
         * as well to avoid consuming the same files over and over again. The
         * option is a <code>java.lang.Boolean</code> type.
         */
        public SftpConsumerBuilder idempotent(Boolean idempotent) {
            this.properties.put("idempotent", idempotent);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Option to use the Idempotent Consumer EIP pattern to let Camel skip
         * already processed files. Will by default use a memory based LRUCache
         * that holds 1000 entries. If noop=true then idempotent will be enabled
         * as well to avoid consuming the same files over and over again. The
         * option will be converted to a <code>java.lang.Boolean</code> type.
         */
        public SftpConsumerBuilder idempotent(String idempotent) {
            this.properties.put("idempotent", idempotent);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To use a custom idempotent key. By default the absolute path of the
         * file is used. You can use the File Language, for example to use the
         * file name and file size, you can do:
         * idempotentKey=${file:name}-${file:size}. The option is a
         * <code>org.apache.camel.Expression</code> type.
         */
        public SftpConsumerBuilder idempotentKey(Expression idempotentKey) {
            this.properties.put("idempotentKey", idempotentKey);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To use a custom idempotent key. By default the absolute path of the
         * file is used. You can use the File Language, for example to use the
         * file name and file size, you can do:
         * idempotentKey=${file:name}-${file:size}. The option will be converted
         * to a <code>org.apache.camel.Expression</code> type.
         */
        public SftpConsumerBuilder idempotentKey(String idempotentKey) {
            this.properties.put("idempotentKey", idempotentKey);
            return (SftpConsumerBuilder) this;
        }
        /**
         * A pluggable repository org.apache.camel.spi.IdempotentRepository
         * which by default use MemoryMessageIdRepository if none is specified
         * and idempotent is true. The option is a
         * <code>org.apache.camel.spi.IdempotentRepository</code> type.
         */
        public SftpConsumerBuilder idempotentRepository(
                IdempotentRepository idempotentRepository) {
            this.properties.put("idempotentRepository", idempotentRepository);
            return (SftpConsumerBuilder) this;
        }
        /**
         * A pluggable repository org.apache.camel.spi.IdempotentRepository
         * which by default use MemoryMessageIdRepository if none is specified
         * and idempotent is true. The option will be converted to a
         * <code>org.apache.camel.spi.IdempotentRepository</code> type.
         */
        public SftpConsumerBuilder idempotentRepository(
                String idempotentRepository) {
            this.properties.put("idempotentRepository", idempotentRepository);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Is used to include files, if filename matches the regex pattern
         * (matching is case in-sensitive). Notice if you use symbols such as
         * plus sign and others you would need to configure this using the RAW()
         * syntax if configuring this as an endpoint uri. See more details at
         * configuring endpoint uris. The option is a
         * <code>java.lang.String</code> type.
         */
        public SftpConsumerBuilder include(String include) {
            this.properties.put("include", include);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The maximum depth to traverse when recursively processing a
         * directory. The option is a <code>int</code> type.
         */
        public SftpConsumerBuilder maxDepth(int maxDepth) {
            this.properties.put("maxDepth", maxDepth);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The maximum depth to traverse when recursively processing a
         * directory. The option will be converted to a <code>int</code> type.
         */
        public SftpConsumerBuilder maxDepth(String maxDepth) {
            this.properties.put("maxDepth", maxDepth);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To define a maximum messages to gather per poll. By default no
         * maximum is set. Can be used to set a limit of e.g. 1000 to avoid when
         * starting up the server that there are thousands of files. Set a value
         * of 0 or negative to disabled it. Notice: If this option is in use
         * then the File and FTP components will limit before any sorting. For
         * example if you have 100000 files and use maxMessagesPerPoll=500, then
         * only the first 500 files will be picked up, and then sorted. You can
         * use the eagerMaxMessagesPerPoll option and set this to false to allow
         * to scan all files first and then sort afterwards. The option is a
         * <code>int</code> type.
         */
        public SftpConsumerBuilder maxMessagesPerPoll(int maxMessagesPerPoll) {
            this.properties.put("maxMessagesPerPoll", maxMessagesPerPoll);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To define a maximum messages to gather per poll. By default no
         * maximum is set. Can be used to set a limit of e.g. 1000 to avoid when
         * starting up the server that there are thousands of files. Set a value
         * of 0 or negative to disabled it. Notice: If this option is in use
         * then the File and FTP components will limit before any sorting. For
         * example if you have 100000 files and use maxMessagesPerPoll=500, then
         * only the first 500 files will be picked up, and then sorted. You can
         * use the eagerMaxMessagesPerPoll option and set this to false to allow
         * to scan all files first and then sort afterwards. The option will be
         * converted to a <code>int</code> type.
         */
        public SftpConsumerBuilder maxMessagesPerPoll(String maxMessagesPerPoll) {
            this.properties.put("maxMessagesPerPoll", maxMessagesPerPoll);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The minimum depth to start processing when recursively processing a
         * directory. Using minDepth=1 means the base directory. Using
         * minDepth=2 means the first sub directory. The option is a
         * <code>int</code> type.
         */
        public SftpConsumerBuilder minDepth(int minDepth) {
            this.properties.put("minDepth", minDepth);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The minimum depth to start processing when recursively processing a
         * directory. Using minDepth=1 means the base directory. Using
         * minDepth=2 means the first sub directory. The option will be
         * converted to a <code>int</code> type.
         */
        public SftpConsumerBuilder minDepth(String minDepth) {
            this.properties.put("minDepth", minDepth);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Expression (such as Simple Language) used to dynamically set the
         * filename when moving it after processing. To move files into a .done
         * subdirectory just enter .done. The option is a
         * <code>org.apache.camel.Expression</code> type.
         */
        public SftpConsumerBuilder move(Expression move) {
            this.properties.put("move", move);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Expression (such as Simple Language) used to dynamically set the
         * filename when moving it after processing. To move files into a .done
         * subdirectory just enter .done. The option will be converted to a
         * <code>org.apache.camel.Expression</code> type.
         */
        public SftpConsumerBuilder move(String move) {
            this.properties.put("move", move);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Pluggable read-lock as a
         * org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy
         * implementation. The option is a
         * <code>org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy&lt;org.apache.camel.component.file.remote.SftpRemoteFile&gt;</code> type.
         */
        public SftpConsumerBuilder exclusiveReadLockStrategy(
                Object exclusiveReadLockStrategy) {
            this.properties.put("exclusiveReadLockStrategy", exclusiveReadLockStrategy);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Pluggable read-lock as a
         * org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy
         * implementation. The option will be converted to a
         * <code>org.apache.camel.component.file.GenericFileExclusiveReadLockStrategy&lt;org.apache.camel.component.file.remote.SftpRemoteFile&gt;</code> type.
         */
        public SftpConsumerBuilder exclusiveReadLockStrategy(
                String exclusiveReadLockStrategy) {
            this.properties.put("exclusiveReadLockStrategy", exclusiveReadLockStrategy);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Used by consumer, to only poll the files if it has exclusive
         * read-lock on the file (i.e. the file is not in-progress or being
         * written). Camel will wait until the file lock is granted. This option
         * provides the build in strategies: none - No read lock is in use
         * markerFile - Camel creates a marker file (fileName.camelLock) and
         * then holds a lock on it. This option is not available for the FTP
         * component changed - Changed is using file length/modification
         * timestamp to detect whether the file is currently being copied or
         * not. Will at least use 1 sec to determine this, so this option cannot
         * consume files as fast as the others, but can be more reliable as the
         * JDK IO API cannot always determine whether a file is currently being
         * used by another process. The option readLockCheckInterval can be used
         * to set the check frequency. fileLock - is for using
         * java.nio.channels.FileLock. This option is not avail for the FTP
         * component. This approach should be avoided when accessing a remote
         * file system via a mount/share unless that file system supports
         * distributed file locks. rename - rename is for using a try to rename
         * the file as a test if we can get exclusive read-lock. idempotent -
         * (only for file component) idempotent is for using a
         * idempotentRepository as the read-lock. This allows to use read locks
         * that supports clustering if the idempotent repository implementation
         * supports that. idempotent-changed - (only for file component)
         * idempotent-changed is for using a idempotentRepository and changed as
         * the combined read-lock. This allows to use read locks that supports
         * clustering if the idempotent repository implementation supports that.
         * idempotent-rename - (only for file component) idempotent-rename is
         * for using a idempotentRepository and rename as the combined
         * read-lock. This allows to use read locks that supports clustering if
         * the idempotent repository implementation supports that. Notice: The
         * various read locks is not all suited to work in clustered mode, where
         * concurrent consumers on different nodes is competing for the same
         * files on a shared file system. The markerFile using a close to atomic
         * operation to create the empty marker file, but its not guaranteed to
         * work in a cluster. The fileLock may work better but then the file
         * system need to support distributed file locks, and so on. Using the
         * idempotent read lock can support clustering if the idempotent
         * repository supports clustering, such as Hazelcast Component or
         * Infinispan. The option is a <code>java.lang.String</code> type.
         */
        public SftpConsumerBuilder readLock(String readLock) {
            this.properties.put("readLock", readLock);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Interval in millis for the read-lock, if supported by the read lock.
         * This interval is used for sleeping between attempts to acquire the
         * read lock. For example when using the changed read lock, you can set
         * a higher interval period to cater for slow writes. The default of 1
         * sec. may be too fast if the producer is very slow writing the file.
         * Notice: For FTP the default readLockCheckInterval is 5000. The
         * readLockTimeout value must be higher than readLockCheckInterval, but
         * a rule of thumb is to have a timeout that is at least 2 or more times
         * higher than the readLockCheckInterval. This is needed to ensure that
         * amble time is allowed for the read lock process to try to grab the
         * lock before the timeout was hit. The option is a <code>long</code>
         * type.
         */
        public SftpConsumerBuilder readLockCheckInterval(
                long readLockCheckInterval) {
            this.properties.put("readLockCheckInterval", readLockCheckInterval);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Interval in millis for the read-lock, if supported by the read lock.
         * This interval is used for sleeping between attempts to acquire the
         * read lock. For example when using the changed read lock, you can set
         * a higher interval period to cater for slow writes. The default of 1
         * sec. may be too fast if the producer is very slow writing the file.
         * Notice: For FTP the default readLockCheckInterval is 5000. The
         * readLockTimeout value must be higher than readLockCheckInterval, but
         * a rule of thumb is to have a timeout that is at least 2 or more times
         * higher than the readLockCheckInterval. This is needed to ensure that
         * amble time is allowed for the read lock process to try to grab the
         * lock before the timeout was hit. The option will be converted to a
         * <code>long</code> type.
         */
        public SftpConsumerBuilder readLockCheckInterval(
                String readLockCheckInterval) {
            this.properties.put("readLockCheckInterval", readLockCheckInterval);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether or not read lock with marker files should upon startup delete
         * any orphan read lock files, which may have been left on the file
         * system, if Camel was not properly shutdown (such as a JVM crash). If
         * turning this option to false then any orphaned lock file will cause
         * Camel to not attempt to pickup that file, this could also be due
         * another node is concurrently reading files from the same shared
         * directory. The option is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder readLockDeleteOrphanLockFiles(
                boolean readLockDeleteOrphanLockFiles) {
            this.properties.put("readLockDeleteOrphanLockFiles", readLockDeleteOrphanLockFiles);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether or not read lock with marker files should upon startup delete
         * any orphan read lock files, which may have been left on the file
         * system, if Camel was not properly shutdown (such as a JVM crash). If
         * turning this option to false then any orphaned lock file will cause
         * Camel to not attempt to pickup that file, this could also be due
         * another node is concurrently reading files from the same shared
         * directory. The option will be converted to a <code>boolean</code>
         * type.
         */
        public SftpConsumerBuilder readLockDeleteOrphanLockFiles(
                String readLockDeleteOrphanLockFiles) {
            this.properties.put("readLockDeleteOrphanLockFiles", readLockDeleteOrphanLockFiles);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether the delayed release task should be synchronous or
         * asynchronous. See more details at the readLockIdempotentReleaseDelay
         * option. The option is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder readLockIdempotentReleaseAsync(
                boolean readLockIdempotentReleaseAsync) {
            this.properties.put("readLockIdempotentReleaseAsync", readLockIdempotentReleaseAsync);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether the delayed release task should be synchronous or
         * asynchronous. See more details at the readLockIdempotentReleaseDelay
         * option. The option will be converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder readLockIdempotentReleaseAsync(
                String readLockIdempotentReleaseAsync) {
            this.properties.put("readLockIdempotentReleaseAsync", readLockIdempotentReleaseAsync);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The number of threads in the scheduled thread pool when using
         * asynchronous release tasks. Using a default of 1 core threads should
         * be sufficient in almost all use-cases, only set this to a higher
         * value if either updating the idempotent repository is slow, or there
         * are a lot of files to process. This option is not in-use if you use a
         * shared thread pool by configuring the
         * readLockIdempotentReleaseExecutorService option. See more details at
         * the readLockIdempotentReleaseDelay option. The option is a
         * <code>int</code> type.
         */
        public SftpConsumerBuilder readLockIdempotentReleaseAsyncPoolSize(
                int readLockIdempotentReleaseAsyncPoolSize) {
            this.properties.put("readLockIdempotentReleaseAsyncPoolSize", readLockIdempotentReleaseAsyncPoolSize);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The number of threads in the scheduled thread pool when using
         * asynchronous release tasks. Using a default of 1 core threads should
         * be sufficient in almost all use-cases, only set this to a higher
         * value if either updating the idempotent repository is slow, or there
         * are a lot of files to process. This option is not in-use if you use a
         * shared thread pool by configuring the
         * readLockIdempotentReleaseExecutorService option. See more details at
         * the readLockIdempotentReleaseDelay option. The option will be
         * converted to a <code>int</code> type.
         */
        public SftpConsumerBuilder readLockIdempotentReleaseAsyncPoolSize(
                String readLockIdempotentReleaseAsyncPoolSize) {
            this.properties.put("readLockIdempotentReleaseAsyncPoolSize", readLockIdempotentReleaseAsyncPoolSize);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether to delay the release task for a period of millis. This can be
         * used to delay the release tasks to expand the window when a file is
         * regarded as read-locked, in an active/active cluster scenario with a
         * shared idempotent repository, to ensure other nodes cannot
         * potentially scan and acquire the same file, due to race-conditions.
         * By expanding the time-window of the release tasks helps prevents
         * these situations. Note delaying is only needed if you have configured
         * readLockRemoveOnCommit to true. The option is a <code>int</code>
         * type.
         */
        public SftpConsumerBuilder readLockIdempotentReleaseDelay(
                int readLockIdempotentReleaseDelay) {
            this.properties.put("readLockIdempotentReleaseDelay", readLockIdempotentReleaseDelay);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether to delay the release task for a period of millis. This can be
         * used to delay the release tasks to expand the window when a file is
         * regarded as read-locked, in an active/active cluster scenario with a
         * shared idempotent repository, to ensure other nodes cannot
         * potentially scan and acquire the same file, due to race-conditions.
         * By expanding the time-window of the release tasks helps prevents
         * these situations. Note delaying is only needed if you have configured
         * readLockRemoveOnCommit to true. The option will be converted to a
         * <code>int</code> type.
         */
        public SftpConsumerBuilder readLockIdempotentReleaseDelay(
                String readLockIdempotentReleaseDelay) {
            this.properties.put("readLockIdempotentReleaseDelay", readLockIdempotentReleaseDelay);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To use a custom and shared thread pool for asynchronous release
         * tasks. See more details at the readLockIdempotentReleaseDelay option.
         * The option is a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         */
        public SftpConsumerBuilder readLockIdempotentReleaseExecutorService(
                ScheduledExecutorService readLockIdempotentReleaseExecutorService) {
            this.properties.put("readLockIdempotentReleaseExecutorService", readLockIdempotentReleaseExecutorService);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To use a custom and shared thread pool for asynchronous release
         * tasks. See more details at the readLockIdempotentReleaseDelay option.
         * The option will be converted to a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         */
        public SftpConsumerBuilder readLockIdempotentReleaseExecutorService(
                String readLockIdempotentReleaseExecutorService) {
            this.properties.put("readLockIdempotentReleaseExecutorService", readLockIdempotentReleaseExecutorService);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Logging level used when a read lock could not be acquired. By default
         * a DEBUG is logged. You can change this level, for example to OFF to
         * not have any logging. This option is only applicable for readLock of
         * types: changed, fileLock, idempotent, idempotent-changed,
         * idempotent-rename, rename. The option is a
         * <code>org.apache.camel.LoggingLevel</code> type.
         */
        public SftpConsumerBuilder readLockLoggingLevel(
                LoggingLevel readLockLoggingLevel) {
            this.properties.put("readLockLoggingLevel", readLockLoggingLevel);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Logging level used when a read lock could not be acquired. By default
         * a DEBUG is logged. You can change this level, for example to OFF to
         * not have any logging. This option is only applicable for readLock of
         * types: changed, fileLock, idempotent, idempotent-changed,
         * idempotent-rename, rename. The option will be converted to a
         * <code>org.apache.camel.LoggingLevel</code> type.
         */
        public SftpConsumerBuilder readLockLoggingLevel(
                String readLockLoggingLevel) {
            this.properties.put("readLockLoggingLevel", readLockLoggingLevel);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether to use marker file with the changed, rename, or exclusive
         * read lock types. By default a marker file is used as well to guard
         * against other processes picking up the same files. This behavior can
         * be turned off by setting this option to false. For example if you do
         * not want to write marker files to the file systems by the Camel
         * application. The option is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder readLockMarkerFile(boolean readLockMarkerFile) {
            this.properties.put("readLockMarkerFile", readLockMarkerFile);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether to use marker file with the changed, rename, or exclusive
         * read lock types. By default a marker file is used as well to guard
         * against other processes picking up the same files. This behavior can
         * be turned off by setting this option to false. For example if you do
         * not want to write marker files to the file systems by the Camel
         * application. The option will be converted to a <code>boolean</code>
         * type.
         */
        public SftpConsumerBuilder readLockMarkerFile(String readLockMarkerFile) {
            this.properties.put("readLockMarkerFile", readLockMarkerFile);
            return (SftpConsumerBuilder) this;
        }
        /**
         * This option is applied only for readLock=changed. It allows to
         * specify a minimum age the file must be before attempting to acquire
         * the read lock. For example use readLockMinAge=300s to require the
         * file is at last 5 minutes old. This can speedup the changed read lock
         * as it will only attempt to acquire files which are at least that
         * given age. The option is a <code>long</code> type.
         */
        public SftpConsumerBuilder readLockMinAge(long readLockMinAge) {
            this.properties.put("readLockMinAge", readLockMinAge);
            return (SftpConsumerBuilder) this;
        }
        /**
         * This option is applied only for readLock=changed. It allows to
         * specify a minimum age the file must be before attempting to acquire
         * the read lock. For example use readLockMinAge=300s to require the
         * file is at last 5 minutes old. This can speedup the changed read lock
         * as it will only attempt to acquire files which are at least that
         * given age. The option will be converted to a <code>long</code> type.
         */
        public SftpConsumerBuilder readLockMinAge(String readLockMinAge) {
            this.properties.put("readLockMinAge", readLockMinAge);
            return (SftpConsumerBuilder) this;
        }
        /**
         * This option is applied only for readLock=changed. It allows you to
         * configure a minimum file length. By default Camel expects the file to
         * contain data, and thus the default value is 1. You can set this
         * option to zero, to allow consuming zero-length files. The option is a
         * <code>long</code> type.
         */
        public SftpConsumerBuilder readLockMinLength(long readLockMinLength) {
            this.properties.put("readLockMinLength", readLockMinLength);
            return (SftpConsumerBuilder) this;
        }
        /**
         * This option is applied only for readLock=changed. It allows you to
         * configure a minimum file length. By default Camel expects the file to
         * contain data, and thus the default value is 1. You can set this
         * option to zero, to allow consuming zero-length files. The option will
         * be converted to a <code>long</code> type.
         */
        public SftpConsumerBuilder readLockMinLength(String readLockMinLength) {
            this.properties.put("readLockMinLength", readLockMinLength);
            return (SftpConsumerBuilder) this;
        }
        /**
         * This option is applied only for readLock=idempotent. It allows to
         * specify whether to remove the file name entry from the idempotent
         * repository when processing the file is succeeded and a commit
         * happens. By default the file is not removed which ensures that any
         * race-condition do not occur so another active node may attempt to
         * grab the file. Instead the idempotent repository may support eviction
         * strategies that you can configure to evict the file name entry after
         * X minutes - this ensures no problems with race conditions. See more
         * details at the readLockIdempotentReleaseDelay option. The option is a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder readLockRemoveOnCommit(
                boolean readLockRemoveOnCommit) {
            this.properties.put("readLockRemoveOnCommit", readLockRemoveOnCommit);
            return (SftpConsumerBuilder) this;
        }
        /**
         * This option is applied only for readLock=idempotent. It allows to
         * specify whether to remove the file name entry from the idempotent
         * repository when processing the file is succeeded and a commit
         * happens. By default the file is not removed which ensures that any
         * race-condition do not occur so another active node may attempt to
         * grab the file. Instead the idempotent repository may support eviction
         * strategies that you can configure to evict the file name entry after
         * X minutes - this ensures no problems with race conditions. See more
         * details at the readLockIdempotentReleaseDelay option. The option will
         * be converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder readLockRemoveOnCommit(
                String readLockRemoveOnCommit) {
            this.properties.put("readLockRemoveOnCommit", readLockRemoveOnCommit);
            return (SftpConsumerBuilder) this;
        }
        /**
         * This option is applied only for readLock=idempotent. It allows to
         * specify whether to remove the file name entry from the idempotent
         * repository when processing the file failed and a rollback happens. If
         * this option is false, then the file name entry is confirmed (as if
         * the file did a commit). The option is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder readLockRemoveOnRollback(
                boolean readLockRemoveOnRollback) {
            this.properties.put("readLockRemoveOnRollback", readLockRemoveOnRollback);
            return (SftpConsumerBuilder) this;
        }
        /**
         * This option is applied only for readLock=idempotent. It allows to
         * specify whether to remove the file name entry from the idempotent
         * repository when processing the file failed and a rollback happens. If
         * this option is false, then the file name entry is confirmed (as if
         * the file did a commit). The option will be converted to a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder readLockRemoveOnRollback(
                String readLockRemoveOnRollback) {
            this.properties.put("readLockRemoveOnRollback", readLockRemoveOnRollback);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Optional timeout in millis for the read-lock, if supported by the
         * read-lock. If the read-lock could not be granted and the timeout
         * triggered, then Camel will skip the file. At next poll Camel, will
         * try the file again, and this time maybe the read-lock could be
         * granted. Use a value of 0 or lower to indicate forever. Currently
         * fileLock, changed and rename support the timeout. Notice: For FTP the
         * default readLockTimeout value is 20000 instead of 10000. The
         * readLockTimeout value must be higher than readLockCheckInterval, but
         * a rule of thumb is to have a timeout that is at least 2 or more times
         * higher than the readLockCheckInterval. This is needed to ensure that
         * amble time is allowed for the read lock process to try to grab the
         * lock before the timeout was hit. The option is a <code>long</code>
         * type.
         */
        public SftpConsumerBuilder readLockTimeout(long readLockTimeout) {
            this.properties.put("readLockTimeout", readLockTimeout);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Optional timeout in millis for the read-lock, if supported by the
         * read-lock. If the read-lock could not be granted and the timeout
         * triggered, then Camel will skip the file. At next poll Camel, will
         * try the file again, and this time maybe the read-lock could be
         * granted. Use a value of 0 or lower to indicate forever. Currently
         * fileLock, changed and rename support the timeout. Notice: For FTP the
         * default readLockTimeout value is 20000 instead of 10000. The
         * readLockTimeout value must be higher than readLockCheckInterval, but
         * a rule of thumb is to have a timeout that is at least 2 or more times
         * higher than the readLockCheckInterval. This is needed to ensure that
         * amble time is allowed for the read lock process to try to grab the
         * lock before the timeout was hit. The option will be converted to a
         * <code>long</code> type.
         */
        public SftpConsumerBuilder readLockTimeout(String readLockTimeout) {
            this.properties.put("readLockTimeout", readLockTimeout);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * is a <code>int</code> type.
         */
        public SftpConsumerBuilder backoffErrorThreshold(
                int backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * will be converted to a <code>int</code> type.
         */
        public SftpConsumerBuilder backoffErrorThreshold(
                String backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option is a <code>int</code>
         * type.
         */
        public SftpConsumerBuilder backoffIdleThreshold(int backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option will be converted to a
         * <code>int</code> type.
         */
        public SftpConsumerBuilder backoffIdleThreshold(
                String backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option is a <code>int</code> type.
         */
        public SftpConsumerBuilder backoffMultiplier(int backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option will be converted to a <code>int</code> type.
         */
        public SftpConsumerBuilder backoffMultiplier(String backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a <code>long</code> type.
         */
        public SftpConsumerBuilder delay(long delay) {
            this.properties.put("delay", delay);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option will be converted to a
         * <code>long</code> type.
         */
        public SftpConsumerBuilder delay(String delay) {
            this.properties.put("delay", delay);
            return (SftpConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option is a <code>boolean</code> type.
         */
        public SftpConsumerBuilder greedy(boolean greedy) {
            this.properties.put("greedy", greedy);
            return (SftpConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option will be converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder greedy(String greedy) {
            this.properties.put("greedy", greedy);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a <code>long</code> type.
         */
        public SftpConsumerBuilder initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option will be converted to a
         * <code>long</code> type.
         */
        public SftpConsumerBuilder initialDelay(String initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * is a <code>org.apache.camel.LoggingLevel</code> type.
         */
        public SftpConsumerBuilder runLoggingLevel(LoggingLevel runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (SftpConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * will be converted to a <code>org.apache.camel.LoggingLevel</code>
         * type.
         */
        public SftpConsumerBuilder runLoggingLevel(String runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option is a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         */
        public SftpConsumerBuilder scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option will be converted to a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         */
        public SftpConsumerBuilder scheduledExecutorService(
                String scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option is a
         * <code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>
         * type.
         */
        public SftpConsumerBuilder scheduler(
                ScheduledPollConsumerScheduler scheduler) {
            this.properties.put("scheduler", scheduler);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option will be converted to a
         * <code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>
         * type.
         */
        public SftpConsumerBuilder scheduler(String scheduler) {
            this.properties.put("scheduler", scheduler);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option is a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         */
        public SftpConsumerBuilder schedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option will be
         * converted to a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         */
        public SftpConsumerBuilder schedulerProperties(
                String schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started. The option is a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder startScheduler(boolean startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started. The option will be
         * converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder startScheduler(String startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option is a
         * <code>java.util.concurrent.TimeUnit</code> type.
         */
        public SftpConsumerBuilder timeUnit(TimeUnit timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option will be
         * converted to a <code>java.util.concurrent.TimeUnit</code> type.
         */
        public SftpConsumerBuilder timeUnit(String timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option is a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder useFixedDelay(boolean useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option will be
         * converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder useFixedDelay(String useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To shuffle the list of files (sort in random order). The option is a
         * <code>boolean</code> type.
         */
        public SftpConsumerBuilder shuffle(boolean shuffle) {
            this.properties.put("shuffle", shuffle);
            return (SftpConsumerBuilder) this;
        }
        /**
         * To shuffle the list of files (sort in random order). The option will
         * be converted to a <code>boolean</code> type.
         */
        public SftpConsumerBuilder shuffle(String shuffle) {
            this.properties.put("shuffle", shuffle);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Built-in sort by using the File Language. Supports nested sorts, so
         * you can have a sort by file name and as a 2nd group sort by modified
         * date. The option is a
         * <code>java.util.Comparator&lt;org.apache.camel.Exchange&gt;</code>
         * type.
         */
        public SftpConsumerBuilder sortBy(Comparator<Exchange> sortBy) {
            this.properties.put("sortBy", sortBy);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Built-in sort by using the File Language. Supports nested sorts, so
         * you can have a sort by file name and as a 2nd group sort by modified
         * date. The option will be converted to a
         * <code>java.util.Comparator&lt;org.apache.camel.Exchange&gt;</code>
         * type.
         */
        public SftpConsumerBuilder sortBy(String sortBy) {
            this.properties.put("sortBy", sortBy);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Pluggable sorter as a java.util.Comparator class. The option is a
         * <code>java.util.Comparator&lt;org.apache.camel.component.file.GenericFile&lt;org.apache.camel.component.file.remote.SftpRemoteFile&gt;&gt;</code> type.
         */
        public SftpConsumerBuilder sorter(Comparator<Object> sorter) {
            this.properties.put("sorter", sorter);
            return (SftpConsumerBuilder) this;
        }
        /**
         * Pluggable sorter as a java.util.Comparator class. The option will be
         * converted to a
         * <code>java.util.Comparator&lt;org.apache.camel.component.file.GenericFile&lt;org.apache.camel.component.file.remote.SftpRemoteFile&gt;&gt;</code> type.
         */
        public SftpConsumerBuilder sorter(String sorter) {
            this.properties.put("sorter", sorter);
            return (SftpConsumerBuilder) this;
        }
    }

    /**
     * Builder for endpoint producers for the SFTP component.
     */
    public static class SftpProducerBuilder
            extends
                SftpCommonBuilder<SftpProducerBuilder>
            implements
                EndpointProducerBuilder {
        public SftpProducerBuilder(String path) {
            super(path);
        }
        /**
         * What to do if a file already exists with the same name. Override,
         * which is the default, replaces the existing file. Append - adds
         * content to the existing file. Fail - throws a
         * GenericFileOperationException, indicating that there is already an
         * existing file. Ignore - silently ignores the problem and does not
         * override the existing file, but assumes everything is okay. Move -
         * option requires to use the moveExisting option to be configured as
         * well. The option eagerDeleteTargetFile can be used to control what to
         * do if an moving the file, and there exists already an existing file,
         * otherwise causing the move operation to fail. The Move option will
         * move any existing files, before writing the target file. TryRename is
         * only applicable if tempFileName option is in use. This allows to try
         * renaming the file from the temporary name to the actual name, without
         * doing any exists check. This check may be faster on some file systems
         * and especially FTP servers. The option is a
         * <code>org.apache.camel.component.file.GenericFileExist</code> type.
         */
        public SftpProducerBuilder fileExist(GenericFileExist fileExist) {
            this.properties.put("fileExist", fileExist);
            return (SftpProducerBuilder) this;
        }
        /**
         * What to do if a file already exists with the same name. Override,
         * which is the default, replaces the existing file. Append - adds
         * content to the existing file. Fail - throws a
         * GenericFileOperationException, indicating that there is already an
         * existing file. Ignore - silently ignores the problem and does not
         * override the existing file, but assumes everything is okay. Move -
         * option requires to use the moveExisting option to be configured as
         * well. The option eagerDeleteTargetFile can be used to control what to
         * do if an moving the file, and there exists already an existing file,
         * otherwise causing the move operation to fail. The Move option will
         * move any existing files, before writing the target file. TryRename is
         * only applicable if tempFileName option is in use. This allows to try
         * renaming the file from the temporary name to the actual name, without
         * doing any exists check. This check may be faster on some file systems
         * and especially FTP servers. The option will be converted to a
         * <code>org.apache.camel.component.file.GenericFileExist</code> type.
         */
        public SftpProducerBuilder fileExist(String fileExist) {
            this.properties.put("fileExist", fileExist);
            return (SftpProducerBuilder) this;
        }
        /**
         * Flatten is used to flatten the file name path to strip any leading
         * paths, so it's just the file name. This allows you to consume
         * recursively into sub-directories, but when you eg write the files to
         * another directory they will be written in a single directory. Setting
         * this to true on the producer enforces that any file name in
         * CamelFileName header will be stripped for any leading paths. The
         * option is a <code>boolean</code> type.
         */
        public SftpProducerBuilder flatten(boolean flatten) {
            this.properties.put("flatten", flatten);
            return (SftpProducerBuilder) this;
        }
        /**
         * Flatten is used to flatten the file name path to strip any leading
         * paths, so it's just the file name. This allows you to consume
         * recursively into sub-directories, but when you eg write the files to
         * another directory they will be written in a single directory. Setting
         * this to true on the producer enforces that any file name in
         * CamelFileName header will be stripped for any leading paths. The
         * option will be converted to a <code>boolean</code> type.
         */
        public SftpProducerBuilder flatten(String flatten) {
            this.properties.put("flatten", flatten);
            return (SftpProducerBuilder) this;
        }
        /**
         * Used for jailing (restricting) writing files to the starting
         * directory (and sub) only. This is enabled by default to not allow
         * Camel to write files to outside directories (to be more secured out
         * of the box). You can turn this off to allow writing files to
         * directories outside the starting directory, such as parent or root
         * folders. The option is a <code>boolean</code> type.
         */
        public SftpProducerBuilder jailStartingDirectory(
                boolean jailStartingDirectory) {
            this.properties.put("jailStartingDirectory", jailStartingDirectory);
            return (SftpProducerBuilder) this;
        }
        /**
         * Used for jailing (restricting) writing files to the starting
         * directory (and sub) only. This is enabled by default to not allow
         * Camel to write files to outside directories (to be more secured out
         * of the box). You can turn this off to allow writing files to
         * directories outside the starting directory, such as parent or root
         * folders. The option will be converted to a <code>boolean</code> type.
         */
        public SftpProducerBuilder jailStartingDirectory(
                String jailStartingDirectory) {
            this.properties.put("jailStartingDirectory", jailStartingDirectory);
            return (SftpProducerBuilder) this;
        }
        /**
         * Expression (such as File Language) used to compute file name to use
         * when fileExist=Move is configured. To move files into a backup
         * subdirectory just enter backup. This option only supports the
         * following File Language tokens: file:name, file:name.ext,
         * file:name.noext, file:onlyname, file:onlyname.noext, file:ext, and
         * file:parent. Notice the file:parent is not supported by the FTP
         * component, as the FTP component can only move any existing files to a
         * relative directory based on current dir as base. The option is a
         * <code>org.apache.camel.Expression</code> type.
         */
        public SftpProducerBuilder moveExisting(Expression moveExisting) {
            this.properties.put("moveExisting", moveExisting);
            return (SftpProducerBuilder) this;
        }
        /**
         * Expression (such as File Language) used to compute file name to use
         * when fileExist=Move is configured. To move files into a backup
         * subdirectory just enter backup. This option only supports the
         * following File Language tokens: file:name, file:name.ext,
         * file:name.noext, file:onlyname, file:onlyname.noext, file:ext, and
         * file:parent. Notice the file:parent is not supported by the FTP
         * component, as the FTP component can only move any existing files to a
         * relative directory based on current dir as base. The option will be
         * converted to a <code>org.apache.camel.Expression</code> type.
         */
        public SftpProducerBuilder moveExisting(String moveExisting) {
            this.properties.put("moveExisting", moveExisting);
            return (SftpProducerBuilder) this;
        }
        /**
         * The same as tempPrefix option but offering a more fine grained
         * control on the naming of the temporary filename as it uses the File
         * Language. The location for tempFilename is relative to the final file
         * location in the option 'fileName', not the target directory in the
         * base uri. For example if option fileName includes a directory prefix:
         * dir/finalFilename then tempFileName is relative to that subdirectory
         * dir. The option is a <code>org.apache.camel.Expression</code> type.
         */
        public SftpProducerBuilder tempFileName(Expression tempFileName) {
            this.properties.put("tempFileName", tempFileName);
            return (SftpProducerBuilder) this;
        }
        /**
         * The same as tempPrefix option but offering a more fine grained
         * control on the naming of the temporary filename as it uses the File
         * Language. The location for tempFilename is relative to the final file
         * location in the option 'fileName', not the target directory in the
         * base uri. For example if option fileName includes a directory prefix:
         * dir/finalFilename then tempFileName is relative to that subdirectory
         * dir. The option will be converted to a
         * <code>org.apache.camel.Expression</code> type.
         */
        public SftpProducerBuilder tempFileName(String tempFileName) {
            this.properties.put("tempFileName", tempFileName);
            return (SftpProducerBuilder) this;
        }
        /**
         * This option is used to write the file using a temporary name and
         * then, after the write is complete, rename it to the real name. Can be
         * used to identify files being written and also avoid consumers (not
         * using exclusive read locks) reading in progress files. Is often used
         * by FTP when uploading big files. The option is a
         * <code>java.lang.String</code> type.
         */
        public SftpProducerBuilder tempPrefix(String tempPrefix) {
            this.properties.put("tempPrefix", tempPrefix);
            return (SftpProducerBuilder) this;
        }
        /**
         * Used to specify if a null body is allowed during file writing. If set
         * to true then an empty file will be created, when set to false, and
         * attempting to send a null body to the file component, a
         * GenericFileWriteException of 'Cannot write null body to file.' will
         * be thrown. If the fileExist option is set to 'Override', then the
         * file will be truncated, and if set to append the file will remain
         * unchanged. The option is a <code>boolean</code> type.
         */
        public SftpProducerBuilder allowNullBody(boolean allowNullBody) {
            this.properties.put("allowNullBody", allowNullBody);
            return (SftpProducerBuilder) this;
        }
        /**
         * Used to specify if a null body is allowed during file writing. If set
         * to true then an empty file will be created, when set to false, and
         * attempting to send a null body to the file component, a
         * GenericFileWriteException of 'Cannot write null body to file.' will
         * be thrown. If the fileExist option is set to 'Override', then the
         * file will be truncated, and if set to append the file will remain
         * unchanged. The option will be converted to a <code>boolean</code>
         * type.
         */
        public SftpProducerBuilder allowNullBody(String allowNullBody) {
            this.properties.put("allowNullBody", allowNullBody);
            return (SftpProducerBuilder) this;
        }
        /**
         * Allows you to set chmod on the stored file. For example chmod=640.
         * The option is a <code>java.lang.String</code> type.
         */
        public SftpProducerBuilder chmod(String chmod) {
            this.properties.put("chmod", chmod);
            return (SftpProducerBuilder) this;
        }
        /**
         * Whether or not to disconnect from remote FTP server right after a
         * Batch upload is complete. disconnectOnBatchComplete will only
         * disconnect the current connection to the FTP server. The option is a
         * <code>boolean</code> type.
         */
        public SftpProducerBuilder disconnectOnBatchComplete(
                boolean disconnectOnBatchComplete) {
            this.properties.put("disconnectOnBatchComplete", disconnectOnBatchComplete);
            return (SftpProducerBuilder) this;
        }
        /**
         * Whether or not to disconnect from remote FTP server right after a
         * Batch upload is complete. disconnectOnBatchComplete will only
         * disconnect the current connection to the FTP server. The option will
         * be converted to a <code>boolean</code> type.
         */
        public SftpProducerBuilder disconnectOnBatchComplete(
                String disconnectOnBatchComplete) {
            this.properties.put("disconnectOnBatchComplete", disconnectOnBatchComplete);
            return (SftpProducerBuilder) this;
        }
        /**
         * Whether or not to eagerly delete any existing target file. This
         * option only applies when you use fileExists=Override and the
         * tempFileName option as well. You can use this to disable (set it to
         * false) deleting the target file before the temp file is written. For
         * example you may write big files and want the target file to exists
         * during the temp file is being written. This ensure the target file is
         * only deleted until the very last moment, just before the temp file is
         * being renamed to the target filename. This option is also used to
         * control whether to delete any existing files when fileExist=Move is
         * enabled, and an existing file exists. If this option
         * copyAndDeleteOnRenameFails false, then an exception will be thrown if
         * an existing file existed, if its true, then the existing file is
         * deleted before the move operation. The option is a
         * <code>boolean</code> type.
         */
        public SftpProducerBuilder eagerDeleteTargetFile(
                boolean eagerDeleteTargetFile) {
            this.properties.put("eagerDeleteTargetFile", eagerDeleteTargetFile);
            return (SftpProducerBuilder) this;
        }
        /**
         * Whether or not to eagerly delete any existing target file. This
         * option only applies when you use fileExists=Override and the
         * tempFileName option as well. You can use this to disable (set it to
         * false) deleting the target file before the temp file is written. For
         * example you may write big files and want the target file to exists
         * during the temp file is being written. This ensure the target file is
         * only deleted until the very last moment, just before the temp file is
         * being renamed to the target filename. This option is also used to
         * control whether to delete any existing files when fileExist=Move is
         * enabled, and an existing file exists. If this option
         * copyAndDeleteOnRenameFails false, then an exception will be thrown if
         * an existing file existed, if its true, then the existing file is
         * deleted before the move operation. The option will be converted to a
         * <code>boolean</code> type.
         */
        public SftpProducerBuilder eagerDeleteTargetFile(
                String eagerDeleteTargetFile) {
            this.properties.put("eagerDeleteTargetFile", eagerDeleteTargetFile);
            return (SftpProducerBuilder) this;
        }
        /**
         * Will keep the last modified timestamp from the source file (if any).
         * Will use the Exchange.FILE_LAST_MODIFIED header to located the
         * timestamp. This header can contain either a java.util.Date or long
         * with the timestamp. If the timestamp exists and the option is enabled
         * it will set this timestamp on the written file. Note: This option
         * only applies to the file producer. You cannot use this option with
         * any of the ftp producers. The option is a <code>boolean</code> type.
         */
        public SftpProducerBuilder keepLastModified(boolean keepLastModified) {
            this.properties.put("keepLastModified", keepLastModified);
            return (SftpProducerBuilder) this;
        }
        /**
         * Will keep the last modified timestamp from the source file (if any).
         * Will use the Exchange.FILE_LAST_MODIFIED header to located the
         * timestamp. This header can contain either a java.util.Date or long
         * with the timestamp. If the timestamp exists and the option is enabled
         * it will set this timestamp on the written file. Note: This option
         * only applies to the file producer. You cannot use this option with
         * any of the ftp producers. The option will be converted to a
         * <code>boolean</code> type.
         */
        public SftpProducerBuilder keepLastModified(String keepLastModified) {
            this.properties.put("keepLastModified", keepLastModified);
            return (SftpProducerBuilder) this;
        }
        /**
         * Strategy (Custom Strategy) used to move file with special naming
         * token to use when fileExist=Move is configured. By default, there is
         * an implementation used if no custom strategy is provided. The option
         * is a
         * <code>org.apache.camel.component.file.strategy.FileMoveExistingStrategy</code> type.
         */
        public SftpProducerBuilder moveExistingFileStrategy(
                Object moveExistingFileStrategy) {
            this.properties.put("moveExistingFileStrategy", moveExistingFileStrategy);
            return (SftpProducerBuilder) this;
        }
        /**
         * Strategy (Custom Strategy) used to move file with special naming
         * token to use when fileExist=Move is configured. By default, there is
         * an implementation used if no custom strategy is provided. The option
         * will be converted to a
         * <code>org.apache.camel.component.file.strategy.FileMoveExistingStrategy</code> type.
         */
        public SftpProducerBuilder moveExistingFileStrategy(
                String moveExistingFileStrategy) {
            this.properties.put("moveExistingFileStrategy", moveExistingFileStrategy);
            return (SftpProducerBuilder) this;
        }
        /**
         * Whether to send a noop command as a pre-write check before uploading
         * files to the FTP server. This is enabled by default as a validation
         * of the connection is still valid, which allows to silently re-connect
         * to be able to upload the file. However if this causes problems, you
         * can turn this option off. The option is a <code>boolean</code> type.
         */
        public SftpProducerBuilder sendNoop(boolean sendNoop) {
            this.properties.put("sendNoop", sendNoop);
            return (SftpProducerBuilder) this;
        }
        /**
         * Whether to send a noop command as a pre-write check before uploading
         * files to the FTP server. This is enabled by default as a validation
         * of the connection is still valid, which allows to silently re-connect
         * to be able to upload the file. However if this causes problems, you
         * can turn this option off. The option will be converted to a
         * <code>boolean</code> type.
         */
        public SftpProducerBuilder sendNoop(String sendNoop) {
            this.properties.put("sendNoop", sendNoop);
            return (SftpProducerBuilder) this;
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.file.remote.RemoteFileConfiguration$PathSeparator</code> enum.
     */
    public static enum PathSeparator {
        UNIX, Windows, Auto;
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.file.GenericFileExist</code> enum.
     */
    public static enum GenericFileExist {
        Override, Append, Fail, Ignore, Move, TryRename;
    }
    /**
     * The sftp (FTP over SSH) component is used for uploading or downloading
     * files from SFTP servers. Creates a builder to build a consumer endpoint
     * for the SFTP component.
     */
    public default SftpConsumerBuilder fromSftp(String path) {
        return new SftpConsumerBuilder(path);
    }
    /**
     * The sftp (FTP over SSH) component is used for uploading or downloading
     * files from SFTP servers. Creates a builder to build a producer endpoint
     * for the SFTP component.
     */
    public default SftpProducerBuilder toSftp(String path) {
        return new SftpProducerBuilder(path);
    }
}