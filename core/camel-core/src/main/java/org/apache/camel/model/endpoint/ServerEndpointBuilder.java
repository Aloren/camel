/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.TimeZone;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * IEC 60870 component used for telecontrol (supervisory control and data
 * acquisition) such as controlling electric power transmission grids and other
 * geographically widespread control systems.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface ServerEndpointBuilder {


    public static class ServerCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        ServerCommonBuilder(String path) {
            super("iec60870-server", path);
        }
        /**
         * The object information address. The option is a
         * <code>org.apache.camel.component.iec60870.ObjectAddress</code> type.
         */
        public T uriPath(Object uriPath) {
            this.properties.put("uriPath", uriPath);
            return (T) this;
        }
        /**
         * The object information address. The option will be converted to a
         * <code>org.apache.camel.component.iec60870.ObjectAddress</code> type.
         */
        public T uriPath(String uriPath) {
            this.properties.put("uriPath", uriPath);
            return (T) this;
        }
        /**
         * Data module options. The option is a
         * <code>org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions</code> type.
         */
        public T dataModuleOptions(Object dataModuleOptions) {
            this.properties.put("dataModuleOptions", dataModuleOptions);
            return (T) this;
        }
        /**
         * Data module options. The option will be converted to a
         * <code>org.eclipse.neoscada.protocol.iec60870.client.data.DataModuleOptions</code> type.
         */
        public T dataModuleOptions(String dataModuleOptions) {
            this.properties.put("dataModuleOptions", dataModuleOptions);
            return (T) this;
        }
        /**
         * Filter out all requests which don't have the execute bit set. The
         * option is a <code>boolean</code> type.
         */
        public T filterNonExecute(boolean filterNonExecute) {
            this.properties.put("filterNonExecute", filterNonExecute);
            return (T) this;
        }
        /**
         * Filter out all requests which don't have the execute bit set. The
         * option will be converted to a <code>boolean</code> type.
         */
        public T filterNonExecute(String filterNonExecute) {
            this.properties.put("filterNonExecute", filterNonExecute);
            return (T) this;
        }
        /**
         * Protocol options. The option is a
         * <code>org.eclipse.neoscada.protocol.iec60870.ProtocolOptions</code>
         * type.
         */
        public T protocolOptions(Object protocolOptions) {
            this.properties.put("protocolOptions", protocolOptions);
            return (T) this;
        }
        /**
         * Protocol options. The option will be converted to a
         * <code>org.eclipse.neoscada.protocol.iec60870.ProtocolOptions</code>
         * type.
         */
        public T protocolOptions(String protocolOptions) {
            this.properties.put("protocolOptions", protocolOptions);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Parameter W - Acknowledgment window. The option is a
         * <code>short</code> type.
         */
        public T acknowledgeWindow(short acknowledgeWindow) {
            this.properties.put("acknowledgeWindow", acknowledgeWindow);
            return (T) this;
        }
        /**
         * Parameter W - Acknowledgment window. The option will be converted to
         * a <code>short</code> type.
         */
        public T acknowledgeWindow(String acknowledgeWindow) {
            this.properties.put("acknowledgeWindow", acknowledgeWindow);
            return (T) this;
        }
        /**
         * The common ASDU address size. May be either SIZE_1 or SIZE_2. The
         * option is a
         * <code>org.eclipse.neoscada.protocol.iec60870.ASDUAddressType</code>
         * type.
         */
        public T adsuAddressType(ASDUAddressType adsuAddressType) {
            this.properties.put("adsuAddressType", adsuAddressType);
            return (T) this;
        }
        /**
         * The common ASDU address size. May be either SIZE_1 or SIZE_2. The
         * option will be converted to a
         * <code>org.eclipse.neoscada.protocol.iec60870.ASDUAddressType</code>
         * type.
         */
        public T adsuAddressType(String adsuAddressType) {
            this.properties.put("adsuAddressType", adsuAddressType);
            return (T) this;
        }
        /**
         * The cause of transmission type. May be either SIZE_1 or SIZE_2. The
         * option is a
         * <code>org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType</code> type.
         */
        public T causeOfTransmissionType(
                CauseOfTransmissionType causeOfTransmissionType) {
            this.properties.put("causeOfTransmissionType", causeOfTransmissionType);
            return (T) this;
        }
        /**
         * The cause of transmission type. May be either SIZE_1 or SIZE_2. The
         * option will be converted to a
         * <code>org.eclipse.neoscada.protocol.iec60870.CauseOfTransmissionType</code> type.
         */
        public T causeOfTransmissionType(String causeOfTransmissionType) {
            this.properties.put("causeOfTransmissionType", causeOfTransmissionType);
            return (T) this;
        }
        /**
         * The information address size. May be either SIZE_1, SIZE_2 or SIZE_3.
         * The option is a
         * <code>org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType</code> type.
         */
        public T informationObjectAddressType(
                InformationObjectAddressType informationObjectAddressType) {
            this.properties.put("informationObjectAddressType", informationObjectAddressType);
            return (T) this;
        }
        /**
         * The information address size. May be either SIZE_1, SIZE_2 or SIZE_3.
         * The option will be converted to a
         * <code>org.eclipse.neoscada.protocol.iec60870.InformationObjectAddressType</code> type.
         */
        public T informationObjectAddressType(
                String informationObjectAddressType) {
            this.properties.put("informationObjectAddressType", informationObjectAddressType);
            return (T) this;
        }
        /**
         * Parameter K - Maximum number of un-acknowledged messages. The option
         * is a <code>short</code> type.
         */
        public T maxUnacknowledged(short maxUnacknowledged) {
            this.properties.put("maxUnacknowledged", maxUnacknowledged);
            return (T) this;
        }
        /**
         * Parameter K - Maximum number of un-acknowledged messages. The option
         * will be converted to a <code>short</code> type.
         */
        public T maxUnacknowledged(String maxUnacknowledged) {
            this.properties.put("maxUnacknowledged", maxUnacknowledged);
            return (T) this;
        }
        /**
         * Timeout T1 in milliseconds. The option is a <code>int</code> type.
         */
        public T timeout1(int timeout1) {
            this.properties.put("timeout1", timeout1);
            return (T) this;
        }
        /**
         * Timeout T1 in milliseconds. The option will be converted to a
         * <code>int</code> type.
         */
        public T timeout1(String timeout1) {
            this.properties.put("timeout1", timeout1);
            return (T) this;
        }
        /**
         * Timeout T2 in milliseconds. The option is a <code>int</code> type.
         */
        public T timeout2(int timeout2) {
            this.properties.put("timeout2", timeout2);
            return (T) this;
        }
        /**
         * Timeout T2 in milliseconds. The option will be converted to a
         * <code>int</code> type.
         */
        public T timeout2(String timeout2) {
            this.properties.put("timeout2", timeout2);
            return (T) this;
        }
        /**
         * Timeout T3 in milliseconds. The option is a <code>int</code> type.
         */
        public T timeout3(int timeout3) {
            this.properties.put("timeout3", timeout3);
            return (T) this;
        }
        /**
         * Timeout T3 in milliseconds. The option will be converted to a
         * <code>int</code> type.
         */
        public T timeout3(String timeout3) {
            this.properties.put("timeout3", timeout3);
            return (T) this;
        }
        /**
         * Whether to include the source address. The option is a
         * <code>boolean</code> type.
         */
        public T causeSourceAddress(boolean causeSourceAddress) {
            this.properties.put("causeSourceAddress", causeSourceAddress);
            return (T) this;
        }
        /**
         * Whether to include the source address. The option will be converted
         * to a <code>boolean</code> type.
         */
        public T causeSourceAddress(String causeSourceAddress) {
            this.properties.put("causeSourceAddress", causeSourceAddress);
            return (T) this;
        }
        /**
         * Whether background scan transmissions should be ignored. The option
         * is a <code>boolean</code> type.
         */
        public T ignoreBackgroundScan(boolean ignoreBackgroundScan) {
            this.properties.put("ignoreBackgroundScan", ignoreBackgroundScan);
            return (T) this;
        }
        /**
         * Whether background scan transmissions should be ignored. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T ignoreBackgroundScan(String ignoreBackgroundScan) {
            this.properties.put("ignoreBackgroundScan", ignoreBackgroundScan);
            return (T) this;
        }
        /**
         * Whether to ignore or respect DST. The option is a
         * <code>boolean</code> type.
         */
        public T ignoreDaylightSavingTime(boolean ignoreDaylightSavingTime) {
            this.properties.put("ignoreDaylightSavingTime", ignoreDaylightSavingTime);
            return (T) this;
        }
        /**
         * Whether to ignore or respect DST. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T ignoreDaylightSavingTime(String ignoreDaylightSavingTime) {
            this.properties.put("ignoreDaylightSavingTime", ignoreDaylightSavingTime);
            return (T) this;
        }
        /**
         * The timezone to use. May be any Java time zone string. The option is
         * a <code>java.util.TimeZone</code> type.
         */
        public T timeZone(TimeZone timeZone) {
            this.properties.put("timeZone", timeZone);
            return (T) this;
        }
        /**
         * The timezone to use. May be any Java time zone string. The option
         * will be converted to a <code>java.util.TimeZone</code> type.
         */
        public T timeZone(String timeZone) {
            this.properties.put("timeZone", timeZone);
            return (T) this;
        }
        /**
         * An identifier grouping connection instances. The option is a
         * <code>java.lang.String</code> type.
         */
        public T connectionId(String connectionId) {
            this.properties.put("connectionId", connectionId);
            return (T) this;
        }
    }

    public static class ServerConsumerBuilder
            extends
                ServerCommonBuilder<ServerConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public ServerConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public ServerConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (ServerConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public ServerConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (ServerConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public ServerConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (ServerConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public ServerConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (ServerConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public ServerConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (ServerConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public ServerConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (ServerConsumerBuilder) this;
        }
    }

    public static class ServerProducerBuilder
            extends
                ServerCommonBuilder<ServerProducerBuilder>
            implements
                EndpointProducerBuilder {
        public ServerProducerBuilder(String path) {
            super(path);
        }
    }

    public static enum ASDUAddressType {
        SIZE_1, SIZE_2;
    }

    public static enum CauseOfTransmissionType {
        SIZE_1, SIZE_2;
    }

    public static enum InformationObjectAddressType {
        SIZE_1, SIZE_2, SIZE_3;
    }
    public default ServerConsumerBuilder fromServer(String path) {
        return new ServerConsumerBuilder(path);
    }
    public default ServerProducerBuilder toServer(String path) {
        return new ServerProducerBuilder(path);
    }
}