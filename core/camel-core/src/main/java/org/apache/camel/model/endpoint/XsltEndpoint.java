/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.List;
import javax.annotation.Generated;

/**
 * Transforms the message using a XSLT template.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class XsltEndpoint {


    public static class XsltCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String resourceUri;
        private Boolean allowStAX;
        private Boolean contentCache;
        private Boolean deleteOutputFile;
        private Boolean failOnNullBody;
        private XsltOutput output;
        private Boolean saxon;
        private Integer transformerCacheSize;
        private Boolean basicPropertyBinding;
        private Object entityResolver;
        private Object errorListener;
        private Object resultHandlerFactory;
        private Object saxonConfiguration;
        private List<Object> saxonExtensionFunctions;
        private Boolean synchronous;
        private Object transformerFactory;
        private String transformerFactoryClass;
        private Object uriResolver;

        /**
         * Path to the template. The following is supported by the default
         * URIResolver. You can prefix with: classpath, file, http, ref, or
         * bean. classpath, file and http loads the resource using these
         * protocols (classpath is default). ref will lookup the resource in the
         * registry. bean will call a method on a bean to be used as the
         * resource. For bean you can specify the method name after dot, eg
         * bean:myBean.myMethod. The option is a java.lang.String type.
         */
        public T resourceUri(String resourceUri) {
            this.resourceUri = resourceUri;
            return (T) this;
        }

        /**
         * Whether to allow using StAX as the javax.xml.transform.Source. The
         * option is a boolean type.
         */
        public T allowStAX(boolean allowStAX) {
            this.allowStAX = allowStAX;
            return (T) this;
        }

        /**
         * Cache for the resource content (the stylesheet file) when it is
         * loaded. If set to false Camel will reload the stylesheet file on each
         * message processing. This is good for development. A cached stylesheet
         * can be forced to reload at runtime via JMX using the
         * clearCachedStylesheet operation. The option is a boolean type.
         */
        public T contentCache(boolean contentCache) {
            this.contentCache = contentCache;
            return (T) this;
        }

        /**
         * If you have output=file then this option dictates whether or not the
         * output file should be deleted when the Exchange is done processing.
         * For example suppose the output file is a temporary file, then it can
         * be a good idea to delete it after use. The option is a boolean type.
         */
        public T deleteOutputFile(boolean deleteOutputFile) {
            this.deleteOutputFile = deleteOutputFile;
            return (T) this;
        }

        /**
         * Whether or not to throw an exception if the input body is null. The
         * option is a boolean type.
         */
        public T failOnNullBody(boolean failOnNullBody) {
            this.failOnNullBody = failOnNullBody;
            return (T) this;
        }

        /**
         * Option to specify which output type to use. Possible values are:
         * string, bytes, DOM, file. The first three options are all in memory
         * based, where as file is streamed directly to a java.io.File. For file
         * you must specify the filename in the IN header with the key
         * Exchange.XSLT_FILE_NAME which is also CamelXsltFileName. Also any
         * paths leading to the filename must be created beforehand, otherwise
         * an exception is thrown at runtime. The option is a
         * org.apache.camel.component.xslt.XsltOutput type.
         */
        public T output(XsltOutput output) {
            this.output = output;
            return (T) this;
        }

        /**
         * Whether to use Saxon as the transformerFactoryClass. If enabled then
         * the class net.sf.saxon.TransformerFactoryImpl. You would need to add
         * Saxon to the classpath. The option is a boolean type.
         */
        public T saxon(boolean saxon) {
            this.saxon = saxon;
            return (T) this;
        }

        /**
         * The number of javax.xml.transform.Transformer object that are cached
         * for reuse to avoid calls to Template.newTransformer(). The option is
         * a int type.
         */
        public T transformerCacheSize(int transformerCacheSize) {
            this.transformerCacheSize = transformerCacheSize;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * To use a custom org.xml.sax.EntityResolver with
         * javax.xml.transform.sax.SAXSource. The option is a
         * org.xml.sax.EntityResolver type.
         */
        public T entityResolver(Object entityResolver) {
            this.entityResolver = entityResolver;
            return (T) this;
        }

        /**
         * Allows to configure to use a custom
         * javax.xml.transform.ErrorListener. Beware when doing this then the
         * default error listener which captures any errors or fatal errors and
         * store information on the Exchange as properties is not in use. So
         * only use this option for special use-cases. The option is a
         * javax.xml.transform.ErrorListener type.
         */
        public T errorListener(Object errorListener) {
            this.errorListener = errorListener;
            return (T) this;
        }

        /**
         * Allows you to use a custom
         * org.apache.camel.builder.xml.ResultHandlerFactory which is capable of
         * using custom org.apache.camel.builder.xml.ResultHandler types. The
         * option is a org.apache.camel.component.xslt.ResultHandlerFactory
         * type.
         */
        public T resultHandlerFactory(Object resultHandlerFactory) {
            this.resultHandlerFactory = resultHandlerFactory;
            return (T) this;
        }

        /**
         * To use a custom Saxon configuration. The option is a java.lang.Object
         * type.
         */
        public T saxonConfiguration(Object saxonConfiguration) {
            this.saxonConfiguration = saxonConfiguration;
            return (T) this;
        }

        /**
         * Allows you to use a custom
         * net.sf.saxon.lib.ExtensionFunctionDefinition. You would need to add
         * camel-saxon to the classpath. The function is looked up in the
         * registry, where you can comma to separate multiple values to lookup.
         * The option is a java.lang.String type.
         */
        public T saxonExtensionFunctions(List<Object> saxonExtensionFunctions) {
            this.saxonExtensionFunctions = saxonExtensionFunctions;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        /**
         * To use a custom XSLT transformer factory. The option is a
         * javax.xml.transform.TransformerFactory type.
         */
        public T transformerFactory(Object transformerFactory) {
            this.transformerFactory = transformerFactory;
            return (T) this;
        }

        /**
         * To use a custom XSLT transformer factory, specified as a FQN class
         * name. The option is a java.lang.String type.
         */
        public T transformerFactoryClass(String transformerFactoryClass) {
            this.transformerFactoryClass = transformerFactoryClass;
            return (T) this;
        }

        /**
         * To use a custom javax.xml.transform.URIResolver. The option is a
         * javax.xml.transform.URIResolver type.
         */
        public T uriResolver(Object uriResolver) {
            this.uriResolver = uriResolver;
            return (T) this;
        }

        public String getResourceUri() {
            return resourceUri;
        }

        public void setResourceUri(String resourceUri) {
            this.resourceUri = resourceUri;
        }

        public Boolean getAllowStAX() {
            return allowStAX;
        }

        public void setAllowStAX(Boolean allowStAX) {
            this.allowStAX = allowStAX;
        }

        public Boolean getContentCache() {
            return contentCache;
        }

        public void setContentCache(Boolean contentCache) {
            this.contentCache = contentCache;
        }

        public Boolean getDeleteOutputFile() {
            return deleteOutputFile;
        }

        public void setDeleteOutputFile(Boolean deleteOutputFile) {
            this.deleteOutputFile = deleteOutputFile;
        }

        public Boolean getFailOnNullBody() {
            return failOnNullBody;
        }

        public void setFailOnNullBody(Boolean failOnNullBody) {
            this.failOnNullBody = failOnNullBody;
        }

        public XsltOutput getOutput() {
            return output;
        }

        public void setOutput(XsltOutput output) {
            this.output = output;
        }

        public Boolean getSaxon() {
            return saxon;
        }

        public void setSaxon(Boolean saxon) {
            this.saxon = saxon;
        }

        public Integer getTransformerCacheSize() {
            return transformerCacheSize;
        }

        public void setTransformerCacheSize(Integer transformerCacheSize) {
            this.transformerCacheSize = transformerCacheSize;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Object getEntityResolver() {
            return entityResolver;
        }

        public void setEntityResolver(Object entityResolver) {
            this.entityResolver = entityResolver;
        }

        public Object getErrorListener() {
            return errorListener;
        }

        public void setErrorListener(Object errorListener) {
            this.errorListener = errorListener;
        }

        public Object getResultHandlerFactory() {
            return resultHandlerFactory;
        }

        public void setResultHandlerFactory(Object resultHandlerFactory) {
            this.resultHandlerFactory = resultHandlerFactory;
        }

        public Object getSaxonConfiguration() {
            return saxonConfiguration;
        }

        public void setSaxonConfiguration(Object saxonConfiguration) {
            this.saxonConfiguration = saxonConfiguration;
        }

        public List<Object> getSaxonExtensionFunctions() {
            return saxonExtensionFunctions;
        }

        public void setSaxonExtensionFunctions(
                List<Object> saxonExtensionFunctions) {
            this.saxonExtensionFunctions = saxonExtensionFunctions;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Object getTransformerFactory() {
            return transformerFactory;
        }

        public void setTransformerFactory(Object transformerFactory) {
            this.transformerFactory = transformerFactory;
        }

        public String getTransformerFactoryClass() {
            return transformerFactoryClass;
        }

        public void setTransformerFactoryClass(String transformerFactoryClass) {
            this.transformerFactoryClass = transformerFactoryClass;
        }

        public Object getUriResolver() {
            return uriResolver;
        }

        public void setUriResolver(Object uriResolver) {
            this.uriResolver = uriResolver;
        }
    }

    public static class XsltConsumer extends XsltCommon<XsltConsumer> {
    }

    public static class XsltProducer extends XsltCommon<XsltProducer> {
    }

    public static enum XsltOutput {
        string, bytes, DOM, file;
    }
}