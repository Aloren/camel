/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * Represents a Couchbase endpoint that can query Views with a Poll strategy
 * and/or produce various type of operations.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class CouchbaseEndpoint {


    public static class CouchbaseCommon extends EndpointConfiguration {
        /**
         * The protocol to use. The option is a java.lang.String type.
         */
        private String protocol;
        /**
         * The hostname to use. The option is a java.lang.String type.
         */
        private String hostname;
        /**
         * The port number to use. The option is a int type.
         */
        private int port;
        /**
         * The bucket to use. The option is a java.lang.String type.
         */
        private String bucket;
        /**
         * The key to use. The option is a java.lang.String type.
         */
        private String key;
        /**
         * The additional hosts. The option is a java.lang.String type.
         */
        private String additionalHosts;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Define the max delay during a reconnection. The option is a long
         * type.
         */
        private long maxReconnectDelay;
        /**
         * Define the observation polling interval. The option is a long type.
         */
        private long obsPollInterval;
        /**
         * Define the observation timeout. The option is a long type.
         */
        private long obsTimeout;
        /**
         * Define the max time an operation can be in queue blocked. The option
         * is a long type.
         */
        private long opQueueMaxBlockTime;
        /**
         * Define the operation timeout. The option is a long type.
         */
        private long opTimeOut;
        /**
         * Define the buffer size. The option is a int type.
         */
        private int readBufferSize;
        /**
         * Define if we want to use optimization or not where possible. The
         * option is a boolean type.
         */
        private boolean shouldOptimize;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * Define the threshold for throwing a timeout Exception. The option is
         * a int type.
         */
        private int timeoutExceptionThreshold;
        /**
         * The password to use. The option is a java.lang.String type.
         */
        private String password;
        /**
         * The username to use. The option is a java.lang.String type.
         */
        private String username;

        public String getProtocol() {
            return protocol;
        }

        public void setProtocol(String protocol) {
            this.protocol = protocol;
        }

        public String getHostname() {
            return hostname;
        }

        public void setHostname(String hostname) {
            this.hostname = hostname;
        }

        public int getPort() {
            return port;
        }

        public void setPort(int port) {
            this.port = port;
        }

        public String getBucket() {
            return bucket;
        }

        public void setBucket(String bucket) {
            this.bucket = bucket;
        }

        public String getKey() {
            return key;
        }

        public void setKey(String key) {
            this.key = key;
        }

        public String getAdditionalHosts() {
            return additionalHosts;
        }

        public void setAdditionalHosts(String additionalHosts) {
            this.additionalHosts = additionalHosts;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public long getMaxReconnectDelay() {
            return maxReconnectDelay;
        }

        public void setMaxReconnectDelay(long maxReconnectDelay) {
            this.maxReconnectDelay = maxReconnectDelay;
        }

        public long getObsPollInterval() {
            return obsPollInterval;
        }

        public void setObsPollInterval(long obsPollInterval) {
            this.obsPollInterval = obsPollInterval;
        }

        public long getObsTimeout() {
            return obsTimeout;
        }

        public void setObsTimeout(long obsTimeout) {
            this.obsTimeout = obsTimeout;
        }

        public long getOpQueueMaxBlockTime() {
            return opQueueMaxBlockTime;
        }

        public void setOpQueueMaxBlockTime(long opQueueMaxBlockTime) {
            this.opQueueMaxBlockTime = opQueueMaxBlockTime;
        }

        public long getOpTimeOut() {
            return opTimeOut;
        }

        public void setOpTimeOut(long opTimeOut) {
            this.opTimeOut = opTimeOut;
        }

        public int getReadBufferSize() {
            return readBufferSize;
        }

        public void setReadBufferSize(int readBufferSize) {
            this.readBufferSize = readBufferSize;
        }

        public boolean getShouldOptimize() {
            return shouldOptimize;
        }

        public void setShouldOptimize(boolean shouldOptimize) {
            this.shouldOptimize = shouldOptimize;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public int getTimeoutExceptionThreshold() {
            return timeoutExceptionThreshold;
        }

        public void setTimeoutExceptionThreshold(int timeoutExceptionThreshold) {
            this.timeoutExceptionThreshold = timeoutExceptionThreshold;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }
    }

    public static class CouchbaseConsumer extends CouchbaseCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * Define the consumer Processed strategy to use. The option is a
         * java.lang.String type.
         */
        private String consumerProcessedStrategy;
        /**
         * Define if this operation is descending or not. The option is a
         * boolean type.
         */
        private boolean descending;
        /**
         * The design document name to use. The option is a java.lang.String
         * type.
         */
        private String designDocumentName;
        /**
         * The output limit to use. The option is a int type.
         */
        private int limit;
        /**
         * Define a range for the end key. The option is a java.lang.String
         * type.
         */
        private String rangeEndKey;
        /**
         * Define a range for the start key. The option is a java.lang.String
         * type.
         */
        private String rangeStartKey;
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option is a
         * boolean type.
         */
        private boolean sendEmptyMessageWhenIdle;
        /**
         * Define the skip to use. The option is a int type.
         */
        private int skip;
        /**
         * The view name to use. The option is a java.lang.String type.
         */
        private String viewName;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option is a
         * org.apache.camel.spi.PollingConsumerPollStrategy type.
         */
        private PollingConsumerPollStrategy pollStrategy;
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * is a int type.
         */
        private int backoffErrorThreshold;
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option is a int type.
         */
        private int backoffIdleThreshold;
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option is a int type.
         */
        private int backoffMultiplier;
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        private long delay;
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option is a boolean type.
         */
        private boolean greedy;
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        private long initialDelay;
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * is a org.apache.camel.LoggingLevel type.
         */
        private LoggingLevel runLoggingLevel;
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option is a java.util.concurrent.ScheduledExecutorService
         * type.
         */
        private ScheduledExecutorService scheduledExecutorService;
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option is a
         * org.apache.camel.spi.ScheduledPollConsumerScheduler type.
         */
        private ScheduledPollConsumerScheduler scheduler;
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        private Map<String, Object> schedulerProperties;
        /**
         * Whether the scheduler should be auto started. The option is a boolean
         * type.
         */
        private boolean startScheduler;
        /**
         * Time unit for initialDelay and delay options. The option is a
         * java.util.concurrent.TimeUnit type.
         */
        private TimeUnit timeUnit;
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option is a boolean
         * type.
         */
        private boolean useFixedDelay;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public String getConsumerProcessedStrategy() {
            return consumerProcessedStrategy;
        }

        public void setConsumerProcessedStrategy(
                String consumerProcessedStrategy) {
            this.consumerProcessedStrategy = consumerProcessedStrategy;
        }

        public boolean getDescending() {
            return descending;
        }

        public void setDescending(boolean descending) {
            this.descending = descending;
        }

        public String getDesignDocumentName() {
            return designDocumentName;
        }

        public void setDesignDocumentName(String designDocumentName) {
            this.designDocumentName = designDocumentName;
        }

        public int getLimit() {
            return limit;
        }

        public void setLimit(int limit) {
            this.limit = limit;
        }

        public String getRangeEndKey() {
            return rangeEndKey;
        }

        public void setRangeEndKey(String rangeEndKey) {
            this.rangeEndKey = rangeEndKey;
        }

        public String getRangeStartKey() {
            return rangeStartKey;
        }

        public void setRangeStartKey(String rangeStartKey) {
            this.rangeStartKey = rangeStartKey;
        }

        public boolean getSendEmptyMessageWhenIdle() {
            return sendEmptyMessageWhenIdle;
        }

        public void setSendEmptyMessageWhenIdle(boolean sendEmptyMessageWhenIdle) {
            this.sendEmptyMessageWhenIdle = sendEmptyMessageWhenIdle;
        }

        public int getSkip() {
            return skip;
        }

        public void setSkip(int skip) {
            this.skip = skip;
        }

        public String getViewName() {
            return viewName;
        }

        public void setViewName(String viewName) {
            this.viewName = viewName;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }

        public PollingConsumerPollStrategy getPollStrategy() {
            return pollStrategy;
        }

        public void setPollStrategy(PollingConsumerPollStrategy pollStrategy) {
            this.pollStrategy = pollStrategy;
        }

        public int getBackoffErrorThreshold() {
            return backoffErrorThreshold;
        }

        public void setBackoffErrorThreshold(int backoffErrorThreshold) {
            this.backoffErrorThreshold = backoffErrorThreshold;
        }

        public int getBackoffIdleThreshold() {
            return backoffIdleThreshold;
        }

        public void setBackoffIdleThreshold(int backoffIdleThreshold) {
            this.backoffIdleThreshold = backoffIdleThreshold;
        }

        public int getBackoffMultiplier() {
            return backoffMultiplier;
        }

        public void setBackoffMultiplier(int backoffMultiplier) {
            this.backoffMultiplier = backoffMultiplier;
        }

        public long getDelay() {
            return delay;
        }

        public void setDelay(long delay) {
            this.delay = delay;
        }

        public boolean getGreedy() {
            return greedy;
        }

        public void setGreedy(boolean greedy) {
            this.greedy = greedy;
        }

        public long getInitialDelay() {
            return initialDelay;
        }

        public void setInitialDelay(long initialDelay) {
            this.initialDelay = initialDelay;
        }

        public LoggingLevel getRunLoggingLevel() {
            return runLoggingLevel;
        }

        public void setRunLoggingLevel(LoggingLevel runLoggingLevel) {
            this.runLoggingLevel = runLoggingLevel;
        }

        public ScheduledExecutorService getScheduledExecutorService() {
            return scheduledExecutorService;
        }

        public void setScheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.scheduledExecutorService = scheduledExecutorService;
        }

        public ScheduledPollConsumerScheduler getScheduler() {
            return scheduler;
        }

        public void setScheduler(ScheduledPollConsumerScheduler scheduler) {
            this.scheduler = scheduler;
        }

        public Map<String, Object> getSchedulerProperties() {
            return schedulerProperties;
        }

        public void setSchedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.schedulerProperties = schedulerProperties;
        }

        public boolean getStartScheduler() {
            return startScheduler;
        }

        public void setStartScheduler(boolean startScheduler) {
            this.startScheduler = startScheduler;
        }

        public TimeUnit getTimeUnit() {
            return timeUnit;
        }

        public void setTimeUnit(TimeUnit timeUnit) {
            this.timeUnit = timeUnit;
        }

        public boolean getUseFixedDelay() {
            return useFixedDelay;
        }

        public void setUseFixedDelay(boolean useFixedDelay) {
            this.useFixedDelay = useFixedDelay;
        }
    }

    public static class CouchbaseProducer extends CouchbaseCommon {
        /**
         * Define if we want an autostart Id when we are doing an insert
         * operation. The option is a boolean type.
         */
        private boolean autoStartIdForInserts;
        /**
         * The operation to do. The option is a java.lang.String type.
         */
        private String operation;
        /**
         * Where to persist the data. The option is a int type.
         */
        private int persistTo;
        /**
         * Define the number of retry attempts. The option is a int type.
         */
        private int producerRetryAttempts;
        /**
         * Define the retry pause between different attempts. The option is a
         * int type.
         */
        private int producerRetryPause;
        /**
         * Where to replicate the data. The option is a int type.
         */
        private int replicateTo;
        /**
         * Define the starting Id where we are doing an insert operation. The
         * option is a long type.
         */
        private long startingIdForInsertsFrom;

        public boolean getAutoStartIdForInserts() {
            return autoStartIdForInserts;
        }

        public void setAutoStartIdForInserts(boolean autoStartIdForInserts) {
            this.autoStartIdForInserts = autoStartIdForInserts;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }

        public int getPersistTo() {
            return persistTo;
        }

        public void setPersistTo(int persistTo) {
            this.persistTo = persistTo;
        }

        public int getProducerRetryAttempts() {
            return producerRetryAttempts;
        }

        public void setProducerRetryAttempts(int producerRetryAttempts) {
            this.producerRetryAttempts = producerRetryAttempts;
        }

        public int getProducerRetryPause() {
            return producerRetryPause;
        }

        public void setProducerRetryPause(int producerRetryPause) {
            this.producerRetryPause = producerRetryPause;
        }

        public int getReplicateTo() {
            return replicateTo;
        }

        public void setReplicateTo(int replicateTo) {
            this.replicateTo = replicateTo;
        }

        public long getStartingIdForInsertsFrom() {
            return startingIdForInsertsFrom;
        }

        public void setStartingIdForInsertsFrom(long startingIdForInsertsFrom) {
            this.startingIdForInsertsFrom = startingIdForInsertsFrom;
        }
    }
}