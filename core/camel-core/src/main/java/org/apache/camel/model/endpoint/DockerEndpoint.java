/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The docker component is used for managing Docker containers.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class DockerEndpoint {


    public static class DockerCommon extends EndpointConfiguration {
        /**
         * Which operation to use. The option is a
         * org.apache.camel.component.docker.DockerOperation type.
         */
        private DockerOperation operation;
        /**
         * Email address associated with the user. The option is a
         * java.lang.String type.
         */
        private String email;
        /**
         * Docker host. The option is a java.lang.String type.
         */
        private String host;
        /**
         * Docker port. The option is a java.lang.Integer type.
         */
        private Integer port;
        /**
         * Request timeout for response (in seconds). The option is a
         * java.lang.Integer type.
         */
        private Integer requestTimeout;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * The fully qualified class name of the DockerCmdExecFactory
         * implementation to use. The option is a java.lang.String type.
         */
        private String cmdExecFactory;
        /**
         * Whether to follow redirect filter. The option is a boolean type.
         */
        private Boolean followRedirectFilter;
        /**
         * Whether to use logging filter. The option is a boolean type.
         */
        private Boolean loggingFilter;
        /**
         * Maximum route connections. The option is a java.lang.Integer type.
         */
        private Integer maxPerRouteConnections;
        /**
         * Maximum total connections. The option is a java.lang.Integer type.
         */
        private Integer maxTotalConnections;
        /**
         * Server address for docker registry. The option is a java.lang.String
         * type.
         */
        private String serverAddress;
        /**
         * Socket connection mode. The option is a boolean type.
         */
        private Boolean socket;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;
        /**
         * Location containing the SSL certificate chain. The option is a
         * java.lang.String type.
         */
        private String certPath;
        /**
         * Password to authenticate with. The option is a java.lang.String type.
         */
        private String password;
        /**
         * Use HTTPS communication. The option is a boolean type.
         */
        private Boolean secure;
        /**
         * Check TLS. The option is a boolean type.
         */
        private Boolean tlsVerify;
        /**
         * User name to authenticate with. The option is a java.lang.String
         * type.
         */
        private String username;

        public DockerOperation getOperation() {
            return operation;
        }

        public void setOperation(DockerOperation operation) {
            this.operation = operation;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getHost() {
            return host;
        }

        public void setHost(String host) {
            this.host = host;
        }

        public Integer getPort() {
            return port;
        }

        public void setPort(Integer port) {
            this.port = port;
        }

        public Integer getRequestTimeout() {
            return requestTimeout;
        }

        public void setRequestTimeout(Integer requestTimeout) {
            this.requestTimeout = requestTimeout;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public String getCmdExecFactory() {
            return cmdExecFactory;
        }

        public void setCmdExecFactory(String cmdExecFactory) {
            this.cmdExecFactory = cmdExecFactory;
        }

        public Boolean getFollowRedirectFilter() {
            return followRedirectFilter;
        }

        public void setFollowRedirectFilter(Boolean followRedirectFilter) {
            this.followRedirectFilter = followRedirectFilter;
        }

        public Boolean getLoggingFilter() {
            return loggingFilter;
        }

        public void setLoggingFilter(Boolean loggingFilter) {
            this.loggingFilter = loggingFilter;
        }

        public Integer getMaxPerRouteConnections() {
            return maxPerRouteConnections;
        }

        public void setMaxPerRouteConnections(Integer maxPerRouteConnections) {
            this.maxPerRouteConnections = maxPerRouteConnections;
        }

        public Integer getMaxTotalConnections() {
            return maxTotalConnections;
        }

        public void setMaxTotalConnections(Integer maxTotalConnections) {
            this.maxTotalConnections = maxTotalConnections;
        }

        public String getServerAddress() {
            return serverAddress;
        }

        public void setServerAddress(String serverAddress) {
            this.serverAddress = serverAddress;
        }

        public Boolean getSocket() {
            return socket;
        }

        public void setSocket(Boolean socket) {
            this.socket = socket;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public String getCertPath() {
            return certPath;
        }

        public void setCertPath(String certPath) {
            this.certPath = certPath;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public Boolean getSecure() {
            return secure;
        }

        public void setSecure(Boolean secure) {
            this.secure = secure;
        }

        public Boolean getTlsVerify() {
            return tlsVerify;
        }

        public void setTlsVerify(Boolean tlsVerify) {
            this.tlsVerify = tlsVerify;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }
    }

    public static class DockerConsumer extends DockerCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private Boolean bridgeErrorHandler;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class DockerProducer extends DockerCommon {
    }

    public static enum DockerOperation {
        events, stats, auth, info, ping, version, imagebuild, imagecreate, imageinspect, imagelist, imagepull, imagepushimageremove, imagesearch, imagetag, containerattach, containercommit, containercopyfile, containercreate, containerdiffinspectcontainer, containerkill, containerlist, containerlog, containerpause, containerrestart, containerremove, containerstartcontainerstop, containertop, containerunpause, containerwait, execcreate, execstart;
    }
}