/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Represents a nsq endpoint.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class NsqEndpoint {


    public static class NsqCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String servers;
        private String topic;
        private String userAgent;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;
        private Boolean secure;
        private Object sslContextParameters;

        /**
         * The hostnames of one or more nsqlookupd servers (consumer) or nsqd
         * servers (producer). The option is a java.lang.String type.
         */
        public T servers(String servers) {
            this.servers = servers;
            return (T) this;
        }

        /**
         * The name of topic we want to use. The option is a java.lang.String
         * type.
         */
        public T topic(String topic) {
            this.topic = topic;
            return (T) this;
        }

        /**
         * A String to identify the kind of client. The option is a
         * java.lang.String type.
         */
        public T userAgent(String userAgent) {
            this.userAgent = userAgent;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        /**
         * Set secure option indicating TLS is required. The option is a boolean
         * type.
         */
        public T secure(boolean secure) {
            this.secure = secure;
            return (T) this;
        }

        /**
         * To configure security using SSLContextParameters. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        public T sslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
            return (T) this;
        }

        public String getServers() {
            return servers;
        }

        public void setServers(String servers) {
            this.servers = servers;
        }

        public String getTopic() {
            return topic;
        }

        public void setTopic(String topic) {
            this.topic = topic;
        }

        public String getUserAgent() {
            return userAgent;
        }

        public void setUserAgent(String userAgent) {
            this.userAgent = userAgent;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Boolean getSecure() {
            return secure;
        }

        public void setSecure(Boolean secure) {
            this.secure = secure;
        }

        public Object getSslContextParameters() {
            return sslContextParameters;
        }

        public void setSslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
        }
    }

    public static class NsqConsumer extends NsqCommon<NsqConsumer> {
        private Boolean autoFinish;
        private Boolean bridgeErrorHandler;
        private String channel;
        private Long lookupInterval;
        private Integer lookupServerPort;
        private Long messageTimeout;
        private Integer poolSize;
        private Long requeueInterval;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Automatically finish the NSQ message when it is retrieved from the
         * quese and before the Exchange is processed. The option is a
         * java.lang.Boolean type.
         */
        public NsqConsumer autoFinish(Boolean autoFinish) {
            this.autoFinish = autoFinish;
            return (NsqConsumer) this;
        }

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public NsqConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (NsqConsumer) this;
        }

        /**
         * The name of channel we want to use. The option is a java.lang.String
         * type.
         */
        public NsqConsumer channel(String channel) {
            this.channel = channel;
            return (NsqConsumer) this;
        }

        /**
         * The lookup retry interval. The option is a long type.
         */
        public NsqConsumer lookupInterval(long lookupInterval) {
            this.lookupInterval = lookupInterval;
            return (NsqConsumer) this;
        }

        /**
         * The port of the nsqdlookupd server. The option is a int type.
         */
        public NsqConsumer lookupServerPort(int lookupServerPort) {
            this.lookupServerPort = lookupServerPort;
            return (NsqConsumer) this;
        }

        /**
         * The NSQ message timeout for a consumer. The option is a long type.
         */
        public NsqConsumer messageTimeout(long messageTimeout) {
            this.messageTimeout = messageTimeout;
            return (NsqConsumer) this;
        }

        /**
         * Consumer pool size. The option is a int type.
         */
        public NsqConsumer poolSize(int poolSize) {
            this.poolSize = poolSize;
            return (NsqConsumer) this;
        }

        /**
         * The requeue interval. The option is a long type.
         */
        public NsqConsumer requeueInterval(long requeueInterval) {
            this.requeueInterval = requeueInterval;
            return (NsqConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public NsqConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (NsqConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public NsqConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (NsqConsumer) this;
        }

        public Boolean getAutoFinish() {
            return autoFinish;
        }

        public void setAutoFinish(Boolean autoFinish) {
            this.autoFinish = autoFinish;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public String getChannel() {
            return channel;
        }

        public void setChannel(String channel) {
            this.channel = channel;
        }

        public Long getLookupInterval() {
            return lookupInterval;
        }

        public void setLookupInterval(Long lookupInterval) {
            this.lookupInterval = lookupInterval;
        }

        public Integer getLookupServerPort() {
            return lookupServerPort;
        }

        public void setLookupServerPort(Integer lookupServerPort) {
            this.lookupServerPort = lookupServerPort;
        }

        public Long getMessageTimeout() {
            return messageTimeout;
        }

        public void setMessageTimeout(Long messageTimeout) {
            this.messageTimeout = messageTimeout;
        }

        public Integer getPoolSize() {
            return poolSize;
        }

        public void setPoolSize(Integer poolSize) {
            this.poolSize = poolSize;
        }

        public Long getRequeueInterval() {
            return requeueInterval;
        }

        public void setRequeueInterval(Long requeueInterval) {
            this.requeueInterval = requeueInterval;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class NsqProducer extends NsqCommon<NsqProducer> {
        private Integer port;

        /**
         * The port of the nsqd server. The option is a int type.
         */
        public NsqProducer port(int port) {
            this.port = port;
            return (NsqProducer) this;
        }

        public Integer getPort() {
            return port;
        }

        public void setPort(Integer port) {
            this.port = port;
        }
    }
}