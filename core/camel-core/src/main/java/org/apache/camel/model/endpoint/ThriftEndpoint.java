/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The Thrift component allows to call and expose remote procedures (RPC) with
 * Apache Thrift data format and serialization mechanism
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class ThriftEndpoint {


    public static class ThriftCommon extends EndpointConfiguration {
        /**
         * The Thrift server host name. This is localhost or 0.0.0.0 (if not
         * defined) when being a consumer or remote server host name when using
         * producer. The option is a java.lang.String type.
         */
        private String host;
        /**
         * The Thrift server port. The option is a int type.
         */
        private int port;
        /**
         * Fully qualified service name from the thrift descriptor file (package
         * dot service definition name). The option is a java.lang.String type.
         */
        private String service;
        /**
         * Protocol compression mechanism type. The option is a
         * org.apache.camel.component.thrift.ThriftCompressionType type.
         */
        private ThriftCompressionType compressionType;
        /**
         * Exchange protocol serialization type. The option is a
         * org.apache.camel.component.thrift.ThriftExchangeProtocol type.
         */
        private ThriftExchangeProtocol exchangeProtocol;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * Security negotiation type. The option is a
         * org.apache.camel.component.thrift.ThriftNegotiationType type.
         */
        private ThriftNegotiationType negotiationType;
        /**
         * Configuration parameters for SSL/TLS security negotiation. The option
         * is a org.apache.camel.support.jsse.SSLContextParameters type.
         */
        private Object sslParameters;

        public String getHost() {
            return host;
        }

        public void setHost(String host) {
            this.host = host;
        }

        public int getPort() {
            return port;
        }

        public void setPort(int port) {
            this.port = port;
        }

        public String getService() {
            return service;
        }

        public void setService(String service) {
            this.service = service;
        }

        public ThriftCompressionType getCompressionType() {
            return compressionType;
        }

        public void setCompressionType(ThriftCompressionType compressionType) {
            this.compressionType = compressionType;
        }

        public ThriftExchangeProtocol getExchangeProtocol() {
            return exchangeProtocol;
        }

        public void setExchangeProtocol(ThriftExchangeProtocol exchangeProtocol) {
            this.exchangeProtocol = exchangeProtocol;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public ThriftNegotiationType getNegotiationType() {
            return negotiationType;
        }

        public void setNegotiationType(ThriftNegotiationType negotiationType) {
            this.negotiationType = negotiationType;
        }

        public Object getSslParameters() {
            return sslParameters;
        }

        public void setSslParameters(Object sslParameters) {
            this.sslParameters = sslParameters;
        }
    }

    public static class ThriftConsumer extends ThriftCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * Client timeout for consumers. The option is a int type.
         */
        private int clientTimeout;
        /**
         * The Thrift server consumer max thread pool size. The option is a int
         * type.
         */
        private int maxPoolSize;
        /**
         * The Thrift server consumer initial thread pool size. The option is a
         * int type.
         */
        private int poolSize;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public int getClientTimeout() {
            return clientTimeout;
        }

        public void setClientTimeout(int clientTimeout) {
            this.clientTimeout = clientTimeout;
        }

        public int getMaxPoolSize() {
            return maxPoolSize;
        }

        public void setMaxPoolSize(int maxPoolSize) {
            this.maxPoolSize = maxPoolSize;
        }

        public int getPoolSize() {
            return poolSize;
        }

        public void setPoolSize(int poolSize) {
            this.poolSize = poolSize;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class ThriftProducer extends ThriftCommon {
        /**
         * The Thrift invoked method name. The option is a java.lang.String
         * type.
         */
        private String method;

        public String getMethod() {
            return method;
        }

        public void setMethod(String method) {
            this.method = method;
        }
    }

    public static enum ThriftCompressionType {
        NONE, ZLIB;
    }

    public static enum ThriftExchangeProtocol {
        BINARY, JSON, SJSON, COMPACT;
    }

    public static enum ThriftNegotiationType {
        PLAINTEXT, SSL, SASL;
    }
}