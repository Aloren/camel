/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;

/**
 * The openstack-cinder component allows messages to be sent to an OpenStack
 * block storage services.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class CinderEndpoint {


    public static class CinderCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String host;
        private String apiVersion;
        private Object config;
        private String domain;
        private String operation;
        private String password;
        private String project;
        private String subsystem;
        private String username;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;

        /**
         * OpenStack host url. The option is a java.lang.String type.
         */
        public T host(String host) {
            this.host = host;
            return (T) this;
        }

        /**
         * OpenStack API version. The option is a java.lang.String type.
         */
        public T apiVersion(String apiVersion) {
            this.apiVersion = apiVersion;
            return (T) this;
        }

        /**
         * OpenStack configuration. The option is a
         * org.openstack4j.core.transport.Config type.
         */
        public T config(Object config) {
            this.config = config;
            return (T) this;
        }

        /**
         * Authentication domain. The option is a java.lang.String type.
         */
        public T domain(String domain) {
            this.domain = domain;
            return (T) this;
        }

        /**
         * The operation to do. The option is a java.lang.String type.
         */
        public T operation(String operation) {
            this.operation = operation;
            return (T) this;
        }

        /**
         * OpenStack password. The option is a java.lang.String type.
         */
        public T password(String password) {
            this.password = password;
            return (T) this;
        }

        /**
         * The project ID. The option is a java.lang.String type.
         */
        public T project(String project) {
            this.project = project;
            return (T) this;
        }

        /**
         * OpenStack Cinder subsystem. The option is a java.lang.String type.
         */
        public T subsystem(String subsystem) {
            this.subsystem = subsystem;
            return (T) this;
        }

        /**
         * OpenStack username. The option is a java.lang.String type.
         */
        public T username(String username) {
            this.username = username;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public String getHost() {
            return host;
        }

        public void setHost(String host) {
            this.host = host;
        }

        public String getApiVersion() {
            return apiVersion;
        }

        public void setApiVersion(String apiVersion) {
            this.apiVersion = apiVersion;
        }

        public Object getConfig() {
            return config;
        }

        public void setConfig(Object config) {
            this.config = config;
        }

        public String getDomain() {
            return domain;
        }

        public void setDomain(String domain) {
            this.domain = domain;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getProject() {
            return project;
        }

        public void setProject(String project) {
            this.project = project;
        }

        public String getSubsystem() {
            return subsystem;
        }

        public void setSubsystem(String subsystem) {
            this.subsystem = subsystem;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class CinderConsumer extends CinderCommon<CinderConsumer> {
    }

    public static class CinderProducer extends CinderCommon<CinderProducer> {
    }
}