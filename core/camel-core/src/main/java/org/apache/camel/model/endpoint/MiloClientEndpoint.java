/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URL;
import java.util.Set;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Connect to OPC UA servers using the binary protocol for acquiring telemetry
 * data
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class MiloClientEndpoint {


    public static class MiloClientCommon extends EndpointConfiguration {
        /**
         * The OPC UA server endpoint. The option is a java.lang.String type.
         */
        private String endpointUri;
        /**
         * A virtual client id to force the creation of a new connection
         * instance. The option is a java.lang.String type.
         */
        private String clientId;
        /**
         * Default await setting for writes. The option is a boolean type.
         */
        private boolean defaultAwaitWrites;
        /**
         * A suffix for endpoint URI when discovering. The option is a
         * java.lang.String type.
         */
        private String discoveryEndpointSuffix;
        /**
         * An alternative discovery URI. The option is a java.lang.String type.
         */
        private String discoveryEndpointUri;
        /**
         * The method definition (see Method ID). The option is a
         * org.eclipse.milo.opcua.stack.core.types.builtin.ExpandedNodeId type.
         */
        private Object method;
        /**
         * The node definition (see Node ID). The option is a
         * org.eclipse.milo.opcua.stack.core.types.builtin.ExpandedNodeId type.
         */
        private Object node;
        /**
         * The sampling interval in milliseconds. The option is a
         * java.lang.Double type.
         */
        private Double samplingInterval;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * A set of allowed security policy URIs. Default is to accept all and
         * use the highest. The option is a java.lang.String type.
         */
        private Set<String> allowedSecurityPolicies;
        /**
         * The application name. The option is a java.lang.String type.
         */
        private String applicationName;
        /**
         * The application URI. The option is a java.lang.String type.
         */
        private String applicationUri;
        /**
         * Channel lifetime in milliseconds. The option is a java.lang.Long
         * type.
         */
        private Long channelLifetime;
        /**
         * The name of the key in the keystore file. The option is a
         * java.lang.String type.
         */
        private String keyAlias;
        /**
         * The key password. The option is a java.lang.String type.
         */
        private String keyPassword;
        /**
         * The keystore password. The option is a java.lang.String type.
         */
        private String keyStorePassword;
        /**
         * The key store type. The option is a java.lang.String type.
         */
        private String keyStoreType;
        /**
         * The URL where the key should be loaded from. The option is a
         * java.net.URL type.
         */
        private URL keyStoreUrl;
        /**
         * The maximum number of pending publish requests. The option is a
         * java.lang.Long type.
         */
        private Long maxPendingPublishRequests;
        /**
         * The maximum number of bytes a response message may have. The option
         * is a java.lang.Long type.
         */
        private Long maxResponseMessageSize;
        /**
         * Override the server reported endpoint host with the host from the
         * endpoint URI. The option is a boolean type.
         */
        private boolean overrideHost;
        /**
         * The product URI. The option is a java.lang.String type.
         */
        private String productUri;
        /**
         * Request timeout in milliseconds. The option is a java.lang.Long type.
         */
        private Long requestTimeout;
        /**
         * Session name. The option is a java.lang.String type.
         */
        private String sessionName;
        /**
         * Session timeout in milliseconds. The option is a java.lang.Long type.
         */
        private Long sessionTimeout;

        public String getEndpointUri() {
            return endpointUri;
        }

        public void setEndpointUri(String endpointUri) {
            this.endpointUri = endpointUri;
        }

        public String getClientId() {
            return clientId;
        }

        public void setClientId(String clientId) {
            this.clientId = clientId;
        }

        public boolean getDefaultAwaitWrites() {
            return defaultAwaitWrites;
        }

        public void setDefaultAwaitWrites(boolean defaultAwaitWrites) {
            this.defaultAwaitWrites = defaultAwaitWrites;
        }

        public String getDiscoveryEndpointSuffix() {
            return discoveryEndpointSuffix;
        }

        public void setDiscoveryEndpointSuffix(String discoveryEndpointSuffix) {
            this.discoveryEndpointSuffix = discoveryEndpointSuffix;
        }

        public String getDiscoveryEndpointUri() {
            return discoveryEndpointUri;
        }

        public void setDiscoveryEndpointUri(String discoveryEndpointUri) {
            this.discoveryEndpointUri = discoveryEndpointUri;
        }

        public Object getMethod() {
            return method;
        }

        public void setMethod(Object method) {
            this.method = method;
        }

        public Object getNode() {
            return node;
        }

        public void setNode(Object node) {
            this.node = node;
        }

        public Double getSamplingInterval() {
            return samplingInterval;
        }

        public void setSamplingInterval(Double samplingInterval) {
            this.samplingInterval = samplingInterval;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Set<String> getAllowedSecurityPolicies() {
            return allowedSecurityPolicies;
        }

        public void setAllowedSecurityPolicies(
                Set<String> allowedSecurityPolicies) {
            this.allowedSecurityPolicies = allowedSecurityPolicies;
        }

        public String getApplicationName() {
            return applicationName;
        }

        public void setApplicationName(String applicationName) {
            this.applicationName = applicationName;
        }

        public String getApplicationUri() {
            return applicationUri;
        }

        public void setApplicationUri(String applicationUri) {
            this.applicationUri = applicationUri;
        }

        public Long getChannelLifetime() {
            return channelLifetime;
        }

        public void setChannelLifetime(Long channelLifetime) {
            this.channelLifetime = channelLifetime;
        }

        public String getKeyAlias() {
            return keyAlias;
        }

        public void setKeyAlias(String keyAlias) {
            this.keyAlias = keyAlias;
        }

        public String getKeyPassword() {
            return keyPassword;
        }

        public void setKeyPassword(String keyPassword) {
            this.keyPassword = keyPassword;
        }

        public String getKeyStorePassword() {
            return keyStorePassword;
        }

        public void setKeyStorePassword(String keyStorePassword) {
            this.keyStorePassword = keyStorePassword;
        }

        public String getKeyStoreType() {
            return keyStoreType;
        }

        public void setKeyStoreType(String keyStoreType) {
            this.keyStoreType = keyStoreType;
        }

        public URL getKeyStoreUrl() {
            return keyStoreUrl;
        }

        public void setKeyStoreUrl(URL keyStoreUrl) {
            this.keyStoreUrl = keyStoreUrl;
        }

        public Long getMaxPendingPublishRequests() {
            return maxPendingPublishRequests;
        }

        public void setMaxPendingPublishRequests(Long maxPendingPublishRequests) {
            this.maxPendingPublishRequests = maxPendingPublishRequests;
        }

        public Long getMaxResponseMessageSize() {
            return maxResponseMessageSize;
        }

        public void setMaxResponseMessageSize(Long maxResponseMessageSize) {
            this.maxResponseMessageSize = maxResponseMessageSize;
        }

        public boolean getOverrideHost() {
            return overrideHost;
        }

        public void setOverrideHost(boolean overrideHost) {
            this.overrideHost = overrideHost;
        }

        public String getProductUri() {
            return productUri;
        }

        public void setProductUri(String productUri) {
            this.productUri = productUri;
        }

        public Long getRequestTimeout() {
            return requestTimeout;
        }

        public void setRequestTimeout(Long requestTimeout) {
            this.requestTimeout = requestTimeout;
        }

        public String getSessionName() {
            return sessionName;
        }

        public void setSessionName(String sessionName) {
            this.sessionName = sessionName;
        }

        public Long getSessionTimeout() {
            return sessionTimeout;
        }

        public void setSessionTimeout(Long sessionTimeout) {
            this.sessionTimeout = sessionTimeout;
        }
    }

    public static class MiloClientConsumer extends MiloClientCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class MiloClientProducer extends MiloClientCommon {
    }
}