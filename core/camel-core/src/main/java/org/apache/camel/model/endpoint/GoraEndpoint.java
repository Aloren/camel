/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The gora component allows you to work with NoSQL databases using the Apache
 * Gora framework.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class GoraEndpoint {


    public static class GoraCommon extends EndpointConfiguration {
        /**
         * Instance name. The option is a java.lang.String type.
         */
        private String name;
        /**
         * The type of the dataStore. The option is a java.lang.String type.
         */
        private String dataStoreClass;
        /**
         * The type class of the key. The option is a java.lang.String type.
         */
        private String keyClass;
        /**
         * The type of the value. The option is a java.lang.String type.
         */
        private String valueClass;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Hadoop Configuration. The option is a
         * org.apache.hadoop.conf.Configuration type.
         */
        private Object hadoopConfiguration;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getDataStoreClass() {
            return dataStoreClass;
        }

        public void setDataStoreClass(String dataStoreClass) {
            this.dataStoreClass = dataStoreClass;
        }

        public String getKeyClass() {
            return keyClass;
        }

        public void setKeyClass(String keyClass) {
            this.keyClass = keyClass;
        }

        public String getValueClass() {
            return valueClass;
        }

        public void setValueClass(String valueClass) {
            this.valueClass = valueClass;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Object getHadoopConfiguration() {
            return hadoopConfiguration;
        }

        public void setHadoopConfiguration(Object hadoopConfiguration) {
            this.hadoopConfiguration = hadoopConfiguration;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class GoraConsumer extends GoraCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private Boolean bridgeErrorHandler;
        /**
         * Number of concurrent consumers. The option is a int type.
         */
        private Integer concurrentConsumers;
        /**
         * The End Key. The option is a java.lang.Object type.
         */
        private Object endKey;
        /**
         * The End Time. The option is a long type.
         */
        private Long endTime;
        /**
         * The Fields. The option is a com.google.common.base.Strings type.
         */
        private Object fields;
        /**
         * The Key Range From. The option is a java.lang.Object type.
         */
        private Object keyRangeFrom;
        /**
         * The Key Range To. The option is a java.lang.Object type.
         */
        private Object keyRangeTo;
        /**
         * The Limit. The option is a long type.
         */
        private Long limit;
        /**
         * The Start Key. The option is a java.lang.Object type.
         */
        private Object startKey;
        /**
         * The Start Time. The option is a long type.
         */
        private Long startTime;
        /**
         * The Time Range From. The option is a long type.
         */
        private Long timeRangeFrom;
        /**
         * The Time Range To. The option is a long type.
         */
        private Long timeRangeTo;
        /**
         * The Timestamp. The option is a long type.
         */
        private Long timestamp;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public Integer getConcurrentConsumers() {
            return concurrentConsumers;
        }

        public void setConcurrentConsumers(Integer concurrentConsumers) {
            this.concurrentConsumers = concurrentConsumers;
        }

        public Object getEndKey() {
            return endKey;
        }

        public void setEndKey(Object endKey) {
            this.endKey = endKey;
        }

        public Long getEndTime() {
            return endTime;
        }

        public void setEndTime(Long endTime) {
            this.endTime = endTime;
        }

        public Object getFields() {
            return fields;
        }

        public void setFields(Object fields) {
            this.fields = fields;
        }

        public Object getKeyRangeFrom() {
            return keyRangeFrom;
        }

        public void setKeyRangeFrom(Object keyRangeFrom) {
            this.keyRangeFrom = keyRangeFrom;
        }

        public Object getKeyRangeTo() {
            return keyRangeTo;
        }

        public void setKeyRangeTo(Object keyRangeTo) {
            this.keyRangeTo = keyRangeTo;
        }

        public Long getLimit() {
            return limit;
        }

        public void setLimit(Long limit) {
            this.limit = limit;
        }

        public Object getStartKey() {
            return startKey;
        }

        public void setStartKey(Object startKey) {
            this.startKey = startKey;
        }

        public Long getStartTime() {
            return startTime;
        }

        public void setStartTime(Long startTime) {
            this.startTime = startTime;
        }

        public Long getTimeRangeFrom() {
            return timeRangeFrom;
        }

        public void setTimeRangeFrom(Long timeRangeFrom) {
            this.timeRangeFrom = timeRangeFrom;
        }

        public Long getTimeRangeTo() {
            return timeRangeTo;
        }

        public void setTimeRangeTo(Long timeRangeTo) {
            this.timeRangeTo = timeRangeTo;
        }

        public Long getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(Long timestamp) {
            this.timestamp = timestamp;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class GoraProducer extends GoraCommon {
        /**
         * Flush on every operation. The option is a boolean type.
         */
        private Boolean flushOnEveryOperation;

        public Boolean getFlushOnEveryOperation() {
            return flushOnEveryOperation;
        }

        public void setFlushOnEveryOperation(Boolean flushOnEveryOperation) {
            this.flushOnEveryOperation = flushOnEveryOperation;
        }
    }
}