/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * The beanstalk component is used for job retrieval and post-processing of
 * Beanstalk jobs.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface BeanstalkEndpointBuilder {


    /**
     * Base class for the Beanstalk component builders.
     */
    public static class BeanstalkCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        BeanstalkCommonBuilder(String path) {
            super("beanstalk", path);
        }
        /**
         * Connection settings host:port/tube.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T connectionSettings(String connectionSettings) {
            this.properties.put("connectionSettings", connectionSettings);
            return (T) this;
        }
        /**
         * put means to put the job into Beanstalk. Job body is specified in the
         * Camel message body. Job ID will be returned in beanstalk.jobId
         * message header. delete, release, touch or bury expect Job ID in the
         * message header beanstalk.jobId. Result of the operation is returned
         * in beanstalk.result message header kick expects the number of jobs to
         * kick in the message body and returns the number of jobs actually
         * kicked out in the message header beanstalk.result.
         * The option is a
         * <code>org.apache.camel.component.beanstalk.BeanstalkCommand</code>
         * type.
         * @group common
         */
        public T command(BeanstalkCommand command) {
            this.properties.put("command", command);
            return (T) this;
        }
        /**
         * put means to put the job into Beanstalk. Job body is specified in the
         * Camel message body. Job ID will be returned in beanstalk.jobId
         * message header. delete, release, touch or bury expect Job ID in the
         * message header beanstalk.jobId. Result of the operation is returned
         * in beanstalk.result message header kick expects the number of jobs to
         * kick in the message body and returns the number of jobs actually
         * kicked out in the message header beanstalk.result.
         * The option will be converted to a
         * <code>org.apache.camel.component.beanstalk.BeanstalkCommand</code>
         * type.
         * @group common
         */
        public T command(String command) {
            this.properties.put("command", command);
            return (T) this;
        }
        /**
         * Job delay in seconds.
         * The option is a <code>int</code> type.
         * @group common
         */
        public T jobDelay(int jobDelay) {
            this.properties.put("jobDelay", jobDelay);
            return (T) this;
        }
        /**
         * Job delay in seconds.
         * The option will be converted to a <code>int</code> type.
         * @group common
         */
        public T jobDelay(String jobDelay) {
            this.properties.put("jobDelay", jobDelay);
            return (T) this;
        }
        /**
         * Job priority. (0 is the highest, see Beanstalk protocol).
         * The option is a <code>long</code> type.
         * @group common
         */
        public T jobPriority(long jobPriority) {
            this.properties.put("jobPriority", jobPriority);
            return (T) this;
        }
        /**
         * Job priority. (0 is the highest, see Beanstalk protocol).
         * The option will be converted to a <code>long</code> type.
         * @group common
         */
        public T jobPriority(String jobPriority) {
            this.properties.put("jobPriority", jobPriority);
            return (T) this;
        }
        /**
         * Job time to run in seconds. (when 0, the beanstalkd daemon raises it
         * to 1 automatically, see Beanstalk protocol).
         * The option is a <code>int</code> type.
         * @group common
         */
        public T jobTimeToRun(int jobTimeToRun) {
            this.properties.put("jobTimeToRun", jobTimeToRun);
            return (T) this;
        }
        /**
         * Job time to run in seconds. (when 0, the beanstalkd daemon raises it
         * to 1 automatically, see Beanstalk protocol).
         * The option will be converted to a <code>int</code> type.
         * @group common
         */
        public T jobTimeToRun(String jobTimeToRun) {
            this.properties.put("jobTimeToRun", jobTimeToRun);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint consumers for the Beanstalk component.
     */
    public static class BeanstalkConsumerBuilder
            extends
                BeanstalkCommonBuilder<BeanstalkConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public BeanstalkConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Whether to wait for job to complete before ack the job from
         * beanstalk.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public BeanstalkConsumerBuilder awaitJob(boolean awaitJob) {
            this.properties.put("awaitJob", awaitJob);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Whether to wait for job to complete before ack the job from
         * beanstalk.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public BeanstalkConsumerBuilder awaitJob(String awaitJob) {
            this.properties.put("awaitJob", awaitJob);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public BeanstalkConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public BeanstalkConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Command to use when processing failed.
         * The option is a
         * <code>org.apache.camel.component.beanstalk.BeanstalkCommand</code>
         * type.
         * @group consumer
         */
        public BeanstalkConsumerBuilder onFailure(BeanstalkCommand onFailure) {
            this.properties.put("onFailure", onFailure);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Command to use when processing failed.
         * The option will be converted to a
         * <code>org.apache.camel.component.beanstalk.BeanstalkCommand</code>
         * type.
         * @group consumer
         */
        public BeanstalkConsumerBuilder onFailure(String onFailure) {
            this.properties.put("onFailure", onFailure);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public BeanstalkConsumerBuilder sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public BeanstalkConsumerBuilder sendEmptyMessageWhenIdle(
                String sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Whether to use blockIO.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public BeanstalkConsumerBuilder useBlockIO(boolean useBlockIO) {
            this.properties.put("useBlockIO", useBlockIO);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Whether to use blockIO.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public BeanstalkConsumerBuilder useBlockIO(String useBlockIO) {
            this.properties.put("useBlockIO", useBlockIO);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        public BeanstalkConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        public BeanstalkConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        public BeanstalkConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        public BeanstalkConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel.
         * The option is a
         * <code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.
         * @group consumer (advanced)
         */
        public BeanstalkConsumerBuilder pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel.
         * The option will be converted to a
         * <code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.
         * @group consumer (advanced)
         */
        public BeanstalkConsumerBuilder pollStrategy(String pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in.
         * The option is a <code>int</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder backoffErrorThreshold(
                int backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in.
         * The option will be converted to a <code>int</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder backoffErrorThreshold(
                String backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in.
         * The option is a <code>int</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder backoffIdleThreshold(
                int backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in.
         * The option will be converted to a <code>int</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder backoffIdleThreshold(
                String backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured.
         * The option is a <code>int</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder backoffMultiplier(int backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured.
         * The option will be converted to a <code>int</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder backoffMultiplier(
                String backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour).
         * The option is a <code>long</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder delay(long delay) {
            this.properties.put("delay", delay);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour).
         * The option will be converted to a <code>long</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder delay(String delay) {
            this.properties.put("delay", delay);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages.
         * The option is a <code>boolean</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder greedy(boolean greedy) {
            this.properties.put("greedy", greedy);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages.
         * The option will be converted to a <code>boolean</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder greedy(String greedy) {
            this.properties.put("greedy", greedy);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour).
         * The option is a <code>long</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour).
         * The option will be converted to a <code>long</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder initialDelay(String initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that.
         * The option is a <code>org.apache.camel.LoggingLevel</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder runLoggingLevel(
                LoggingLevel runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that.
         * The option will be converted to a
         * <code>org.apache.camel.LoggingLevel</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder runLoggingLevel(String runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool.
         * The option is a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool.
         * The option will be converted to a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder scheduledExecutorService(
                String scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component.
         * The option is a
         * <code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>
         * type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder scheduler(
                ScheduledPollConsumerScheduler scheduler) {
            this.properties.put("scheduler", scheduler);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>
         * type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder scheduler(String scheduler) {
            this.properties.put("scheduler", scheduler);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder schedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder schedulerProperties(
                String schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started.
         * The option is a <code>boolean</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder startScheduler(boolean startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started.
         * The option will be converted to a <code>boolean</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder startScheduler(String startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options.
         * The option is a <code>java.util.concurrent.TimeUnit</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder timeUnit(TimeUnit timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options.
         * The option will be converted to a
         * <code>java.util.concurrent.TimeUnit</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder timeUnit(String timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details.
         * The option is a <code>boolean</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder useFixedDelay(boolean useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (BeanstalkConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details.
         * The option will be converted to a <code>boolean</code> type.
         * @group scheduler
         */
        public BeanstalkConsumerBuilder useFixedDelay(String useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (BeanstalkConsumerBuilder) this;
        }
    }

    /**
     * Builder for endpoint producers for the Beanstalk component.
     */
    public static class BeanstalkProducerBuilder
            extends
                BeanstalkCommonBuilder<BeanstalkProducerBuilder>
            implements
                EndpointProducerBuilder {
        public BeanstalkProducerBuilder(String path) {
            super(path);
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.beanstalk.BeanstalkCommand</code> enum.
     */
    public static enum BeanstalkCommand {
        bury, release, put, touch, delete, kick;
    }
    /**
     * The beanstalk component is used for job retrieval and post-processing of
     * Beanstalk jobs. Creates a builder to build a consumer endpoint for the
     * Beanstalk component.
     */
    public default BeanstalkConsumerBuilder fromBeanstalk(String path) {
        return new BeanstalkConsumerBuilder(path);
    }
    /**
     * The beanstalk component is used for job retrieval and post-processing of
     * Beanstalk jobs. Creates a builder to build a producer endpoint for the
     * Beanstalk component.
     */
    public default BeanstalkProducerBuilder toBeanstalk(String path) {
        return new BeanstalkProducerBuilder(path);
    }
}