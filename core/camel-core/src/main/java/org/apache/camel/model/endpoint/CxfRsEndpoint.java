/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.List;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.HeaderFilterStrategy;

/**
 * The cxfrs component is used for JAX-RS REST services using Apache CXF.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class CxfRsEndpoint {


    public static class CxfRsCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String beanId;
        private String address;
        private List<Object> features;
        private Boolean loggingFeatureEnabled;
        private Integer loggingSizeLimit;
        private String modelRef;
        private List<Object> providers;
        private List<Class<Object>> resourceClasses;
        private List<String> schemaLocations;
        private Boolean skipFaultLogging;
        private Boolean basicPropertyBinding;
        private Object binding;
        private Object bus;
        private Long continuationTimeout;
        private Object cxfRsEndpointConfigurer;
        private Boolean defaultBus;
        private HeaderFilterStrategy headerFilterStrategy;
        private Boolean performInvocation;
        private Boolean propagateContexts;
        private Boolean synchronous;

        /**
         * To lookup an existing configured CxfRsEndpoint. Must used bean: as
         * prefix. The option is a java.lang.String type.
         */
        public T beanId(String beanId) {
            this.beanId = beanId;
            return (T) this;
        }

        /**
         * The service publish address. The option is a java.lang.String type.
         */
        public T address(String address) {
            this.address = address;
            return (T) this;
        }

        /**
         * Set the feature list to the CxfRs endpoint. The option is a
         * java.util.List<org.apache.cxf.feature.Feature> type.
         */
        public T features(List<Object> features) {
            this.features = features;
            return (T) this;
        }

        /**
         * This option enables CXF Logging Feature which writes inbound and
         * outbound REST messages to log. The option is a boolean type.
         */
        public T loggingFeatureEnabled(boolean loggingFeatureEnabled) {
            this.loggingFeatureEnabled = loggingFeatureEnabled;
            return (T) this;
        }

        /**
         * To limit the total size of number of bytes the logger will output
         * when logging feature has been enabled. The option is a int type.
         */
        public T loggingSizeLimit(int loggingSizeLimit) {
            this.loggingSizeLimit = loggingSizeLimit;
            return (T) this;
        }

        /**
         * This option is used to specify the model file which is useful for the
         * resource class without annotation. When using this option, then the
         * service class can be omitted, to emulate document-only endpoints. The
         * option is a java.lang.String type.
         */
        public T modelRef(String modelRef) {
            this.modelRef = modelRef;
            return (T) this;
        }

        /**
         * Set custom JAX-RS provider(s) list to the CxfRs endpoint. You can
         * specify a string with a list of providers to lookup in the registy
         * separated by comma. The option is a java.lang.String type.
         */
        public T providers(List<Object> providers) {
            this.providers = providers;
            return (T) this;
        }

        /**
         * The resource classes which you want to export as REST service.
         * Multiple classes can be separated by comma. The option is a
         * java.util.List<java.lang.Class<?>> type.
         */
        public T resourceClasses(List<Class<Object>> resourceClasses) {
            this.resourceClasses = resourceClasses;
            return (T) this;
        }

        /**
         * Sets the locations of the schema(s) which can be used to validate the
         * incoming XML or JAXB-driven JSON. The option is a
         * java.util.List<java.lang.String> type.
         */
        public T schemaLocations(List<String> schemaLocations) {
            this.schemaLocations = schemaLocations;
            return (T) this;
        }

        /**
         * This option controls whether the PhaseInterceptorChain skips logging
         * the Fault that it catches. The option is a boolean type.
         */
        public T skipFaultLogging(boolean skipFaultLogging) {
            this.skipFaultLogging = skipFaultLogging;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * To use a custom CxfBinding to control the binding between Camel
         * Message and CXF Message. The option is a
         * org.apache.camel.component.cxf.jaxrs.CxfRsBinding type.
         */
        public T binding(Object binding) {
            this.binding = binding;
            return (T) this;
        }

        /**
         * To use a custom configured CXF Bus. The option is a
         * org.apache.cxf.Bus type.
         */
        public T bus(Object bus) {
            this.bus = bus;
            return (T) this;
        }

        /**
         * This option is used to set the CXF continuation timeout which could
         * be used in CxfConsumer by default when the CXF server is using Jetty
         * or Servlet transport. The option is a long type.
         */
        public T continuationTimeout(long continuationTimeout) {
            this.continuationTimeout = continuationTimeout;
            return (T) this;
        }

        /**
         * This option could apply the implementation of
         * org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer which
         * supports to configure the CXF endpoint in programmatic way. User can
         * configure the CXF server and client by implementing
         * configure{Server/Client} method of CxfEndpointConfigurer. The option
         * is a org.apache.camel.component.cxf.jaxrs.CxfRsEndpointConfigurer
         * type.
         */
        public T cxfRsEndpointConfigurer(Object cxfRsEndpointConfigurer) {
            this.cxfRsEndpointConfigurer = cxfRsEndpointConfigurer;
            return (T) this;
        }

        /**
         * Will set the default bus when CXF endpoint create a bus by itself.
         * The option is a boolean type.
         */
        public T defaultBus(boolean defaultBus) {
            this.defaultBus = defaultBus;
            return (T) this;
        }

        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message. The option is a
         * org.apache.camel.spi.HeaderFilterStrategy type.
         */
        public T headerFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {
            this.headerFilterStrategy = headerFilterStrategy;
            return (T) this;
        }

        /**
         * When the option is true, Camel will perform the invocation of the
         * resource class instance and put the response object into the exchange
         * for further processing. The option is a boolean type.
         */
        public T performInvocation(boolean performInvocation) {
            this.performInvocation = performInvocation;
            return (T) this;
        }

        /**
         * When the option is true, JAXRS UriInfo, HttpHeaders, Request and
         * SecurityContext contexts will be available to custom CXFRS processors
         * as typed Camel exchange properties. These contexts can be used to
         * analyze the current requests using JAX-RS API. The option is a
         * boolean type.
         */
        public T propagateContexts(boolean propagateContexts) {
            this.propagateContexts = propagateContexts;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public String getBeanId() {
            return beanId;
        }

        public void setBeanId(String beanId) {
            this.beanId = beanId;
        }

        public String getAddress() {
            return address;
        }

        public void setAddress(String address) {
            this.address = address;
        }

        public List<Object> getFeatures() {
            return features;
        }

        public void setFeatures(List<Object> features) {
            this.features = features;
        }

        public Boolean getLoggingFeatureEnabled() {
            return loggingFeatureEnabled;
        }

        public void setLoggingFeatureEnabled(Boolean loggingFeatureEnabled) {
            this.loggingFeatureEnabled = loggingFeatureEnabled;
        }

        public Integer getLoggingSizeLimit() {
            return loggingSizeLimit;
        }

        public void setLoggingSizeLimit(Integer loggingSizeLimit) {
            this.loggingSizeLimit = loggingSizeLimit;
        }

        public String getModelRef() {
            return modelRef;
        }

        public void setModelRef(String modelRef) {
            this.modelRef = modelRef;
        }

        public List<Object> getProviders() {
            return providers;
        }

        public void setProviders(List<Object> providers) {
            this.providers = providers;
        }

        public List<Class<Object>> getResourceClasses() {
            return resourceClasses;
        }

        public void setResourceClasses(List<Class<Object>> resourceClasses) {
            this.resourceClasses = resourceClasses;
        }

        public List<String> getSchemaLocations() {
            return schemaLocations;
        }

        public void setSchemaLocations(List<String> schemaLocations) {
            this.schemaLocations = schemaLocations;
        }

        public Boolean getSkipFaultLogging() {
            return skipFaultLogging;
        }

        public void setSkipFaultLogging(Boolean skipFaultLogging) {
            this.skipFaultLogging = skipFaultLogging;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Object getBinding() {
            return binding;
        }

        public void setBinding(Object binding) {
            this.binding = binding;
        }

        public Object getBus() {
            return bus;
        }

        public void setBus(Object bus) {
            this.bus = bus;
        }

        public Long getContinuationTimeout() {
            return continuationTimeout;
        }

        public void setContinuationTimeout(Long continuationTimeout) {
            this.continuationTimeout = continuationTimeout;
        }

        public Object getCxfRsEndpointConfigurer() {
            return cxfRsEndpointConfigurer;
        }

        public void setCxfRsEndpointConfigurer(Object cxfRsEndpointConfigurer) {
            this.cxfRsEndpointConfigurer = cxfRsEndpointConfigurer;
        }

        public Boolean getDefaultBus() {
            return defaultBus;
        }

        public void setDefaultBus(Boolean defaultBus) {
            this.defaultBus = defaultBus;
        }

        public HeaderFilterStrategy getHeaderFilterStrategy() {
            return headerFilterStrategy;
        }

        public void setHeaderFilterStrategy(
                HeaderFilterStrategy headerFilterStrategy) {
            this.headerFilterStrategy = headerFilterStrategy;
        }

        public Boolean getPerformInvocation() {
            return performInvocation;
        }

        public void setPerformInvocation(Boolean performInvocation) {
            this.performInvocation = performInvocation;
        }

        public Boolean getPropagateContexts() {
            return propagateContexts;
        }

        public void setPropagateContexts(Boolean propagateContexts) {
            this.propagateContexts = propagateContexts;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class CxfRsConsumer extends CxfRsCommon<CxfRsConsumer> {
        private BindingStyle bindingStyle;
        private Boolean bridgeErrorHandler;
        private String publishedEndpointUrl;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;
        private List<Object> serviceBeans;

        /**
         * Sets how requests and responses will be mapped to/from Camel. Two
         * values are possible: SimpleConsumer: This binding style processes
         * request parameters, multiparts, etc. and maps them to IN headers, IN
         * attachments and to the message body. It aims to eliminate low-level
         * processing of org.apache.cxf.message.MessageContentsList. It also
         * also adds more flexibility and simplicity to the response mapping.
         * Only available for consumers. Default: The default style. For
         * consumers this passes on a MessageContentsList to the route,
         * requiring low-level processing in the route. This is the traditional
         * binding style, which simply dumps the
         * org.apache.cxf.message.MessageContentsList coming in from the CXF
         * stack onto the IN message body. The user is then responsible for
         * processing it according to the contract defined by the JAX-RS method
         * signature. Custom: allows you to specify a custom binding through the
         * binding option. The option is a
         * org.apache.camel.component.cxf.jaxrs.BindingStyle type.
         */
        public CxfRsConsumer bindingStyle(BindingStyle bindingStyle) {
            this.bindingStyle = bindingStyle;
            return (CxfRsConsumer) this;
        }

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public CxfRsConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (CxfRsConsumer) this;
        }

        /**
         * This option can override the endpointUrl that published from the WADL
         * which can be accessed with resource address url plus _wadl. The
         * option is a java.lang.String type.
         */
        public CxfRsConsumer publishedEndpointUrl(String publishedEndpointUrl) {
            this.publishedEndpointUrl = publishedEndpointUrl;
            return (CxfRsConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public CxfRsConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (CxfRsConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public CxfRsConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (CxfRsConsumer) this;
        }

        /**
         * The service beans which you want to export as REST service. Multiple
         * beans can be separated by comma. The option is a
         * java.util.List<java.lang.Object> type.
         */
        public CxfRsConsumer serviceBeans(List<Object> serviceBeans) {
            this.serviceBeans = serviceBeans;
            return (CxfRsConsumer) this;
        }

        public BindingStyle getBindingStyle() {
            return bindingStyle;
        }

        public void setBindingStyle(BindingStyle bindingStyle) {
            this.bindingStyle = bindingStyle;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public String getPublishedEndpointUrl() {
            return publishedEndpointUrl;
        }

        public void setPublishedEndpointUrl(String publishedEndpointUrl) {
            this.publishedEndpointUrl = publishedEndpointUrl;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }

        public List<Object> getServiceBeans() {
            return serviceBeans;
        }

        public void setServiceBeans(List<Object> serviceBeans) {
            this.serviceBeans = serviceBeans;
        }
    }

    public static class CxfRsProducer extends CxfRsCommon<CxfRsProducer> {
        private Object cookieHandler;
        private Object hostnameVerifier;
        private Object sslContextParameters;
        private Boolean throwExceptionOnFailure;
        private Boolean httpClientAPI;
        private Boolean ignoreDeleteMethodMessageBody;
        private Integer maxClientCacheSize;

        /**
         * Configure a cookie handler to maintain a HTTP session. The option is
         * a org.apache.camel.http.common.cookie.CookieHandler type.
         */
        public CxfRsProducer cookieHandler(Object cookieHandler) {
            this.cookieHandler = cookieHandler;
            return (CxfRsProducer) this;
        }

        /**
         * The hostname verifier to be used. Use the # notation to reference a
         * HostnameVerifier from the registry. The option is a
         * javax.net.ssl.HostnameVerifier type.
         */
        public CxfRsProducer hostnameVerifier(Object hostnameVerifier) {
            this.hostnameVerifier = hostnameVerifier;
            return (CxfRsProducer) this;
        }

        /**
         * The Camel SSL setting reference. Use the # notation to reference the
         * SSL Context. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        public CxfRsProducer sslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
            return (CxfRsProducer) this;
        }

        /**
         * This option tells the CxfRsProducer to inspect return codes and will
         * generate an Exception if the return code is larger than 207. The
         * option is a boolean type.
         */
        public CxfRsProducer throwExceptionOnFailure(
                boolean throwExceptionOnFailure) {
            this.throwExceptionOnFailure = throwExceptionOnFailure;
            return (CxfRsProducer) this;
        }

        /**
         * If it is true, the CxfRsProducer will use the HttpClientAPI to invoke
         * the service. If it is false, the CxfRsProducer will use the
         * ProxyClientAPI to invoke the service. The option is a boolean type.
         */
        public CxfRsProducer httpClientAPI(boolean httpClientAPI) {
            this.httpClientAPI = httpClientAPI;
            return (CxfRsProducer) this;
        }

        /**
         * This option is used to tell CxfRsProducer to ignore the message body
         * of the DELETE method when using HTTP API. The option is a boolean
         * type.
         */
        public CxfRsProducer ignoreDeleteMethodMessageBody(
                boolean ignoreDeleteMethodMessageBody) {
            this.ignoreDeleteMethodMessageBody = ignoreDeleteMethodMessageBody;
            return (CxfRsProducer) this;
        }

        /**
         * This option allows you to configure the maximum size of the cache.
         * The implementation caches CXF clients or ClientFactoryBean in
         * CxfProvider and CxfRsProvider. The option is a int type.
         */
        public CxfRsProducer maxClientCacheSize(int maxClientCacheSize) {
            this.maxClientCacheSize = maxClientCacheSize;
            return (CxfRsProducer) this;
        }

        public Object getCookieHandler() {
            return cookieHandler;
        }

        public void setCookieHandler(Object cookieHandler) {
            this.cookieHandler = cookieHandler;
        }

        public Object getHostnameVerifier() {
            return hostnameVerifier;
        }

        public void setHostnameVerifier(Object hostnameVerifier) {
            this.hostnameVerifier = hostnameVerifier;
        }

        public Object getSslContextParameters() {
            return sslContextParameters;
        }

        public void setSslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
        }

        public Boolean getThrowExceptionOnFailure() {
            return throwExceptionOnFailure;
        }

        public void setThrowExceptionOnFailure(Boolean throwExceptionOnFailure) {
            this.throwExceptionOnFailure = throwExceptionOnFailure;
        }

        public Boolean getHttpClientAPI() {
            return httpClientAPI;
        }

        public void setHttpClientAPI(Boolean httpClientAPI) {
            this.httpClientAPI = httpClientAPI;
        }

        public Boolean getIgnoreDeleteMethodMessageBody() {
            return ignoreDeleteMethodMessageBody;
        }

        public void setIgnoreDeleteMethodMessageBody(
                Boolean ignoreDeleteMethodMessageBody) {
            this.ignoreDeleteMethodMessageBody = ignoreDeleteMethodMessageBody;
        }

        public Integer getMaxClientCacheSize() {
            return maxClientCacheSize;
        }

        public void setMaxClientCacheSize(Integer maxClientCacheSize) {
            this.maxClientCacheSize = maxClientCacheSize;
        }
    }

    public static enum BindingStyle {
        SimpleConsumer, Default, Custom;
    }
}