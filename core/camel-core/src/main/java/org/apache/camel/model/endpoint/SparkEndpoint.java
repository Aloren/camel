/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The spark-rest component is used for hosting REST services which has been
 * defined using Camel rest-dsl.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class SparkEndpoint {


    public static class SparkCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String verb;
        private String path;
        private String accept;
        private Boolean disableStreamCache;
        private Boolean mapHeaders;
        private Boolean transferException;
        private Boolean urlDecodeHeaders;
        private Boolean basicPropertyBinding;
        private Boolean matchOnUriPrefix;
        private Object sparkBinding;
        private Boolean synchronous;

        /**
         * get, post, put, patch, delete, head, trace, connect, or options. The
         * option is a java.lang.String type.
         */
        public T verb(String verb) {
            this.verb = verb;
            return (T) this;
        }

        /**
         * The content path which support Spark syntax. The option is a
         * java.lang.String type.
         */
        public T path(String path) {
            this.path = path;
            return (T) this;
        }

        /**
         * Accept type such as: 'text/xml', or 'application/json'. By default we
         * accept all kinds of types. The option is a java.lang.String type.
         */
        public T accept(String accept) {
            this.accept = accept;
            return (T) this;
        }

        /**
         * Determines whether or not the raw input stream from Spark
         * HttpRequest#getContent() is cached or not (Camel will read the stream
         * into a in light-weight memory based Stream caching) cache. By default
         * Camel will cache the Netty input stream to support reading it
         * multiple times to ensure Camel can retrieve all data from the stream.
         * However you can set this option to true when you for example need to
         * access the raw stream, such as streaming it directly to a file or
         * other persistent store. Mind that if you enable this option, then you
         * cannot read the Netty stream multiple times out of the box, and you
         * would need manually to reset the reader index on the Spark raw
         * stream. The option is a boolean type.
         */
        public T disableStreamCache(boolean disableStreamCache) {
            this.disableStreamCache = disableStreamCache;
            return (T) this;
        }

        /**
         * If this option is enabled, then during binding from Spark to Camel
         * Message then the headers will be mapped as well (eg added as header
         * to the Camel Message as well). You can turn off this option to
         * disable this. The headers can still be accessed from the
         * org.apache.camel.component.sparkrest.SparkMessage message with the
         * method getRequest() that returns the Spark HTTP request instance. The
         * option is a boolean type.
         */
        public T mapHeaders(boolean mapHeaders) {
            this.mapHeaders = mapHeaders;
            return (T) this;
        }

        /**
         * If enabled and an Exchange failed processing on the consumer side,
         * and if the caused Exception was send back serialized in the response
         * as a application/x-java-serialized-object content type. This is by
         * default turned off. If you enable this then be aware that Java will
         * deserialize the incoming data from the request to Java and that can
         * be a potential security risk. The option is a boolean type.
         */
        public T transferException(boolean transferException) {
            this.transferException = transferException;
            return (T) this;
        }

        /**
         * If this option is enabled, then during binding from Spark to Camel
         * Message then the header values will be URL decoded (eg %20 will be a
         * space character.). The option is a boolean type.
         */
        public T urlDecodeHeaders(boolean urlDecodeHeaders) {
            this.urlDecodeHeaders = urlDecodeHeaders;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Whether or not the consumer should try to find a target consumer by
         * matching the URI prefix if no exact match is found. The option is a
         * boolean type.
         */
        public T matchOnUriPrefix(boolean matchOnUriPrefix) {
            this.matchOnUriPrefix = matchOnUriPrefix;
            return (T) this;
        }

        /**
         * To use a custom SparkBinding to map to/from Camel message. The option
         * is a org.apache.camel.component.sparkrest.SparkBinding type.
         */
        public T sparkBinding(Object sparkBinding) {
            this.sparkBinding = sparkBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public String getVerb() {
            return verb;
        }

        public void setVerb(String verb) {
            this.verb = verb;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }

        public String getAccept() {
            return accept;
        }

        public void setAccept(String accept) {
            this.accept = accept;
        }

        public Boolean getDisableStreamCache() {
            return disableStreamCache;
        }

        public void setDisableStreamCache(Boolean disableStreamCache) {
            this.disableStreamCache = disableStreamCache;
        }

        public Boolean getMapHeaders() {
            return mapHeaders;
        }

        public void setMapHeaders(Boolean mapHeaders) {
            this.mapHeaders = mapHeaders;
        }

        public Boolean getTransferException() {
            return transferException;
        }

        public void setTransferException(Boolean transferException) {
            this.transferException = transferException;
        }

        public Boolean getUrlDecodeHeaders() {
            return urlDecodeHeaders;
        }

        public void setUrlDecodeHeaders(Boolean urlDecodeHeaders) {
            this.urlDecodeHeaders = urlDecodeHeaders;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getMatchOnUriPrefix() {
            return matchOnUriPrefix;
        }

        public void setMatchOnUriPrefix(Boolean matchOnUriPrefix) {
            this.matchOnUriPrefix = matchOnUriPrefix;
        }

        public Object getSparkBinding() {
            return sparkBinding;
        }

        public void setSparkBinding(Object sparkBinding) {
            this.sparkBinding = sparkBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class SparkConsumer extends SparkCommon<SparkConsumer> {
        private Boolean bridgeErrorHandler;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public SparkConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (SparkConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public SparkConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (SparkConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public SparkConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (SparkConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class SparkProducer extends SparkCommon<SparkProducer> {
    }
}