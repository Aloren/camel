/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The gora component allows you to work with NoSQL databases using the Apache
 * Gora framework.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface GoraEndpointBuilder {


    public static class GoraCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        GoraCommonBuilder(String path) {
            super("gora", path);
        }
        /**
         * Instance name. The option is a <code>java.lang.String</code> type.
         */
        public T name(String name) {
            this.properties.put("name", name);
            return (T) this;
        }
        /**
         * The type of the dataStore. The option is a
         * <code>java.lang.String</code> type.
         */
        public T dataStoreClass(String dataStoreClass) {
            this.properties.put("dataStoreClass", dataStoreClass);
            return (T) this;
        }
        /**
         * The type class of the key. The option is a
         * <code>java.lang.String</code> type.
         */
        public T keyClass(String keyClass) {
            this.properties.put("keyClass", keyClass);
            return (T) this;
        }
        /**
         * The type of the value. The option is a <code>java.lang.String</code>
         * type.
         */
        public T valueClass(String valueClass) {
            this.properties.put("valueClass", valueClass);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Hadoop Configuration. The option is a
         * <code>org.apache.hadoop.conf.Configuration</code> type.
         */
        public T hadoopConfiguration(Object hadoopConfiguration) {
            this.properties.put("hadoopConfiguration", hadoopConfiguration);
            return (T) this;
        }
        /**
         * Hadoop Configuration. The option will be converted to a
         * <code>org.apache.hadoop.conf.Configuration</code> type.
         */
        public T hadoopConfiguration(String hadoopConfiguration) {
            this.properties.put("hadoopConfiguration", hadoopConfiguration);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class GoraConsumerBuilder
            extends
                GoraCommonBuilder<GoraConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public GoraConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public GoraConsumerBuilder bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (GoraConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public GoraConsumerBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (GoraConsumerBuilder) this;
        }
        /**
         * Number of concurrent consumers. The option is a <code>int</code>
         * type.
         */
        public GoraConsumerBuilder concurrentConsumers(int concurrentConsumers) {
            this.properties.put("concurrentConsumers", concurrentConsumers);
            return (GoraConsumerBuilder) this;
        }
        /**
         * Number of concurrent consumers. The option will be converted to a
         * <code>int</code> type.
         */
        public GoraConsumerBuilder concurrentConsumers(
                String concurrentConsumers) {
            this.properties.put("concurrentConsumers", concurrentConsumers);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The End Key. The option is a <code>java.lang.Object</code> type.
         */
        public GoraConsumerBuilder endKey(Object endKey) {
            this.properties.put("endKey", endKey);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The End Key. The option will be converted to a
         * <code>java.lang.Object</code> type.
         */
        public GoraConsumerBuilder endKey(String endKey) {
            this.properties.put("endKey", endKey);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The End Time. The option is a <code>long</code> type.
         */
        public GoraConsumerBuilder endTime(long endTime) {
            this.properties.put("endTime", endTime);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The End Time. The option will be converted to a <code>long</code>
         * type.
         */
        public GoraConsumerBuilder endTime(String endTime) {
            this.properties.put("endTime", endTime);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Fields. The option is a
         * <code>com.google.common.base.Strings</code> type.
         */
        public GoraConsumerBuilder fields(Object fields) {
            this.properties.put("fields", fields);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Fields. The option will be converted to a
         * <code>com.google.common.base.Strings</code> type.
         */
        public GoraConsumerBuilder fields(String fields) {
            this.properties.put("fields", fields);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Key Range From. The option is a <code>java.lang.Object</code>
         * type.
         */
        public GoraConsumerBuilder keyRangeFrom(Object keyRangeFrom) {
            this.properties.put("keyRangeFrom", keyRangeFrom);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Key Range From. The option will be converted to a
         * <code>java.lang.Object</code> type.
         */
        public GoraConsumerBuilder keyRangeFrom(String keyRangeFrom) {
            this.properties.put("keyRangeFrom", keyRangeFrom);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Key Range To. The option is a <code>java.lang.Object</code> type.
         */
        public GoraConsumerBuilder keyRangeTo(Object keyRangeTo) {
            this.properties.put("keyRangeTo", keyRangeTo);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Key Range To. The option will be converted to a
         * <code>java.lang.Object</code> type.
         */
        public GoraConsumerBuilder keyRangeTo(String keyRangeTo) {
            this.properties.put("keyRangeTo", keyRangeTo);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Limit. The option is a <code>long</code> type.
         */
        public GoraConsumerBuilder limit(long limit) {
            this.properties.put("limit", limit);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Limit. The option will be converted to a <code>long</code> type.
         */
        public GoraConsumerBuilder limit(String limit) {
            this.properties.put("limit", limit);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Start Key. The option is a <code>java.lang.Object</code> type.
         */
        public GoraConsumerBuilder startKey(Object startKey) {
            this.properties.put("startKey", startKey);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Start Key. The option will be converted to a
         * <code>java.lang.Object</code> type.
         */
        public GoraConsumerBuilder startKey(String startKey) {
            this.properties.put("startKey", startKey);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Start Time. The option is a <code>long</code> type.
         */
        public GoraConsumerBuilder startTime(long startTime) {
            this.properties.put("startTime", startTime);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Start Time. The option will be converted to a <code>long</code>
         * type.
         */
        public GoraConsumerBuilder startTime(String startTime) {
            this.properties.put("startTime", startTime);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Time Range From. The option is a <code>long</code> type.
         */
        public GoraConsumerBuilder timeRangeFrom(long timeRangeFrom) {
            this.properties.put("timeRangeFrom", timeRangeFrom);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Time Range From. The option will be converted to a
         * <code>long</code> type.
         */
        public GoraConsumerBuilder timeRangeFrom(String timeRangeFrom) {
            this.properties.put("timeRangeFrom", timeRangeFrom);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Time Range To. The option is a <code>long</code> type.
         */
        public GoraConsumerBuilder timeRangeTo(long timeRangeTo) {
            this.properties.put("timeRangeTo", timeRangeTo);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Time Range To. The option will be converted to a
         * <code>long</code> type.
         */
        public GoraConsumerBuilder timeRangeTo(String timeRangeTo) {
            this.properties.put("timeRangeTo", timeRangeTo);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Timestamp. The option is a <code>long</code> type.
         */
        public GoraConsumerBuilder timestamp(long timestamp) {
            this.properties.put("timestamp", timestamp);
            return (GoraConsumerBuilder) this;
        }
        /**
         * The Timestamp. The option will be converted to a <code>long</code>
         * type.
         */
        public GoraConsumerBuilder timestamp(String timestamp) {
            this.properties.put("timestamp", timestamp);
            return (GoraConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public GoraConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (GoraConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public GoraConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (GoraConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public GoraConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (GoraConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public GoraConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (GoraConsumerBuilder) this;
        }
    }

    public static class GoraProducerBuilder
            extends
                GoraCommonBuilder<GoraProducerBuilder>
            implements
                EndpointProducerBuilder {
        public GoraProducerBuilder(String path) {
            super(path);
        }
        /**
         * Flush on every operation. The option is a <code>boolean</code> type.
         */
        public GoraProducerBuilder flushOnEveryOperation(
                boolean flushOnEveryOperation) {
            this.properties.put("flushOnEveryOperation", flushOnEveryOperation);
            return (GoraProducerBuilder) this;
        }
        /**
         * Flush on every operation. The option will be converted to a
         * <code>boolean</code> type.
         */
        public GoraProducerBuilder flushOnEveryOperation(
                String flushOnEveryOperation) {
            this.properties.put("flushOnEveryOperation", flushOnEveryOperation);
            return (GoraProducerBuilder) this;
        }
    }
    public default GoraConsumerBuilder fromGora(String path) {
        return new GoraConsumerBuilder(path);
    }
    public default GoraProducerBuilder toGora(String path) {
        return new GoraProducerBuilder(path);
    }
}