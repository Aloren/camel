/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Component for working with documents stored in MongoDB database.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class MongoDbEndpoint {


    public static class MongoDbCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String connectionBean;
        private String collection;
        private String collectionIndex;
        private Boolean createCollection;
        private String database;
        private MongoDbOperation operation;
        private MongoDbOutputType outputType;
        private Boolean basicPropertyBinding;
        private Long cursorRegenerationDelay;
        private Boolean dynamicity;
        private Boolean synchronous;
        private Boolean writeResultAsHeader;
        private String persistentId;
        private Boolean persistentTailTracking;
        private String tailTrackCollection;
        private String tailTrackDb;
        private String tailTrackField;
        private String tailTrackIncreasingField;

        /**
         * Name of com.mongodb.Mongo to use. The option is a java.lang.String
         * type.
         */
        public T connectionBean(String connectionBean) {
            this.connectionBean = connectionBean;
            return (T) this;
        }

        /**
         * Sets the name of the MongoDB collection to bind to this endpoint. The
         * option is a java.lang.String type.
         */
        public T collection(String collection) {
            this.collection = collection;
            return (T) this;
        }

        /**
         * Sets the collection index (JSON FORMAT : { field1 : order1, field2 :
         * order2}). The option is a java.lang.String type.
         */
        public T collectionIndex(String collectionIndex) {
            this.collectionIndex = collectionIndex;
            return (T) this;
        }

        /**
         * Create collection during initialisation if it doesn't exist. Default
         * is true. The option is a boolean type.
         */
        public T createCollection(boolean createCollection) {
            this.createCollection = createCollection;
            return (T) this;
        }

        /**
         * Sets the name of the MongoDB database to target. The option is a
         * java.lang.String type.
         */
        public T database(String database) {
            this.database = database;
            return (T) this;
        }

        /**
         * Sets the operation this endpoint will execute against MongoDB. For
         * possible values, see MongoDbOperation. The option is a
         * org.apache.camel.component.mongodb3.MongoDbOperation type.
         */
        public T operation(MongoDbOperation operation) {
            this.operation = operation;
            return (T) this;
        }

        /**
         * Convert the output of the producer to the selected type :
         * DocumentList Document or MongoIterable. DocumentList or MongoIterable
         * applies to findAll and aggregate. Document applies to all other
         * operations. The option is a
         * org.apache.camel.component.mongodb3.MongoDbOutputType type.
         */
        public T outputType(MongoDbOutputType outputType) {
            this.outputType = outputType;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * MongoDB tailable cursors will block until new data arrives. If no new
         * data is inserted, after some time the cursor will be automatically
         * freed and closed by the MongoDB server. The client is expected to
         * regenerate the cursor if needed. This value specifies the time to
         * wait before attempting to fetch a new cursor, and if the attempt
         * fails, how long before the next attempt is made. Default value is
         * 1000ms. The option is a long type.
         */
        public T cursorRegenerationDelay(long cursorRegenerationDelay) {
            this.cursorRegenerationDelay = cursorRegenerationDelay;
            return (T) this;
        }

        /**
         * Sets whether this endpoint will attempt to dynamically resolve the
         * target database and collection from the incoming Exchange properties.
         * Can be used to override at runtime the database and collection
         * specified on the otherwise static endpoint URI. It is disabled by
         * default to boost performance. Enabling it will take a minimal
         * performance hit. The option is a boolean type.
         */
        public T dynamicity(boolean dynamicity) {
            this.dynamicity = dynamicity;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        /**
         * In write operations, it determines whether instead of returning
         * WriteResult as the body of the OUT message, we transfer the IN
         * message to the OUT and attach the WriteResult as a header. The option
         * is a boolean type.
         */
        public T writeResultAsHeader(boolean writeResultAsHeader) {
            this.writeResultAsHeader = writeResultAsHeader;
            return (T) this;
        }

        /**
         * One tail tracking collection can host many trackers for several
         * tailable consumers. To keep them separate, each tracker should have
         * its own unique persistentId. The option is a java.lang.String type.
         */
        public T persistentId(String persistentId) {
            this.persistentId = persistentId;
            return (T) this;
        }

        /**
         * Enable persistent tail tracking, which is a mechanism to keep track
         * of the last consumed message across system restarts. The next time
         * the system is up, the endpoint will recover the cursor from the point
         * where it last stopped slurping records. The option is a boolean type.
         */
        public T persistentTailTracking(boolean persistentTailTracking) {
            this.persistentTailTracking = persistentTailTracking;
            return (T) this;
        }

        /**
         * Collection where tail tracking information will be persisted. If not
         * specified, MongoDbTailTrackingConfig#DEFAULT_COLLECTION will be used
         * by default. The option is a java.lang.String type.
         */
        public T tailTrackCollection(String tailTrackCollection) {
            this.tailTrackCollection = tailTrackCollection;
            return (T) this;
        }

        /**
         * Indicates what database the tail tracking mechanism will persist to.
         * If not specified, the current database will be picked by default.
         * Dynamicity will not be taken into account even if enabled, i.e. the
         * tail tracking database will not vary past endpoint initialisation.
         * The option is a java.lang.String type.
         */
        public T tailTrackDb(String tailTrackDb) {
            this.tailTrackDb = tailTrackDb;
            return (T) this;
        }

        /**
         * Field where the last tracked value will be placed. If not specified,
         * MongoDbTailTrackingConfig#DEFAULT_FIELD will be used by default. The
         * option is a java.lang.String type.
         */
        public T tailTrackField(String tailTrackField) {
            this.tailTrackField = tailTrackField;
            return (T) this;
        }

        /**
         * Correlation field in the incoming record which is of increasing
         * nature and will be used to position the tailing cursor every time it
         * is generated. The cursor will be (re)created with a query of type:
         * tailTrackIncreasingField lastValue (possibly recovered from
         * persistent tail tracking). Can be of type Integer, Date, String, etc.
         * NOTE: No support for dot notation at the current time, so the field
         * should be at the top level of the document. The option is a
         * java.lang.String type.
         */
        public T tailTrackIncreasingField(String tailTrackIncreasingField) {
            this.tailTrackIncreasingField = tailTrackIncreasingField;
            return (T) this;
        }

        public String getConnectionBean() {
            return connectionBean;
        }

        public void setConnectionBean(String connectionBean) {
            this.connectionBean = connectionBean;
        }

        public String getCollection() {
            return collection;
        }

        public void setCollection(String collection) {
            this.collection = collection;
        }

        public String getCollectionIndex() {
            return collectionIndex;
        }

        public void setCollectionIndex(String collectionIndex) {
            this.collectionIndex = collectionIndex;
        }

        public Boolean getCreateCollection() {
            return createCollection;
        }

        public void setCreateCollection(Boolean createCollection) {
            this.createCollection = createCollection;
        }

        public String getDatabase() {
            return database;
        }

        public void setDatabase(String database) {
            this.database = database;
        }

        public MongoDbOperation getOperation() {
            return operation;
        }

        public void setOperation(MongoDbOperation operation) {
            this.operation = operation;
        }

        public MongoDbOutputType getOutputType() {
            return outputType;
        }

        public void setOutputType(MongoDbOutputType outputType) {
            this.outputType = outputType;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Long getCursorRegenerationDelay() {
            return cursorRegenerationDelay;
        }

        public void setCursorRegenerationDelay(Long cursorRegenerationDelay) {
            this.cursorRegenerationDelay = cursorRegenerationDelay;
        }

        public Boolean getDynamicity() {
            return dynamicity;
        }

        public void setDynamicity(Boolean dynamicity) {
            this.dynamicity = dynamicity;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Boolean getWriteResultAsHeader() {
            return writeResultAsHeader;
        }

        public void setWriteResultAsHeader(Boolean writeResultAsHeader) {
            this.writeResultAsHeader = writeResultAsHeader;
        }

        public String getPersistentId() {
            return persistentId;
        }

        public void setPersistentId(String persistentId) {
            this.persistentId = persistentId;
        }

        public Boolean getPersistentTailTracking() {
            return persistentTailTracking;
        }

        public void setPersistentTailTracking(Boolean persistentTailTracking) {
            this.persistentTailTracking = persistentTailTracking;
        }

        public String getTailTrackCollection() {
            return tailTrackCollection;
        }

        public void setTailTrackCollection(String tailTrackCollection) {
            this.tailTrackCollection = tailTrackCollection;
        }

        public String getTailTrackDb() {
            return tailTrackDb;
        }

        public void setTailTrackDb(String tailTrackDb) {
            this.tailTrackDb = tailTrackDb;
        }

        public String getTailTrackField() {
            return tailTrackField;
        }

        public void setTailTrackField(String tailTrackField) {
            this.tailTrackField = tailTrackField;
        }

        public String getTailTrackIncreasingField() {
            return tailTrackIncreasingField;
        }

        public void setTailTrackIncreasingField(String tailTrackIncreasingField) {
            this.tailTrackIncreasingField = tailTrackIncreasingField;
        }
    }

    public static class MongoDbConsumer
            extends
                MongoDbCommon<MongoDbConsumer> {
        private Boolean bridgeErrorHandler;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public MongoDbConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (MongoDbConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public MongoDbConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (MongoDbConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public MongoDbConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (MongoDbConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class MongoDbProducer
            extends
                MongoDbCommon<MongoDbProducer> {
    }

    public static enum MongoDbOperation {
        findById, findOneByQuery, findAll, findDistinct, insert, save, update, remove, bulkWrite, aggregate, getDbStats, getColStats, count, command;
    }

    public static enum MongoDbOutputType {
        DocumentList, Document, MongoIterable;
    }
}