/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.security.PrivateKey;
import java.security.cert.Certificate;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Component used for transferring data secure and reliable over the internet
 * using the AS2 protocol.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface AS2EndpointBuilder {


    /**
     * Base class for the AS2 component builders.
     */
    public static class AS2CommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        AS2CommonBuilder(String path) {
            super("as2", path);
        }
        /**
         * What kind of operation to perform. The option is a
         * <code>org.apache.camel.component.as2.internal.AS2ApiName</code> type.
         */
        public T apiName(AS2ApiName apiName) {
            this.properties.put("apiName", apiName);
            return (T) this;
        }
        /**
         * What kind of operation to perform. The option will be converted to a
         * <code>org.apache.camel.component.as2.internal.AS2ApiName</code> type.
         */
        public T apiName(String apiName) {
            this.properties.put("apiName", apiName);
            return (T) this;
        }
        /**
         * What sub operation to use for the selected operation. The option is a
         * <code>java.lang.String</code> type.
         */
        public T methodName(String methodName) {
            this.properties.put("methodName", methodName);
            return (T) this;
        }
        /**
         * The value of the AS2From header of AS2 message. The option is a
         * <code>java.lang.String</code> type.
         */
        public T as2From(String as2From) {
            this.properties.put("as2From", as2From);
            return (T) this;
        }
        /**
         * The structure of AS2 Message. One of: PLAIN - No encryption, no
         * signature, SIGNED - No encryption, signature, ENCRYPTED - Encryption,
         * no signature, ENCRYPTED_SIGNED - Encryption, signature. The option is
         * a <code>org.apache.camel.component.as2.api.AS2MessageStructure</code>
         * type.
         */
        public T as2MessageStructure(AS2MessageStructure as2MessageStructure) {
            this.properties.put("as2MessageStructure", as2MessageStructure);
            return (T) this;
        }
        /**
         * The structure of AS2 Message. One of: PLAIN - No encryption, no
         * signature, SIGNED - No encryption, signature, ENCRYPTED - Encryption,
         * no signature, ENCRYPTED_SIGNED - Encryption, signature. The option
         * will be converted to a
         * <code>org.apache.camel.component.as2.api.AS2MessageStructure</code>
         * type.
         */
        public T as2MessageStructure(String as2MessageStructure) {
            this.properties.put("as2MessageStructure", as2MessageStructure);
            return (T) this;
        }
        /**
         * The value of the AS2To header of AS2 message. The option is a
         * <code>java.lang.String</code> type.
         */
        public T as2To(String as2To) {
            this.properties.put("as2To", as2To);
            return (T) this;
        }
        /**
         * The version of the AS2 protocol. The option is a
         * <code>java.lang.String</code> type.
         */
        public T as2Version(String as2Version) {
            this.properties.put("as2Version", as2Version);
            return (T) this;
        }
        /**
         * The Client Fully Qualified Domain Name (FQDN). Used in message ids
         * sent by endpoint. The option is a <code>java.lang.String</code> type.
         */
        public T clientFqdn(String clientFqdn) {
            this.properties.put("clientFqdn", clientFqdn);
            return (T) this;
        }
        /**
         * The algorithm used to compress EDI message. The option is a
         * <code>org.apache.camel.component.as2.api.AS2CompressionAlgorithm</code> type.
         */
        public T compressionAlgorithm(
                AS2CompressionAlgorithm compressionAlgorithm) {
            this.properties.put("compressionAlgorithm", compressionAlgorithm);
            return (T) this;
        }
        /**
         * The algorithm used to compress EDI message. The option will be
         * converted to a
         * <code>org.apache.camel.component.as2.api.AS2CompressionAlgorithm</code> type.
         */
        public T compressionAlgorithm(String compressionAlgorithm) {
            this.properties.put("compressionAlgorithm", compressionAlgorithm);
            return (T) this;
        }
        /**
         * The key used to encrypt the EDI message. The option is a
         * <code>java.security.PrivateKey</code> type.
         */
        public T decryptingPrivateKey(PrivateKey decryptingPrivateKey) {
            this.properties.put("decryptingPrivateKey", decryptingPrivateKey);
            return (T) this;
        }
        /**
         * The key used to encrypt the EDI message. The option will be converted
         * to a <code>java.security.PrivateKey</code> type.
         */
        public T decryptingPrivateKey(String decryptingPrivateKey) {
            this.properties.put("decryptingPrivateKey", decryptingPrivateKey);
            return (T) this;
        }
        /**
         * The value of the Disposition-Notification-To header. Assigning a
         * value to this parameter requests a message disposition notification
         * (MDN) for the AS2 message. The option is a
         * <code>java.lang.String</code> type.
         */
        public T dispositionNotificationTo(String dispositionNotificationTo) {
            this.properties.put("dispositionNotificationTo", dispositionNotificationTo);
            return (T) this;
        }
        /**
         * The transfer encoding of EDI message. The option is a
         * <code>java.lang.String</code> type.
         */
        public T ediMessageTransferEncoding(String ediMessageTransferEncoding) {
            this.properties.put("ediMessageTransferEncoding", ediMessageTransferEncoding);
            return (T) this;
        }
        /**
         * The content type of EDI message. One of application/edifact,
         * application/edi-x12, application/edi-consent. The option is a
         * <code>org.apache.http.entity.ContentType</code> type.
         */
        public T ediMessageType(Object ediMessageType) {
            this.properties.put("ediMessageType", ediMessageType);
            return (T) this;
        }
        /**
         * The content type of EDI message. One of application/edifact,
         * application/edi-x12, application/edi-consent. The option will be
         * converted to a <code>org.apache.http.entity.ContentType</code> type.
         */
        public T ediMessageType(String ediMessageType) {
            this.properties.put("ediMessageType", ediMessageType);
            return (T) this;
        }
        /**
         * The algorithm used to encrypt EDI message. The option is a
         * <code>org.apache.camel.component.as2.api.AS2EncryptionAlgorithm</code> type.
         */
        public T encryptingAlgorithm(AS2EncryptionAlgorithm encryptingAlgorithm) {
            this.properties.put("encryptingAlgorithm", encryptingAlgorithm);
            return (T) this;
        }
        /**
         * The algorithm used to encrypt EDI message. The option will be
         * converted to a
         * <code>org.apache.camel.component.as2.api.AS2EncryptionAlgorithm</code> type.
         */
        public T encryptingAlgorithm(String encryptingAlgorithm) {
            this.properties.put("encryptingAlgorithm", encryptingAlgorithm);
            return (T) this;
        }
        /**
         * The chain of certificates used to encrypt EDI message. The option is
         * a <code>java.security.cert.Certificate[]</code> type.
         */
        public T encryptingCertificateChain(
                Certificate[] encryptingCertificateChain) {
            this.properties.put("encryptingCertificateChain", encryptingCertificateChain);
            return (T) this;
        }
        /**
         * The chain of certificates used to encrypt EDI message. The option
         * will be converted to a <code>java.security.cert.Certificate[]</code>
         * type.
         */
        public T encryptingCertificateChain(String encryptingCertificateChain) {
            this.properties.put("encryptingCertificateChain", encryptingCertificateChain);
            return (T) this;
        }
        /**
         * The value of the From header of AS2 message. The option is a
         * <code>java.lang.String</code> type.
         */
        public T from(String from) {
            this.properties.put("from", from);
            return (T) this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * The option is a <code>java.lang.String</code> type.
         */
        public T inBody(String inBody) {
            this.properties.put("inBody", inBody);
            return (T) this;
        }
        /**
         * The template used to format MDN message. The option is a
         * <code>java.lang.String</code> type.
         */
        public T mdnMessageTemplate(String mdnMessageTemplate) {
            this.properties.put("mdnMessageTemplate", mdnMessageTemplate);
            return (T) this;
        }
        /**
         * The request URI of EDI message. The option is a
         * <code>java.lang.String</code> type.
         */
        public T requestUri(String requestUri) {
            this.properties.put("requestUri", requestUri);
            return (T) this;
        }
        /**
         * The value included in the Server message header identifying the AS2
         * Server. The option is a <code>java.lang.String</code> type.
         */
        public T server(String server) {
            this.properties.put("server", server);
            return (T) this;
        }
        /**
         * The Server Fully Qualified Domain Name (FQDN). Used in message ids
         * sent by endpoint. The option is a <code>java.lang.String</code> type.
         */
        public T serverFqdn(String serverFqdn) {
            this.properties.put("serverFqdn", serverFqdn);
            return (T) this;
        }
        /**
         * The port number of server. The option is a
         * <code>java.lang.Integer</code> type.
         */
        public T serverPortNumber(Integer serverPortNumber) {
            this.properties.put("serverPortNumber", serverPortNumber);
            return (T) this;
        }
        /**
         * The port number of server. The option will be converted to a
         * <code>java.lang.Integer</code> type.
         */
        public T serverPortNumber(String serverPortNumber) {
            this.properties.put("serverPortNumber", serverPortNumber);
            return (T) this;
        }
        /**
         * The list of algorithms, in order of preference, requested to generate
         * a message integrity check (MIC) returned in message dispostion
         * notification (MDN). The option is a <code>java.lang.String[]</code>
         * type.
         */
        public T signedReceiptMicAlgorithms(String[] signedReceiptMicAlgorithms) {
            this.properties.put("signedReceiptMicAlgorithms", signedReceiptMicAlgorithms);
            return (T) this;
        }
        /**
         * The list of algorithms, in order of preference, requested to generate
         * a message integrity check (MIC) returned in message dispostion
         * notification (MDN). The option will be converted to a
         * <code>java.lang.String[]</code> type.
         */
        public T signedReceiptMicAlgorithms(String signedReceiptMicAlgorithms) {
            this.properties.put("signedReceiptMicAlgorithms", signedReceiptMicAlgorithms);
            return (T) this;
        }
        /**
         * The algorithm used to sign EDI message. The option is a
         * <code>org.apache.camel.component.as2.api.AS2SignatureAlgorithm</code>
         * type.
         */
        public T signingAlgorithm(AS2SignatureAlgorithm signingAlgorithm) {
            this.properties.put("signingAlgorithm", signingAlgorithm);
            return (T) this;
        }
        /**
         * The algorithm used to sign EDI message. The option will be converted
         * to a
         * <code>org.apache.camel.component.as2.api.AS2SignatureAlgorithm</code>
         * type.
         */
        public T signingAlgorithm(String signingAlgorithm) {
            this.properties.put("signingAlgorithm", signingAlgorithm);
            return (T) this;
        }
        /**
         * The chain of certificates used to sign EDI message. The option is a
         * <code>java.security.cert.Certificate[]</code> type.
         */
        public T signingCertificateChain(Certificate[] signingCertificateChain) {
            this.properties.put("signingCertificateChain", signingCertificateChain);
            return (T) this;
        }
        /**
         * The chain of certificates used to sign EDI message. The option will
         * be converted to a <code>java.security.cert.Certificate[]</code> type.
         */
        public T signingCertificateChain(String signingCertificateChain) {
            this.properties.put("signingCertificateChain", signingCertificateChain);
            return (T) this;
        }
        /**
         * The key used to sign the EDI message. The option is a
         * <code>java.security.PrivateKey</code> type.
         */
        public T signingPrivateKey(PrivateKey signingPrivateKey) {
            this.properties.put("signingPrivateKey", signingPrivateKey);
            return (T) this;
        }
        /**
         * The key used to sign the EDI message. The option will be converted to
         * a <code>java.security.PrivateKey</code> type.
         */
        public T signingPrivateKey(String signingPrivateKey) {
            this.properties.put("signingPrivateKey", signingPrivateKey);
            return (T) this;
        }
        /**
         * The value of Subject header of AS2 message. The option is a
         * <code>java.lang.String</code> type.
         */
        public T subject(String subject) {
            this.properties.put("subject", subject);
            return (T) this;
        }
        /**
         * The host name (IP or DNS name) of target host. The option is a
         * <code>java.lang.String</code> type.
         */
        public T targetHostname(String targetHostname) {
            this.properties.put("targetHostname", targetHostname);
            return (T) this;
        }
        /**
         * The port number of target host. -1 indicates the scheme default port.
         * The option is a <code>java.lang.Integer</code> type.
         */
        public T targetPortNumber(Integer targetPortNumber) {
            this.properties.put("targetPortNumber", targetPortNumber);
            return (T) this;
        }
        /**
         * The port number of target host. -1 indicates the scheme default port.
         * The option will be converted to a <code>java.lang.Integer</code>
         * type.
         */
        public T targetPortNumber(String targetPortNumber) {
            this.properties.put("targetPortNumber", targetPortNumber);
            return (T) this;
        }
        /**
         * The value included in the User-Agent message header identifying the
         * AS2 user agent. The option is a <code>java.lang.String</code> type.
         */
        public T userAgent(String userAgent) {
            this.properties.put("userAgent", userAgent);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint consumers for the AS2 component.
     */
    public static class AS2ConsumerBuilder
            extends
                AS2CommonBuilder<AS2ConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public AS2ConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public AS2ConsumerBuilder bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (AS2ConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public AS2ConsumerBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (AS2ConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public AS2ConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (AS2ConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public AS2ConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (AS2ConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public AS2ConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (AS2ConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public AS2ConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (AS2ConsumerBuilder) this;
        }
    }

    /**
     * Builder for endpoint producers for the AS2 component.
     */
    public static class AS2ProducerBuilder
            extends
                AS2CommonBuilder<AS2ProducerBuilder>
            implements
                EndpointProducerBuilder {
        public AS2ProducerBuilder(String path) {
            super(path);
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.as2.internal.AS2ApiName</code> enum.
     */
    public static enum AS2ApiName {
        CLIENT, SERVER;
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.as2.api.AS2MessageStructure</code> enum.
     */
    public static enum AS2MessageStructure {
        PLAIN, SIGNED, ENCRYPTED, SIGNED_ENCRYPTED, PLAIN_COMPRESSED, SIGNED_COMPRESSED, ENCRYPTED_COMPRESSED, ENCRYPTED_COMPRESSED_SIGNED;
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.as2.api.AS2CompressionAlgorithm</code>
     * enum.
     */
    public static enum AS2CompressionAlgorithm {
        ZLIB;
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.as2.api.AS2EncryptionAlgorithm</code>
     * enum.
     */
    public static enum AS2EncryptionAlgorithm {
        AES128_CBC, AES192_CBC, AES256_CBC, AES128_CCM, AES192_CCM, AES256_CCM, AES128_GCM, AES192_GCM, AES256_GCM, CAMELLIA128_CBC, CAMELLIA192_CBC, CAMELLIA256_CBC, CAST5_CBC, DES_CBC, DES_EDE3_CBC, GOST28147_GCFB, IDEA_CBC, RC2_CBC, RC4, SEED_CBC;
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.as2.api.AS2SignatureAlgorithm</code>
     * enum.
     */
    public static enum AS2SignatureAlgorithm {
        SHA3_224WITHRSA, SHA3_256WITHRSA, SHA3_384withRSA, SHA3_512WITHRSA, MD5WITHRSA, SHA1WITHRSA, MD2WITHRSA, SHA224WITHRSA, SHA256WITHRSA, SHA384WITHRSA, SHA512WITHRSA, RIPEMD128WITHRSA, RIPEMD160WITHRSA, RIPEMD256WITHRSA, SHA224WITHDSA, SHA256WITHDSA, SHA384WITHDSA, SHA512WITHDSA, SHA3_224WITHDSA, SHA3_256WITHDSA, SHA3_384WITHDSA, SHA3_512WITHDSA, SHA1WITHDSA, SHA3_224WITHECDSA, SHA3_256WITHECDSA, SHA3_384WITHECDSA, SHA3_512WITHECDSA, SHA1WITHECDSA, SHA224WITHECDSA, SHA256WITHECDSA, SHA384WITHECDSA, SHA512WITHECDSA, SHA1WITHPLAIN_ECDSA, SHA224WITHPLAIN_ECDSA, SHA256WITHPLAIN_ECDSA, SHA384WITHPLAIN_ECDSA, SHA512WITHPLAIN_ECDSA, RIPEMD160WITHPLAIN_ECDSA, SHA1WITHRSAANDMGF1, SHA224WITHRSAANDMGF1, SHA256WITHRSAANDMGF1, SHA384WITHRSAANDMGF1, SHA512WITHRSAANDMGF1, SHA3_224WITHRSAANDMGF1, SHA3_256WITHRSAANDMGF1, SHA3_384WITHRSAANDMGF1, SHA3_512WITHRSAANDMGF1;
    }
    /**
     * Component used for transferring data secure and reliable over the
     * internet using the AS2 protocol. Creates a builder to build a consumer
     * endpoint for the AS2 component.
     */
    public default AS2ConsumerBuilder fromAS2(String path) {
        return new AS2ConsumerBuilder(path);
    }
    /**
     * Component used for transferring data secure and reliable over the
     * internet using the AS2 protocol. Creates a builder to build a producer
     * endpoint for the AS2 component.
     */
    public default AS2ProducerBuilder toAS2(String path) {
        return new AS2ProducerBuilder(path);
    }
}