/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Component for working with MongoDB GridFS.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class GridFsEndpoint {


    public static class GridFsCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String connectionBean;
        private String bucket;
        private String database;
        private Object readPreference;
        private Object writeConcern;
        private Object writeConcernRef;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;

        /**
         * Name of com.mongodb.Mongo to use. The option is a java.lang.String
         * type.
         */
        public T connectionBean(String connectionBean) {
            this.connectionBean = connectionBean;
            return (T) this;
        }

        /**
         * Sets the name of the GridFS bucket within the database. Default is
         * fs. The option is a java.lang.String type.
         */
        public T bucket(String bucket) {
            this.bucket = bucket;
            return (T) this;
        }

        /**
         * Sets the name of the MongoDB database to target. The option is a
         * java.lang.String type.
         */
        public T database(String database) {
            this.database = database;
            return (T) this;
        }

        /**
         * Sets a MongoDB ReadPreference on the Mongo connection. Read
         * preferences set directly on the connection will be overridden by this
         * setting. The com.mongodb.ReadPreference#valueOf(String) utility
         * method is used to resolve the passed readPreference value. Some
         * examples for the possible values are nearest, primary or secondary
         * etc. The option is a com.mongodb.ReadPreference type.
         */
        public T readPreference(Object readPreference) {
            this.readPreference = readPreference;
            return (T) this;
        }

        /**
         * Set the WriteConcern for write operations on MongoDB using the
         * standard ones. Resolved from the fields of the WriteConcern class by
         * calling the WriteConcern#valueOf(String) method. The option is a
         * com.mongodb.WriteConcern type.
         */
        public T writeConcern(Object writeConcern) {
            this.writeConcern = writeConcern;
            return (T) this;
        }

        /**
         * Set the WriteConcern for write operations on MongoDB, passing in the
         * bean ref to a custom WriteConcern which exists in the Registry. You
         * can also use standard WriteConcerns by passing in their key. See the
         * {link #setWriteConcern(String) setWriteConcern} method. The option is
         * a com.mongodb.WriteConcern type.
         */
        public T writeConcernRef(Object writeConcernRef) {
            this.writeConcernRef = writeConcernRef;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public String getConnectionBean() {
            return connectionBean;
        }

        public void setConnectionBean(String connectionBean) {
            this.connectionBean = connectionBean;
        }

        public String getBucket() {
            return bucket;
        }

        public void setBucket(String bucket) {
            this.bucket = bucket;
        }

        public String getDatabase() {
            return database;
        }

        public void setDatabase(String database) {
            this.database = database;
        }

        public Object getReadPreference() {
            return readPreference;
        }

        public void setReadPreference(Object readPreference) {
            this.readPreference = readPreference;
        }

        public Object getWriteConcern() {
            return writeConcern;
        }

        public void setWriteConcern(Object writeConcern) {
            this.writeConcern = writeConcern;
        }

        public Object getWriteConcernRef() {
            return writeConcernRef;
        }

        public void setWriteConcernRef(Object writeConcernRef) {
            this.writeConcernRef = writeConcernRef;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class GridFsConsumer extends GridFsCommon<GridFsConsumer> {
        private Boolean bridgeErrorHandler;
        private Long delay;
        private String fileAttributeName;
        private Long initialDelay;
        private String persistentTSCollection;
        private String persistentTSObject;
        private String query;
        private QueryStrategy queryStrategy;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public GridFsConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (GridFsConsumer) this;
        }

        /**
         * Sets the delay between polls within the Consumer. Default is 500ms.
         * The option is a long type.
         */
        public GridFsConsumer delay(long delay) {
            this.delay = delay;
            return (GridFsConsumer) this;
        }

        /**
         * If the QueryType uses a FileAttribute, this sets the name of the
         * attribute that is used. Default is camel-processed. The option is a
         * java.lang.String type.
         */
        public GridFsConsumer fileAttributeName(String fileAttributeName) {
            this.fileAttributeName = fileAttributeName;
            return (GridFsConsumer) this;
        }

        /**
         * Sets the initialDelay before the consumer will start polling. Default
         * is 1000ms. The option is a long type.
         */
        public GridFsConsumer initialDelay(long initialDelay) {
            this.initialDelay = initialDelay;
            return (GridFsConsumer) this;
        }

        /**
         * If the QueryType uses a persistent timestamp, this sets the name of
         * the collection within the DB to store the timestamp. The option is a
         * java.lang.String type.
         */
        public GridFsConsumer persistentTSCollection(
                String persistentTSCollection) {
            this.persistentTSCollection = persistentTSCollection;
            return (GridFsConsumer) this;
        }

        /**
         * If the QueryType uses a persistent timestamp, this is the ID of the
         * object in the collection to store the timestamp. The option is a
         * java.lang.String type.
         */
        public GridFsConsumer persistentTSObject(String persistentTSObject) {
            this.persistentTSObject = persistentTSObject;
            return (GridFsConsumer) this;
        }

        /**
         * Additional query parameters (in JSON) that are used to configure the
         * query used for finding files in the GridFsConsumer. The option is a
         * java.lang.String type.
         */
        public GridFsConsumer query(String query) {
            this.query = query;
            return (GridFsConsumer) this;
        }

        /**
         * Sets the QueryStrategy that is used for polling for new files.
         * Default is Timestamp. The option is a
         * org.apache.camel.component.mongodb.gridfs.QueryStrategy type.
         */
        public GridFsConsumer queryStrategy(QueryStrategy queryStrategy) {
            this.queryStrategy = queryStrategy;
            return (GridFsConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public GridFsConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (GridFsConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public GridFsConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (GridFsConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public Long getDelay() {
            return delay;
        }

        public void setDelay(Long delay) {
            this.delay = delay;
        }

        public String getFileAttributeName() {
            return fileAttributeName;
        }

        public void setFileAttributeName(String fileAttributeName) {
            this.fileAttributeName = fileAttributeName;
        }

        public Long getInitialDelay() {
            return initialDelay;
        }

        public void setInitialDelay(Long initialDelay) {
            this.initialDelay = initialDelay;
        }

        public String getPersistentTSCollection() {
            return persistentTSCollection;
        }

        public void setPersistentTSCollection(String persistentTSCollection) {
            this.persistentTSCollection = persistentTSCollection;
        }

        public String getPersistentTSObject() {
            return persistentTSObject;
        }

        public void setPersistentTSObject(String persistentTSObject) {
            this.persistentTSObject = persistentTSObject;
        }

        public String getQuery() {
            return query;
        }

        public void setQuery(String query) {
            this.query = query;
        }

        public QueryStrategy getQueryStrategy() {
            return queryStrategy;
        }

        public void setQueryStrategy(QueryStrategy queryStrategy) {
            this.queryStrategy = queryStrategy;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class GridFsProducer extends GridFsCommon<GridFsProducer> {
        private String operation;

        /**
         * Sets the operation this endpoint will execute against GridRS. The
         * option is a java.lang.String type.
         */
        public GridFsProducer operation(String operation) {
            this.operation = operation;
            return (GridFsProducer) this;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }
    }

    public static enum QueryStrategy {
        TimeStamp, PersistentTimestamp, FileAttribute, TimeStampAndFileAttribute, PersistentTimestampAndFileAttribute;
    }
}