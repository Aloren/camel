/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * To send and receive SMS using a SMSC (Short Message Service Center).
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface SmppEndpointBuilder {


    /**
     * Base class for the SMPP component builders.
     */
    public static class SmppCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        SmppCommonBuilder(String path) {
            super("smpp", path);
        }
        /**
         * Hostname for the SMSC server to use. The option is a
         * <code>java.lang.String</code> type.
         */
        public T host(String host) {
            this.properties.put("host", host);
            return (T) this;
        }
        /**
         * Port number for the SMSC server to use. The option is a
         * <code>java.lang.Integer</code> type.
         */
        public T port(Integer port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Port number for the SMSC server to use. The option will be converted
         * to a <code>java.lang.Integer</code> type.
         */
        public T port(String port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Defines the initial delay in milliseconds after the consumer/producer
         * tries to reconnect to the SMSC, after the connection was lost. The
         * option is a <code>long</code> type.
         */
        public T initialReconnectDelay(long initialReconnectDelay) {
            this.properties.put("initialReconnectDelay", initialReconnectDelay);
            return (T) this;
        }
        /**
         * Defines the initial delay in milliseconds after the consumer/producer
         * tries to reconnect to the SMSC, after the connection was lost. The
         * option will be converted to a <code>long</code> type.
         */
        public T initialReconnectDelay(String initialReconnectDelay) {
            this.properties.put("initialReconnectDelay", initialReconnectDelay);
            return (T) this;
        }
        /**
         * Defines the maximum number of attempts to reconnect to the SMSC, if
         * SMSC returns a negative bind response. The option is a
         * <code>int</code> type.
         */
        public T maxReconnect(int maxReconnect) {
            this.properties.put("maxReconnect", maxReconnect);
            return (T) this;
        }
        /**
         * Defines the maximum number of attempts to reconnect to the SMSC, if
         * SMSC returns a negative bind response. The option will be converted
         * to a <code>int</code> type.
         */
        public T maxReconnect(String maxReconnect) {
            this.properties.put("maxReconnect", maxReconnect);
            return (T) this;
        }
        /**
         * Defines the interval in milliseconds between the reconnect attempts,
         * if the connection to the SMSC was lost and the previous was not
         * succeed. The option is a <code>long</code> type.
         */
        public T reconnectDelay(long reconnectDelay) {
            this.properties.put("reconnectDelay", reconnectDelay);
            return (T) this;
        }
        /**
         * Defines the interval in milliseconds between the reconnect attempts,
         * if the connection to the SMSC was lost and the previous was not
         * succeed. The option will be converted to a <code>long</code> type.
         */
        public T reconnectDelay(String reconnectDelay) {
            this.properties.put("reconnectDelay", reconnectDelay);
            return (T) this;
        }
        /**
         * You can specify a policy for handling long messages: ALLOW - the
         * default, long messages are split to 140 bytes per message TRUNCATE -
         * long messages are split and only the first fragment will be sent to
         * the SMSC. Some carriers drop subsequent fragments so this reduces
         * load on the SMPP connection sending parts of a message that will
         * never be delivered. REJECT - if a message would need to be split, it
         * is rejected with an SMPP NegativeResponseException and the reason
         * code signifying the message is too long. The option is a
         * <code>org.apache.camel.component.smpp.SmppSplittingPolicy</code>
         * type.
         */
        public T splittingPolicy(SmppSplittingPolicy splittingPolicy) {
            this.properties.put("splittingPolicy", splittingPolicy);
            return (T) this;
        }
        /**
         * You can specify a policy for handling long messages: ALLOW - the
         * default, long messages are split to 140 bytes per message TRUNCATE -
         * long messages are split and only the first fragment will be sent to
         * the SMSC. Some carriers drop subsequent fragments so this reduces
         * load on the SMPP connection sending parts of a message that will
         * never be delivered. REJECT - if a message would need to be split, it
         * is rejected with an SMPP NegativeResponseException and the reason
         * code signifying the message is too long. The option will be converted
         * to a <code>org.apache.camel.component.smpp.SmppSplittingPolicy</code>
         * type.
         */
        public T splittingPolicy(String splittingPolicy) {
            this.properties.put("splittingPolicy", splittingPolicy);
            return (T) this;
        }
        /**
         * This parameter is used to categorize the type of ESME (External Short
         * Message Entity) that is binding to the SMSC (max. 13 characters). The
         * option is a <code>java.lang.String</code> type.
         */
        public T systemType(String systemType) {
            this.properties.put("systemType", systemType);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Defines the interval in milliseconds between the confidence checks.
         * The confidence check is used to test the communication path between
         * an ESME and an SMSC. The option is a <code>java.lang.Integer</code>
         * type.
         */
        public T enquireLinkTimer(Integer enquireLinkTimer) {
            this.properties.put("enquireLinkTimer", enquireLinkTimer);
            return (T) this;
        }
        /**
         * Defines the interval in milliseconds between the confidence checks.
         * The confidence check is used to test the communication path between
         * an ESME and an SMSC. The option will be converted to a
         * <code>java.lang.Integer</code> type.
         */
        public T enquireLinkTimer(String enquireLinkTimer) {
            this.properties.put("enquireLinkTimer", enquireLinkTimer);
            return (T) this;
        }
        /**
         * You can refer to a org.jsmpp.session.SessionStateListener in the
         * Registry to receive callbacks when the session state changed. The
         * option is a <code>org.jsmpp.session.SessionStateListener</code> type.
         */
        public T sessionStateListener(Object sessionStateListener) {
            this.properties.put("sessionStateListener", sessionStateListener);
            return (T) this;
        }
        /**
         * You can refer to a org.jsmpp.session.SessionStateListener in the
         * Registry to receive callbacks when the session state changed. The
         * option will be converted to a
         * <code>org.jsmpp.session.SessionStateListener</code> type.
         */
        public T sessionStateListener(String sessionStateListener) {
            this.properties.put("sessionStateListener", sessionStateListener);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Defines the maximum period of inactivity allowed after a transaction,
         * after which an SMPP entity may assume that the session is no longer
         * active. This timer may be active on either communicating SMPP entity
         * (i.e. SMSC or ESME). The option is a <code>java.lang.Integer</code>
         * type.
         */
        public T transactionTimer(Integer transactionTimer) {
            this.properties.put("transactionTimer", transactionTimer);
            return (T) this;
        }
        /**
         * Defines the maximum period of inactivity allowed after a transaction,
         * after which an SMPP entity may assume that the session is no longer
         * active. This timer may be active on either communicating SMPP entity
         * (i.e. SMSC or ESME). The option will be converted to a
         * <code>java.lang.Integer</code> type.
         */
        public T transactionTimer(String transactionTimer) {
            this.properties.put("transactionTimer", transactionTimer);
            return (T) this;
        }
        /**
         * Defines encoding of data according the SMPP 3.4 specification,
         * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2
         * Alphabet. The option is a <code>byte</code> type.
         */
        public T alphabet(byte alphabet) {
            this.properties.put("alphabet", alphabet);
            return (T) this;
        }
        /**
         * Defines encoding of data according the SMPP 3.4 specification,
         * section 5.2.19. 0: SMSC Default Alphabet 4: 8 bit Alphabet 8: UCS2
         * Alphabet. The option will be converted to a <code>byte</code> type.
         */
        public T alphabet(String alphabet) {
            this.properties.put("alphabet", alphabet);
            return (T) this;
        }
        /**
         * Defines the data coding according the SMPP 3.4 specification, section
         * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin
         * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2
         * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990). The option is a
         * <code>byte</code> type.
         */
        public T dataCoding(byte dataCoding) {
            this.properties.put("dataCoding", dataCoding);
            return (T) this;
        }
        /**
         * Defines the data coding according the SMPP 3.4 specification, section
         * 5.2.19. Example data encodings are: 0: SMSC Default Alphabet 3: Latin
         * 1 (ISO-8859-1) 4: Octet unspecified (8-bit binary) 8: UCS2
         * (ISO/IEC-10646) 13: Extended Kanji JIS(X 0212-1990). The option will
         * be converted to a <code>byte</code> type.
         */
        public T dataCoding(String dataCoding) {
            this.properties.put("dataCoding", dataCoding);
            return (T) this;
        }
        /**
         * Defines the encoding scheme of the short message user data. Only for
         * SubmitSm, ReplaceSm and SubmitMulti. The option is a
         * <code>java.lang.String</code> type.
         */
        public T encoding(String encoding) {
            this.properties.put("encoding", encoding);
            return (T) this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the hostname or ip address of your HTTP proxy. The option is a
         * <code>java.lang.String</code> type.
         */
        public T httpProxyHost(String httpProxyHost) {
            this.properties.put("httpProxyHost", httpProxyHost);
            return (T) this;
        }
        /**
         * If your HTTP proxy requires basic authentication, set this attribute
         * to the password required for your HTTP proxy. The option is a
         * <code>java.lang.String</code> type.
         */
        public T httpProxyPassword(String httpProxyPassword) {
            this.properties.put("httpProxyPassword", httpProxyPassword);
            return (T) this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the port of your HTTP proxy. The option is a
         * <code>java.lang.Integer</code> type.
         */
        public T httpProxyPort(Integer httpProxyPort) {
            this.properties.put("httpProxyPort", httpProxyPort);
            return (T) this;
        }
        /**
         * If you need to tunnel SMPP through a HTTP proxy, set this attribute
         * to the port of your HTTP proxy. The option will be converted to a
         * <code>java.lang.Integer</code> type.
         */
        public T httpProxyPort(String httpProxyPort) {
            this.properties.put("httpProxyPort", httpProxyPort);
            return (T) this;
        }
        /**
         * If your HTTP proxy requires basic authentication, set this attribute
         * to the username required for your HTTP proxy. The option is a
         * <code>java.lang.String</code> type.
         */
        public T httpProxyUsername(String httpProxyUsername) {
            this.properties.put("httpProxyUsername", httpProxyUsername);
            return (T) this;
        }
        /**
         * These headers will be passed to the proxy server while establishing
         * the connection. The option is a
         * <code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>
         * type.
         */
        public T proxyHeaders(Map<String, String> proxyHeaders) {
            this.properties.put("proxyHeaders", proxyHeaders);
            return (T) this;
        }
        /**
         * These headers will be passed to the proxy server while establishing
         * the connection. The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.String&gt;</code>
         * type.
         */
        public T proxyHeaders(String proxyHeaders) {
            this.properties.put("proxyHeaders", proxyHeaders);
            return (T) this;
        }
        /**
         * The password for connecting to SMSC server. The option is a
         * <code>java.lang.String</code> type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * The system id (username) for connecting to SMSC server. The option is
         * a <code>java.lang.String</code> type.
         */
        public T systemId(String systemId) {
            this.properties.put("systemId", systemId);
            return (T) this;
        }
        /**
         * Whether using SSL with the smpps protocol. The option is a
         * <code>boolean</code> type.
         */
        public T usingSSL(boolean usingSSL) {
            this.properties.put("usingSSL", usingSSL);
            return (T) this;
        }
        /**
         * Whether using SSL with the smpps protocol. The option will be
         * converted to a <code>boolean</code> type.
         */
        public T usingSSL(String usingSSL) {
            this.properties.put("usingSSL", usingSSL);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint consumers for the SMPP component.
     */
    public static class SmppConsumerBuilder
            extends
                SmppCommonBuilder<SmppConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public SmppConsumerBuilder(String path) {
            super(path);
        }
        /**
         * You can specify the address range for the SmppConsumer as defined in
         * section 5.2.7 of the SMPP 3.4 specification. The SmppConsumer will
         * receive messages only from SMSC's which target an address (MSISDN or
         * IP address) within this range. The option is a
         * <code>java.lang.String</code> type.
         */
        public SmppConsumerBuilder addressRange(String addressRange) {
            this.properties.put("addressRange", addressRange);
            return (SmppConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public SmppConsumerBuilder bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (SmppConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public SmppConsumerBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (SmppConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public SmppConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (SmppConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public SmppConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (SmppConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public SmppConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (SmppConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public SmppConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (SmppConsumerBuilder) this;
        }
    }

    /**
     * Builder for endpoint producers for the SMPP component.
     */
    public static class SmppProducerBuilder
            extends
                SmppCommonBuilder<SmppProducerBuilder>
            implements
                EndpointProducerBuilder {
        public SmppProducerBuilder(String path) {
            super(path);
        }
        /**
         * Defines the destination SME address. For mobile terminated messages,
         * this is the directory number of the recipient MS. Only for SubmitSm,
         * SubmitMulti, CancelSm and DataSm. The option is a
         * <code>java.lang.String</code> type.
         */
        public SmppProducerBuilder destAddr(String destAddr) {
            this.properties.put("destAddr", destAddr);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME destination
         * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and
         * DataSm. The following NPI values are defined: 0: Unknown 1: ISDN
         * (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8:
         * National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to
         * be defined by WAP Forum). The option is a <code>byte</code> type.
         */
        public SmppProducerBuilder destAddrNpi(byte destAddrNpi) {
            this.properties.put("destAddrNpi", destAddrNpi);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME destination
         * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and
         * DataSm. The following NPI values are defined: 0: Unknown 1: ISDN
         * (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8:
         * National 9: Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to
         * be defined by WAP Forum). The option will be converted to a
         * <code>byte</code> type.
         */
        public SmppProducerBuilder destAddrNpi(String destAddrNpi) {
            this.properties.put("destAddrNpi", destAddrNpi);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME destination
         * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and
         * DataSm. The following TON values are defined: 0: Unknown 1:
         * International 2: National 3: Network Specific 4: Subscriber Number 5:
         * Alphanumeric 6: Abbreviated. The option is a <code>byte</code> type.
         */
        public SmppProducerBuilder destAddrTon(byte destAddrTon) {
            this.properties.put("destAddrTon", destAddrTon);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME destination
         * address parameters. Only for SubmitSm, SubmitMulti, CancelSm and
         * DataSm. The following TON values are defined: 0: Unknown 1:
         * International 2: National 3: Network Specific 4: Subscriber Number 5:
         * Alphanumeric 6: Abbreviated. The option will be converted to a
         * <code>byte</code> type.
         */
        public SmppProducerBuilder destAddrTon(String destAddrTon) {
            this.properties.put("destAddrTon", destAddrTon);
            return (SmppProducerBuilder) this;
        }
        /**
         * Sessions can be lazily created to avoid exceptions, if the SMSC is
         * not available when the Camel producer is started. Camel will check
         * the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of
         * the first exchange. If they are present, Camel will use these data to
         * connect to the SMSC. The option is a <code>boolean</code> type.
         */
        public SmppProducerBuilder lazySessionCreation(
                boolean lazySessionCreation) {
            this.properties.put("lazySessionCreation", lazySessionCreation);
            return (SmppProducerBuilder) this;
        }
        /**
         * Sessions can be lazily created to avoid exceptions, if the SMSC is
         * not available when the Camel producer is started. Camel will check
         * the in message headers 'CamelSmppSystemId' and 'CamelSmppPassword' of
         * the first exchange. If they are present, Camel will use these data to
         * connect to the SMSC. The option will be converted to a
         * <code>boolean</code> type.
         */
        public SmppProducerBuilder lazySessionCreation(
                String lazySessionCreation) {
            this.properties.put("lazySessionCreation", lazySessionCreation);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the numeric plan indicator (NPI) to be used in the SME. The
         * following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2:
         * Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9:
         * Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined
         * by WAP Forum). The option is a <code>byte</code> type.
         */
        public SmppProducerBuilder numberingPlanIndicator(
                byte numberingPlanIndicator) {
            this.properties.put("numberingPlanIndicator", numberingPlanIndicator);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the numeric plan indicator (NPI) to be used in the SME. The
         * following NPI values are defined: 0: Unknown 1: ISDN (E163/E164) 2:
         * Data (X.121) 3: Telex (F.69) 6: Land Mobile (E.212) 8: National 9:
         * Private 10: ERMES 13: Internet (IP) 18: WAP Client Id (to be defined
         * by WAP Forum). The option will be converted to a <code>byte</code>
         * type.
         */
        public SmppProducerBuilder numberingPlanIndicator(
                String numberingPlanIndicator) {
            this.properties.put("numberingPlanIndicator", numberingPlanIndicator);
            return (SmppProducerBuilder) this;
        }
        /**
         * Allows the originating SME to assign a priority level to the short
         * message. Only for SubmitSm and SubmitMulti. Four Priority Levels are
         * supported: 0: Level 0 (lowest) priority 1: Level 1 priority 2: Level
         * 2 priority 3: Level 3 (highest) priority. The option is a
         * <code>byte</code> type.
         */
        public SmppProducerBuilder priorityFlag(byte priorityFlag) {
            this.properties.put("priorityFlag", priorityFlag);
            return (SmppProducerBuilder) this;
        }
        /**
         * Allows the originating SME to assign a priority level to the short
         * message. Only for SubmitSm and SubmitMulti. Four Priority Levels are
         * supported: 0: Level 0 (lowest) priority 1: Level 1 priority 2: Level
         * 2 priority 3: Level 3 (highest) priority. The option will be
         * converted to a <code>byte</code> type.
         */
        public SmppProducerBuilder priorityFlag(String priorityFlag) {
            this.properties.put("priorityFlag", priorityFlag);
            return (SmppProducerBuilder) this;
        }
        /**
         * The protocol id. The option is a <code>byte</code> type.
         */
        public SmppProducerBuilder protocolId(byte protocolId) {
            this.properties.put("protocolId", protocolId);
            return (SmppProducerBuilder) this;
        }
        /**
         * The protocol id. The option will be converted to a <code>byte</code>
         * type.
         */
        public SmppProducerBuilder protocolId(String protocolId) {
            this.properties.put("protocolId", protocolId);
            return (SmppProducerBuilder) this;
        }
        /**
         * Is used to request an SMSC delivery receipt and/or SME originated
         * acknowledgements. The following values are defined: 0: No SMSC
         * delivery receipt requested. 1: SMSC delivery receipt requested where
         * final delivery outcome is success or failure. 2: SMSC delivery
         * receipt requested where the final delivery outcome is delivery
         * failure. The option is a <code>byte</code> type.
         */
        public SmppProducerBuilder registeredDelivery(byte registeredDelivery) {
            this.properties.put("registeredDelivery", registeredDelivery);
            return (SmppProducerBuilder) this;
        }
        /**
         * Is used to request an SMSC delivery receipt and/or SME originated
         * acknowledgements. The following values are defined: 0: No SMSC
         * delivery receipt requested. 1: SMSC delivery receipt requested where
         * final delivery outcome is success or failure. 2: SMSC delivery
         * receipt requested where the final delivery outcome is delivery
         * failure. The option will be converted to a <code>byte</code> type.
         */
        public SmppProducerBuilder registeredDelivery(String registeredDelivery) {
            this.properties.put("registeredDelivery", registeredDelivery);
            return (SmppProducerBuilder) this;
        }
        /**
         * Used to request the SMSC to replace a previously submitted message,
         * that is still pending delivery. The SMSC will replace an existing
         * message provided that the source address, destination address and
         * service type match the same fields in the new message. The following
         * replace if present flag values are defined: 0: Don't replace 1:
         * Replace. The option is a <code>byte</code> type.
         */
        public SmppProducerBuilder replaceIfPresentFlag(
                byte replaceIfPresentFlag) {
            this.properties.put("replaceIfPresentFlag", replaceIfPresentFlag);
            return (SmppProducerBuilder) this;
        }
        /**
         * Used to request the SMSC to replace a previously submitted message,
         * that is still pending delivery. The SMSC will replace an existing
         * message provided that the source address, destination address and
         * service type match the same fields in the new message. The following
         * replace if present flag values are defined: 0: Don't replace 1:
         * Replace. The option will be converted to a <code>byte</code> type.
         */
        public SmppProducerBuilder replaceIfPresentFlag(
                String replaceIfPresentFlag) {
            this.properties.put("replaceIfPresentFlag", replaceIfPresentFlag);
            return (SmppProducerBuilder) this;
        }
        /**
         * The service type parameter can be used to indicate the SMS
         * Application service associated with the message. The following
         * generic service_types are defined: CMT: Cellular Messaging CPT:
         * Cellular Paging VMN: Voice Mail Notification VMA: Voice Mail Alerting
         * WAP: Wireless Application Protocol USSD: Unstructured Supplementary
         * Services Data. The option is a <code>java.lang.String</code> type.
         */
        public SmppProducerBuilder serviceType(String serviceType) {
            this.properties.put("serviceType", serviceType);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the address of SME (Short Message Entity) which originated
         * this message. The option is a <code>java.lang.String</code> type.
         */
        public SmppProducerBuilder sourceAddr(String sourceAddr) {
            this.properties.put("sourceAddr", sourceAddr);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the numeric plan indicator (NPI) to be used in the SME
         * originator address parameters. The following NPI values are defined:
         * 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6:
         * Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet
         * (IP) 18: WAP Client Id (to be defined by WAP Forum). The option is a
         * <code>byte</code> type.
         */
        public SmppProducerBuilder sourceAddrNpi(byte sourceAddrNpi) {
            this.properties.put("sourceAddrNpi", sourceAddrNpi);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the numeric plan indicator (NPI) to be used in the SME
         * originator address parameters. The following NPI values are defined:
         * 0: Unknown 1: ISDN (E163/E164) 2: Data (X.121) 3: Telex (F.69) 6:
         * Land Mobile (E.212) 8: National 9: Private 10: ERMES 13: Internet
         * (IP) 18: WAP Client Id (to be defined by WAP Forum). The option will
         * be converted to a <code>byte</code> type.
         */
        public SmppProducerBuilder sourceAddrNpi(String sourceAddrNpi) {
            this.properties.put("sourceAddrNpi", sourceAddrNpi);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME originator
         * address parameters. The following TON values are defined: 0: Unknown
         * 1: International 2: National 3: Network Specific 4: Subscriber Number
         * 5: Alphanumeric 6: Abbreviated. The option is a <code>byte</code>
         * type.
         */
        public SmppProducerBuilder sourceAddrTon(byte sourceAddrTon) {
            this.properties.put("sourceAddrTon", sourceAddrTon);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME originator
         * address parameters. The following TON values are defined: 0: Unknown
         * 1: International 2: National 3: Network Specific 4: Subscriber Number
         * 5: Alphanumeric 6: Abbreviated. The option will be converted to a
         * <code>byte</code> type.
         */
        public SmppProducerBuilder sourceAddrTon(String sourceAddrTon) {
            this.properties.put("sourceAddrTon", sourceAddrTon);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME. The following
         * TON values are defined: 0: Unknown 1: International 2: National 3:
         * Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated.
         * The option is a <code>byte</code> type.
         */
        public SmppProducerBuilder typeOfNumber(byte typeOfNumber) {
            this.properties.put("typeOfNumber", typeOfNumber);
            return (SmppProducerBuilder) this;
        }
        /**
         * Defines the type of number (TON) to be used in the SME. The following
         * TON values are defined: 0: Unknown 1: International 2: National 3:
         * Network Specific 4: Subscriber Number 5: Alphanumeric 6: Abbreviated.
         * The option will be converted to a <code>byte</code> type.
         */
        public SmppProducerBuilder typeOfNumber(String typeOfNumber) {
            this.properties.put("typeOfNumber", typeOfNumber);
            return (SmppProducerBuilder) this;
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.smpp.SmppSplittingPolicy</code> enum.
     */
    public static enum SmppSplittingPolicy {
        ALLOW, REJECT, TRUNCATE;
    }
    /**
     * To send and receive SMS using a SMSC (Short Message Service Center).
     * Creates a builder to build a consumer endpoint for the SMPP component.
     */
    public default SmppConsumerBuilder fromSmpp(String path) {
        return new SmppConsumerBuilder(path);
    }
    /**
     * To send and receive SMS using a SMSC (Short Message Service Center).
     * Creates a builder to build a producer endpoint for the SMPP component.
     */
    public default SmppProducerBuilder toSmpp(String path) {
        return new SmppProducerBuilder(path);
    }
}