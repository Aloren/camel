/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Camel Apache Pulsar Component
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface PulsarEndpointBuilder {


    public static class PulsarCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        PulsarCommonBuilder(String path) {
            super("pulsar", path);
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class PulsarConsumerBuilder
            extends
                PulsarCommonBuilder<PulsarConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public PulsarConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public PulsarConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (PulsarConsumerBuilder) this;
        }
        /**
         * Name of the consumer when subscription is EXCLUSIVE. The option is a
         * java.lang.String type.
         */
        public PulsarConsumerBuilder consumerName(String consumerName) {
            this.properties.put("consumerName", consumerName);
            return (PulsarConsumerBuilder) this;
        }
        /**
         * Prefix to add to consumer names when a SHARED or FAILOVER
         * subscription is used. The option is a java.lang.String type.
         */
        public PulsarConsumerBuilder consumerNamePrefix(
                String consumerNamePrefix) {
            this.properties.put("consumerNamePrefix", consumerNamePrefix);
            return (PulsarConsumerBuilder) this;
        }
        /**
         * Size of the consumer queue - defaults to 10. The option is a int
         * type.
         */
        public PulsarConsumerBuilder consumerQueueSize(int consumerQueueSize) {
            this.properties.put("consumerQueueSize", consumerQueueSize);
            return (PulsarConsumerBuilder) this;
        }
        /**
         * Number of consumers - defaults to 1. The option is a int type.
         */
        public PulsarConsumerBuilder numberOfConsumers(int numberOfConsumers) {
            this.properties.put("numberOfConsumers", numberOfConsumers);
            return (PulsarConsumerBuilder) this;
        }
        /**
         * Name of the subscription to use. The option is a java.lang.String
         * type.
         */
        public PulsarConsumerBuilder subscriptionName(String subscriptionName) {
            this.properties.put("subscriptionName", subscriptionName);
            return (PulsarConsumerBuilder) this;
        }
        /**
         * Type of the subscription EXCLUSIVESHAREDFAILOVER, defaults to
         * EXCLUSIVE. The option is a
         * org.apache.camel.component.pulsar.utils.consumers.SubscriptionType
         * type.
         */
        public PulsarConsumerBuilder subscriptionType(
                SubscriptionType subscriptionType) {
            this.properties.put("subscriptionType", subscriptionType);
            return (PulsarConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public PulsarConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (PulsarConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public PulsarConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (PulsarConsumerBuilder) this;
        }
    }

    public static class PulsarProducerBuilder
            extends
                PulsarCommonBuilder<PulsarProducerBuilder>
            implements
                EndpointProducerBuilder {
        public PulsarProducerBuilder(String path) {
            super(path);
        }
        /**
         * The Topic's full URI path including type, tenant and namespace. The
         * option is a java.lang.String type.
         */
        public PulsarProducerBuilder topic(String topic) {
            this.properties.put("topic", topic);
            return (PulsarProducerBuilder) this;
        }
        /**
         * Name of the producer. The option is a java.lang.String type.
         */
        public PulsarProducerBuilder producerName(String producerName) {
            this.properties.put("producerName", producerName);
            return (PulsarProducerBuilder) this;
        }
    }

    public static enum SubscriptionType {
        EXCLUSIVE, SHARED, FAILOVER;
    }
    public default PulsarConsumerBuilder fromPulsar(String path) {
        return new PulsarConsumerBuilder(path);
    }
    public default PulsarProducerBuilder toPulsar(String path) {
        return new PulsarProducerBuilder(path);
    }
}