/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.HeaderFilterStrategy;

/**
 * To use a HTTP Servlet as entry for Camel routes when running in a servlet
 * container.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class ServletEndpoint {


    public static class ServletCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private Boolean disableStreamCache;
        private HeaderFilterStrategy headerFilterStrategy;
        private Object httpBinding;
        private Boolean chunked;
        private Boolean transferException;
        private Boolean basicPropertyBinding;
        private Boolean mapHttpMessageBody;
        private Boolean mapHttpMessageFormUrlEncodedBody;
        private Boolean mapHttpMessageHeaders;
        private Boolean synchronous;

        /**
         * Determines whether or not the raw input stream from Servlet is cached
         * or not (Camel will read the stream into a in memory/overflow to file,
         * Stream caching) cache. By default Camel will cache the Servlet input
         * stream to support reading it multiple times to ensure it Camel can
         * retrieve all data from the stream. However you can set this option to
         * true when you for example need to access the raw stream, such as
         * streaming it directly to a file or other persistent store.
         * DefaultHttpBinding will copy the request input stream into a stream
         * cache and put it into message body if this option is false to support
         * reading the stream multiple times. If you use Servlet to bridge/proxy
         * an endpoint then consider enabling this option to improve
         * performance, in case you do not need to read the message payload
         * multiple times. The http/http4 producer will by default cache the
         * response body stream. If setting this option to true, then the
         * producers will not cache the response body stream but use the
         * response stream as-is as the message body. The option is a boolean
         * type.
         */
        public T disableStreamCache(boolean disableStreamCache) {
            this.disableStreamCache = disableStreamCache;
            return (T) this;
        }

        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message. The option is a
         * org.apache.camel.spi.HeaderFilterStrategy type.
         */
        public T headerFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {
            this.headerFilterStrategy = headerFilterStrategy;
            return (T) this;
        }

        /**
         * To use a custom HttpBinding to control the mapping between Camel
         * message and HttpClient. The option is a
         * org.apache.camel.http.common.HttpBinding type.
         */
        public T httpBinding(Object httpBinding) {
            this.httpBinding = httpBinding;
            return (T) this;
        }

        /**
         * If this option is false the Servlet will disable the HTTP streaming
         * and set the content-length header on the response. The option is a
         * boolean type.
         */
        public T chunked(boolean chunked) {
            this.chunked = chunked;
            return (T) this;
        }

        /**
         * If enabled and an Exchange failed processing on the consumer side,
         * and if the caused Exception was send back serialized in the response
         * as a application/x-java-serialized-object content type. On the
         * producer side the exception will be deserialized and thrown as is,
         * instead of the HttpOperationFailedException. The caused exception is
         * required to be serialized. This is by default turned off. If you
         * enable this then be aware that Java will deserialize the incoming
         * data from the request to Java and that can be a potential security
         * risk. The option is a boolean type.
         */
        public T transferException(boolean transferException) {
            this.transferException = transferException;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * If this option is true then IN exchange Body of the exchange will be
         * mapped to HTTP body. Setting this to false will avoid the HTTP
         * mapping. The option is a boolean type.
         */
        public T mapHttpMessageBody(boolean mapHttpMessageBody) {
            this.mapHttpMessageBody = mapHttpMessageBody;
            return (T) this;
        }

        /**
         * If this option is true then IN exchange Form Encoded body of the
         * exchange will be mapped to HTTP. Setting this to false will avoid the
         * HTTP Form Encoded body mapping. The option is a boolean type.
         */
        public T mapHttpMessageFormUrlEncodedBody(
                boolean mapHttpMessageFormUrlEncodedBody) {
            this.mapHttpMessageFormUrlEncodedBody = mapHttpMessageFormUrlEncodedBody;
            return (T) this;
        }

        /**
         * If this option is true then IN exchange Headers of the exchange will
         * be mapped to HTTP headers. Setting this to false will avoid the HTTP
         * Headers mapping. The option is a boolean type.
         */
        public T mapHttpMessageHeaders(boolean mapHttpMessageHeaders) {
            this.mapHttpMessageHeaders = mapHttpMessageHeaders;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public Boolean getDisableStreamCache() {
            return disableStreamCache;
        }

        public void setDisableStreamCache(Boolean disableStreamCache) {
            this.disableStreamCache = disableStreamCache;
        }

        public HeaderFilterStrategy getHeaderFilterStrategy() {
            return headerFilterStrategy;
        }

        public void setHeaderFilterStrategy(
                HeaderFilterStrategy headerFilterStrategy) {
            this.headerFilterStrategy = headerFilterStrategy;
        }

        public Object getHttpBinding() {
            return httpBinding;
        }

        public void setHttpBinding(Object httpBinding) {
            this.httpBinding = httpBinding;
        }

        public Boolean getChunked() {
            return chunked;
        }

        public void setChunked(Boolean chunked) {
            this.chunked = chunked;
        }

        public Boolean getTransferException() {
            return transferException;
        }

        public void setTransferException(Boolean transferException) {
            this.transferException = transferException;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getMapHttpMessageBody() {
            return mapHttpMessageBody;
        }

        public void setMapHttpMessageBody(Boolean mapHttpMessageBody) {
            this.mapHttpMessageBody = mapHttpMessageBody;
        }

        public Boolean getMapHttpMessageFormUrlEncodedBody() {
            return mapHttpMessageFormUrlEncodedBody;
        }

        public void setMapHttpMessageFormUrlEncodedBody(
                Boolean mapHttpMessageFormUrlEncodedBody) {
            this.mapHttpMessageFormUrlEncodedBody = mapHttpMessageFormUrlEncodedBody;
        }

        public Boolean getMapHttpMessageHeaders() {
            return mapHttpMessageHeaders;
        }

        public void setMapHttpMessageHeaders(Boolean mapHttpMessageHeaders) {
            this.mapHttpMessageHeaders = mapHttpMessageHeaders;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class ServletConsumer
            extends
                ServletCommon<ServletConsumer> {
        private String contextPath;
        private Boolean async;
        private Boolean bridgeErrorHandler;
        private String httpMethodRestrict;
        private Boolean matchOnUriPrefix;
        private Integer responseBufferSize;
        private String servletName;
        private Boolean attachmentMultipartBinding;
        private Boolean eagerCheckContentAvailable;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;
        private String fileNameExtWhitelist;
        private Boolean optionsEnabled;
        private Boolean traceEnabled;

        /**
         * The context-path to use. The option is a java.lang.String type.
         */
        public ServletConsumer contextPath(String contextPath) {
            this.contextPath = contextPath;
            return (ServletConsumer) this;
        }

        /**
         * Configure the consumer to work in async mode. The option is a boolean
         * type.
         */
        public ServletConsumer async(boolean async) {
            this.async = async;
            return (ServletConsumer) this;
        }

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public ServletConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (ServletConsumer) this;
        }

        /**
         * Used to only allow consuming if the HttpMethod matches, such as
         * GET/POST/PUT etc. Multiple methods can be specified separated by
         * comma. The option is a java.lang.String type.
         */
        public ServletConsumer httpMethodRestrict(String httpMethodRestrict) {
            this.httpMethodRestrict = httpMethodRestrict;
            return (ServletConsumer) this;
        }

        /**
         * Whether or not the consumer should try to find a target consumer by
         * matching the URI prefix if no exact match is found. The option is a
         * boolean type.
         */
        public ServletConsumer matchOnUriPrefix(boolean matchOnUriPrefix) {
            this.matchOnUriPrefix = matchOnUriPrefix;
            return (ServletConsumer) this;
        }

        /**
         * To use a custom buffer size on the javax.servlet.ServletResponse. The
         * option is a java.lang.Integer type.
         */
        public ServletConsumer responseBufferSize(Integer responseBufferSize) {
            this.responseBufferSize = responseBufferSize;
            return (ServletConsumer) this;
        }

        /**
         * Name of the servlet to use. The option is a java.lang.String type.
         */
        public ServletConsumer servletName(String servletName) {
            this.servletName = servletName;
            return (ServletConsumer) this;
        }

        /**
         * Whether to automatic bind multipart/form-data as attachments on the
         * Camel Exchange. The options attachmentMultipartBinding=true and
         * disableStreamCache=false cannot work together. Remove
         * disableStreamCache to use AttachmentMultipartBinding. This is turn
         * off by default as this may require servlet specific configuration to
         * enable this when using Servlet's. The option is a boolean type.
         */
        public ServletConsumer attachmentMultipartBinding(
                boolean attachmentMultipartBinding) {
            this.attachmentMultipartBinding = attachmentMultipartBinding;
            return (ServletConsumer) this;
        }

        /**
         * Whether to eager check whether the HTTP requests has content if the
         * content-length header is 0 or not present. This can be turned on in
         * case HTTP clients do not send streamed data. The option is a boolean
         * type.
         */
        public ServletConsumer eagerCheckContentAvailable(
                boolean eagerCheckContentAvailable) {
            this.eagerCheckContentAvailable = eagerCheckContentAvailable;
            return (ServletConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public ServletConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (ServletConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public ServletConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (ServletConsumer) this;
        }

        /**
         * Whitelist of accepted filename extensions for accepting uploaded
         * files. Multiple extensions can be separated by comma, such as
         * txt,xml. The option is a java.lang.String type.
         */
        public ServletConsumer fileNameExtWhitelist(String fileNameExtWhitelist) {
            this.fileNameExtWhitelist = fileNameExtWhitelist;
            return (ServletConsumer) this;
        }

        /**
         * Specifies whether to enable HTTP OPTIONS for this Servlet consumer.
         * By default OPTIONS is turned off. The option is a boolean type.
         */
        public ServletConsumer optionsEnabled(boolean optionsEnabled) {
            this.optionsEnabled = optionsEnabled;
            return (ServletConsumer) this;
        }

        /**
         * Specifies whether to enable HTTP TRACE for this Servlet consumer. By
         * default TRACE is turned off. The option is a boolean type.
         */
        public ServletConsumer traceEnabled(boolean traceEnabled) {
            this.traceEnabled = traceEnabled;
            return (ServletConsumer) this;
        }

        public String getContextPath() {
            return contextPath;
        }

        public void setContextPath(String contextPath) {
            this.contextPath = contextPath;
        }

        public Boolean getAsync() {
            return async;
        }

        public void setAsync(Boolean async) {
            this.async = async;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public String getHttpMethodRestrict() {
            return httpMethodRestrict;
        }

        public void setHttpMethodRestrict(String httpMethodRestrict) {
            this.httpMethodRestrict = httpMethodRestrict;
        }

        public Boolean getMatchOnUriPrefix() {
            return matchOnUriPrefix;
        }

        public void setMatchOnUriPrefix(Boolean matchOnUriPrefix) {
            this.matchOnUriPrefix = matchOnUriPrefix;
        }

        public Integer getResponseBufferSize() {
            return responseBufferSize;
        }

        public void setResponseBufferSize(Integer responseBufferSize) {
            this.responseBufferSize = responseBufferSize;
        }

        public String getServletName() {
            return servletName;
        }

        public void setServletName(String servletName) {
            this.servletName = servletName;
        }

        public Boolean getAttachmentMultipartBinding() {
            return attachmentMultipartBinding;
        }

        public void setAttachmentMultipartBinding(
                Boolean attachmentMultipartBinding) {
            this.attachmentMultipartBinding = attachmentMultipartBinding;
        }

        public Boolean getEagerCheckContentAvailable() {
            return eagerCheckContentAvailable;
        }

        public void setEagerCheckContentAvailable(
                Boolean eagerCheckContentAvailable) {
            this.eagerCheckContentAvailable = eagerCheckContentAvailable;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }

        public String getFileNameExtWhitelist() {
            return fileNameExtWhitelist;
        }

        public void setFileNameExtWhitelist(String fileNameExtWhitelist) {
            this.fileNameExtWhitelist = fileNameExtWhitelist;
        }

        public Boolean getOptionsEnabled() {
            return optionsEnabled;
        }

        public void setOptionsEnabled(Boolean optionsEnabled) {
            this.optionsEnabled = optionsEnabled;
        }

        public Boolean getTraceEnabled() {
            return traceEnabled;
        }

        public void setTraceEnabled(Boolean traceEnabled) {
            this.traceEnabled = traceEnabled;
        }
    }

    public static class ServletProducer
            extends
                ServletCommon<ServletProducer> {
    }
}