/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The github component is used for integrating Camel with github.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class GitHubEndpoint {


    public static class GitHubCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        GitHubCommon(String path) {
            super("github", path);
        }
        /**
         * What git operation to execute. The option is a
         * org.apache.camel.component.github.GitHubType type.
         */
        public T type(GitHubType type) {
            this.properties.put("type", type);
            return (T) this;
        }
        /**
         * GitHub OAuth token, required unless username & password are provided.
         * The option is a java.lang.String type.
         */
        public T oauthToken(String oauthToken) {
            this.properties.put("oauthToken", oauthToken);
            return (T) this;
        }
        /**
         * GitHub password, required unless oauthToken is provided. The option
         * is a java.lang.String type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * GitHub repository name. The option is a java.lang.String type.
         */
        public T repoName(String repoName) {
            this.properties.put("repoName", repoName);
            return (T) this;
        }
        /**
         * GitHub repository owner (organization). The option is a
         * java.lang.String type.
         */
        public T repoOwner(String repoOwner) {
            this.properties.put("repoOwner", repoOwner);
            return (T) this;
        }
        /**
         * GitHub username, required unless oauthToken is provided. The option
         * is a java.lang.String type.
         */
        public T username(String username) {
            this.properties.put("username", username);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class GitHubConsumer
            extends
                GitHubCommon<GitHubConsumer>
            implements
                EndpointDefinition.Consumer {
        public GitHubConsumer(String path) {
            super(path);
        }
        /**
         * Name of branch. The option is a java.lang.String type.
         */
        public GitHubConsumer branchName(String branchName) {
            this.properties.put("branchName", branchName);
            return (GitHubConsumer) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public GitHubConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (GitHubConsumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public GitHubConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (GitHubConsumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public GitHubConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (GitHubConsumer) this;
        }
    }

    public static class GitHubProducer
            extends
                GitHubCommon<GitHubProducer>
            implements
                EndpointDefinition.Producer {
        public GitHubProducer(String path) {
            super(path);
        }
        /**
         * To use the given encoding when getting a git commit file. The option
         * is a java.lang.String type.
         */
        public GitHubProducer encoding(String encoding) {
            this.properties.put("encoding", encoding);
            return (GitHubProducer) this;
        }
        /**
         * To set git commit status state. The option is a java.lang.String
         * type.
         */
        public GitHubProducer state(String state) {
            this.properties.put("state", state);
            return (GitHubProducer) this;
        }
        /**
         * To set git commit status target url. The option is a java.lang.String
         * type.
         */
        public GitHubProducer targetUrl(String targetUrl) {
            this.properties.put("targetUrl", targetUrl);
            return (GitHubProducer) this;
        }
    }

    public static enum GitHubType {
        CLOSEPULLREQUEST, PULLREQUESTCOMMENT, COMMIT, PULLREQUEST, TAG, PULLREQUESTSTATE, PULLREQUESTFILES, GETCOMMITFILE, CREATEISSUE;
    }
}