/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The git component is used for working with git repositories.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class GitEndpoint {


    public static class GitCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String localPath;
        private String branchName;
        private String password;
        private String remoteName;
        private String remotePath;
        private String tagName;
        private String username;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;

        /**
         * Local repository path. The option is a java.lang.String type.
         */
        public T localPath(String localPath) {
            this.localPath = localPath;
            return (T) this;
        }

        /**
         * The branch name to work on. The option is a java.lang.String type.
         */
        public T branchName(String branchName) {
            this.branchName = branchName;
            return (T) this;
        }

        /**
         * Remote repository password. The option is a java.lang.String type.
         */
        public T password(String password) {
            this.password = password;
            return (T) this;
        }

        /**
         * The remote repository name to use in particular operation like pull.
         * The option is a java.lang.String type.
         */
        public T remoteName(String remoteName) {
            this.remoteName = remoteName;
            return (T) this;
        }

        /**
         * The remote repository path. The option is a java.lang.String type.
         */
        public T remotePath(String remotePath) {
            this.remotePath = remotePath;
            return (T) this;
        }

        /**
         * The tag name to work on. The option is a java.lang.String type.
         */
        public T tagName(String tagName) {
            this.tagName = tagName;
            return (T) this;
        }

        /**
         * Remote repository username. The option is a java.lang.String type.
         */
        public T username(String username) {
            this.username = username;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public String getLocalPath() {
            return localPath;
        }

        public void setLocalPath(String localPath) {
            this.localPath = localPath;
        }

        public String getBranchName() {
            return branchName;
        }

        public void setBranchName(String branchName) {
            this.branchName = branchName;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getRemoteName() {
            return remoteName;
        }

        public void setRemoteName(String remoteName) {
            this.remoteName = remoteName;
        }

        public String getRemotePath() {
            return remotePath;
        }

        public void setRemotePath(String remotePath) {
            this.remotePath = remotePath;
        }

        public String getTagName() {
            return tagName;
        }

        public void setTagName(String tagName) {
            this.tagName = tagName;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class GitConsumer extends GitCommon<GitConsumer> {
        private Boolean bridgeErrorHandler;
        private GitType type;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public GitConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (GitConsumer) this;
        }

        /**
         * The consumer type. The option is a
         * org.apache.camel.component.git.consumer.GitType type.
         */
        public GitConsumer type(GitType type) {
            this.type = type;
            return (GitConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public GitConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (GitConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public GitConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (GitConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public GitType getType() {
            return type;
        }

        public void setType(GitType type) {
            this.type = type;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class GitProducer extends GitCommon<GitProducer> {
        private Boolean allowEmpty;
        private String operation;

        /**
         * The flag to manage empty git commits. The option is a boolean type.
         */
        public GitProducer allowEmpty(boolean allowEmpty) {
            this.allowEmpty = allowEmpty;
            return (GitProducer) this;
        }

        /**
         * The operation to do on the repository. The option is a
         * java.lang.String type.
         */
        public GitProducer operation(String operation) {
            this.operation = operation;
            return (GitProducer) this;
        }

        public Boolean getAllowEmpty() {
            return allowEmpty;
        }

        public void setAllowEmpty(Boolean allowEmpty) {
            this.allowEmpty = allowEmpty;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }
    }

    public static enum GitType {
        commit, tag, branch;
    }
}