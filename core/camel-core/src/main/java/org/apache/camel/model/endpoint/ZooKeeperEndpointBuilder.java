/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The zookeeper component allows interaction with a ZooKeeper cluster.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface ZooKeeperEndpointBuilder {


    public static class ZooKeeperCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        ZooKeeperCommonBuilder(String path) {
            super("zookeeper", path);
        }
        /**
         * The zookeeper server hosts (multiple servers can be separated by
         * comma). The option is a <code>java.lang.String</code> type.
         */
        public T serverUrls(String serverUrls) {
            this.properties.put("serverUrls", serverUrls);
            return (T) this;
        }
        /**
         * The node in the ZooKeeper server (aka znode). The option is a
         * <code>java.lang.String</code> type.
         */
        public T path(String path) {
            this.properties.put("path", path);
            return (T) this;
        }
        /**
         * Not in use. The option is a <code>boolean</code> type.
         */
        @Deprecated
        public T awaitExistence(boolean awaitExistence) {
            this.properties.put("awaitExistence", awaitExistence);
            return (T) this;
        }
        /**
         * Not in use. The option will be converted to a <code>boolean</code>
         * type.
         */
        @Deprecated
        public T awaitExistence(String awaitExistence) {
            this.properties.put("awaitExistence", awaitExistence);
            return (T) this;
        }
        /**
         * Whether the children of the node should be listed. The option is a
         * <code>boolean</code> type.
         */
        public T listChildren(boolean listChildren) {
            this.properties.put("listChildren", listChildren);
            return (T) this;
        }
        /**
         * Whether the children of the node should be listed. The option will be
         * converted to a <code>boolean</code> type.
         */
        public T listChildren(String listChildren) {
            this.properties.put("listChildren", listChildren);
            return (T) this;
        }
        /**
         * The time interval to wait on connection before timing out. The option
         * is a <code>int</code> type.
         */
        public T timeout(int timeout) {
            this.properties.put("timeout", timeout);
            return (T) this;
        }
        /**
         * The time interval to wait on connection before timing out. The option
         * will be converted to a <code>int</code> type.
         */
        public T timeout(String timeout) {
            this.properties.put("timeout", timeout);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class ZooKeeperConsumerBuilder
            extends
                ZooKeeperCommonBuilder<ZooKeeperConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public ZooKeeperConsumerBuilder(String path) {
            super(path);
        }
        /**
         * The time interval to backoff for after an error before retrying. The
         * option is a <code>long</code> type.
         */
        public ZooKeeperConsumerBuilder backoff(long backoff) {
            this.properties.put("backoff", backoff);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * The time interval to backoff for after an error before retrying. The
         * option will be converted to a <code>long</code> type.
         */
        public ZooKeeperConsumerBuilder backoff(String backoff) {
            this.properties.put("backoff", backoff);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public ZooKeeperConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public ZooKeeperConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * Should changes to the znode be 'watched' and repeatedly processed.
         * The option is a <code>boolean</code> type.
         */
        public ZooKeeperConsumerBuilder repeat(boolean repeat) {
            this.properties.put("repeat", repeat);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * Should changes to the znode be 'watched' and repeatedly processed.
         * The option will be converted to a <code>boolean</code> type.
         */
        public ZooKeeperConsumerBuilder repeat(String repeat) {
            this.properties.put("repeat", repeat);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * Upon the delete of a znode, should an empty message be send to the
         * consumer. The option is a <code>boolean</code> type.
         */
        public ZooKeeperConsumerBuilder sendEmptyMessageOnDelete(
                boolean sendEmptyMessageOnDelete) {
            this.properties.put("sendEmptyMessageOnDelete", sendEmptyMessageOnDelete);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * Upon the delete of a znode, should an empty message be send to the
         * consumer. The option will be converted to a <code>boolean</code>
         * type.
         */
        public ZooKeeperConsumerBuilder sendEmptyMessageOnDelete(
                String sendEmptyMessageOnDelete) {
            this.properties.put("sendEmptyMessageOnDelete", sendEmptyMessageOnDelete);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public ZooKeeperConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public ZooKeeperConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public ZooKeeperConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (ZooKeeperConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public ZooKeeperConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (ZooKeeperConsumerBuilder) this;
        }
    }

    public static class ZooKeeperProducerBuilder
            extends
                ZooKeeperCommonBuilder<ZooKeeperProducerBuilder>
            implements
                EndpointProducerBuilder {
        public ZooKeeperProducerBuilder(String path) {
            super(path);
        }
        /**
         * Should the endpoint create the node if it does not currently exist.
         * The option is a <code>boolean</code> type.
         */
        public ZooKeeperProducerBuilder create(boolean create) {
            this.properties.put("create", create);
            return (ZooKeeperProducerBuilder) this;
        }
        /**
         * Should the endpoint create the node if it does not currently exist.
         * The option will be converted to a <code>boolean</code> type.
         */
        public ZooKeeperProducerBuilder create(String create) {
            this.properties.put("create", create);
            return (ZooKeeperProducerBuilder) this;
        }
        /**
         * The create mode that should be used for the newly created node. The
         * option is a <code>java.lang.String</code> type.
         */
        public ZooKeeperProducerBuilder createMode(String createMode) {
            this.properties.put("createMode", createMode);
            return (ZooKeeperProducerBuilder) this;
        }
    }
    public default ZooKeeperConsumerBuilder fromZooKeeper(String path) {
        return new ZooKeeperConsumerBuilder(path);
    }
    public default ZooKeeperProducerBuilder toZooKeeper(String path) {
        return new ZooKeeperProducerBuilder(path);
    }
}