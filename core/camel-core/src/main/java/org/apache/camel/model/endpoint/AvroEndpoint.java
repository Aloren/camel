/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Working with Apache Avro for data serialization.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class AvroEndpoint {


    public static class AvroCommon extends EndpointConfiguration {
        /**
         * Transport to use, can be either http or netty. The option is a
         * org.apache.camel.component.avro.AvroTransport type.
         */
        private AvroTransport transport;
        /**
         * Port number to use. The option is a int type.
         */
        private Integer port;
        /**
         * Hostname to use. The option is a java.lang.String type.
         */
        private String host;
        /**
         * The name of the message to send. The option is a java.lang.String
         * type.
         */
        private String messageName;
        /**
         * Avro protocol to use. The option is a org.apache.avro.Protocol type.
         */
        private Object protocol;
        /**
         * Avro protocol to use defined by the FQN class name. The option is a
         * java.lang.String type.
         */
        private String protocolClassName;
        /**
         * Avro protocol location. The option is a java.lang.String type.
         */
        private String protocolLocation;
        /**
         * If protocol object provided is reflection protocol. Should be used
         * only with protocol parameter because for protocolClassName protocol
         * type will be auto detected. The option is a boolean type.
         */
        private Boolean reflectionProtocol;
        /**
         * If true, consumer parameter won't be wrapped into array. Will fail if
         * protocol specifies more then 1 parameter for the message. The option
         * is a boolean type.
         */
        private Boolean singleParameter;
        /**
         * Authority to use (username and password). The option is a
         * java.lang.String type.
         */
        private String uriAuthority;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;

        public AvroTransport getTransport() {
            return transport;
        }

        public void setTransport(AvroTransport transport) {
            this.transport = transport;
        }

        public Integer getPort() {
            return port;
        }

        public void setPort(Integer port) {
            this.port = port;
        }

        public String getHost() {
            return host;
        }

        public void setHost(String host) {
            this.host = host;
        }

        public String getMessageName() {
            return messageName;
        }

        public void setMessageName(String messageName) {
            this.messageName = messageName;
        }

        public Object getProtocol() {
            return protocol;
        }

        public void setProtocol(Object protocol) {
            this.protocol = protocol;
        }

        public String getProtocolClassName() {
            return protocolClassName;
        }

        public void setProtocolClassName(String protocolClassName) {
            this.protocolClassName = protocolClassName;
        }

        public String getProtocolLocation() {
            return protocolLocation;
        }

        public void setProtocolLocation(String protocolLocation) {
            this.protocolLocation = protocolLocation;
        }

        public Boolean getReflectionProtocol() {
            return reflectionProtocol;
        }

        public void setReflectionProtocol(Boolean reflectionProtocol) {
            this.reflectionProtocol = reflectionProtocol;
        }

        public Boolean getSingleParameter() {
            return singleParameter;
        }

        public void setSingleParameter(Boolean singleParameter) {
            this.singleParameter = singleParameter;
        }

        public String getUriAuthority() {
            return uriAuthority;
        }

        public void setUriAuthority(String uriAuthority) {
            this.uriAuthority = uriAuthority;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class AvroConsumer extends AvroCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private Boolean bridgeErrorHandler;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class AvroProducer extends AvroCommon {
    }

    public static enum AvroTransport {
        http, netty;
    }
}