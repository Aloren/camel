/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * The splunk component allows to publish or search for events in Splunk.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface SplunkEndpointBuilder {


    public static class SplunkCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        SplunkCommonBuilder(String path) {
            super("splunk", path);
        }
        /**
         * Name has no purpose. The option is a java.lang.String type.
         */
        public T name(String name) {
            this.properties.put("name", name);
            return (T) this;
        }
        /**
         * Splunk app. The option is a java.lang.String type.
         */
        public T app(String app) {
            this.properties.put("app", app);
            return (T) this;
        }
        /**
         * Timeout in MS when connecting to Splunk server. The option is a int
         * type.
         */
        public T connectionTimeout(int connectionTimeout) {
            this.properties.put("connectionTimeout", connectionTimeout);
            return (T) this;
        }
        /**
         * Timeout in MS when connecting to Splunk server. The option will be
         * converted to a int type.
         */
        public T connectionTimeout(String connectionTimeout) {
            this.properties.put("connectionTimeout", connectionTimeout);
            return (T) this;
        }
        /**
         * Splunk host. The option is a java.lang.String type.
         */
        public T host(String host) {
            this.properties.put("host", host);
            return (T) this;
        }
        /**
         * Splunk owner. The option is a java.lang.String type.
         */
        public T owner(String owner) {
            this.properties.put("owner", owner);
            return (T) this;
        }
        /**
         * Splunk port. The option is a int type.
         */
        public T port(int port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Splunk port. The option will be converted to a int type.
         */
        public T port(String port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Splunk scheme. The option is a java.lang.String type.
         */
        public T scheme(String scheme) {
            this.properties.put("scheme", scheme);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a boolean type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a boolean type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Password for Splunk. The option is a java.lang.String type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * Set the ssl protocol to use. The option is a
         * com.splunk.SSLSecurityProtocol type.
         */
        public T sslProtocol(SSLSecurityProtocol sslProtocol) {
            this.properties.put("sslProtocol", sslProtocol);
            return (T) this;
        }
        /**
         * Set the ssl protocol to use. The option will be converted to a
         * com.splunk.SSLSecurityProtocol type.
         */
        public T sslProtocol(String sslProtocol) {
            this.properties.put("sslProtocol", sslProtocol);
            return (T) this;
        }
        /**
         * Username for Splunk. The option is a java.lang.String type.
         */
        public T username(String username) {
            this.properties.put("username", username);
            return (T) this;
        }
        /**
         * Use sun.net.www.protocol.https.Handler Https handler to establish the
         * Splunk Connection. Can be useful when running in application servers
         * to avoid app. server https handling. The option is a boolean type.
         */
        public T useSunHttpsHandler(boolean useSunHttpsHandler) {
            this.properties.put("useSunHttpsHandler", useSunHttpsHandler);
            return (T) this;
        }
        /**
         * Use sun.net.www.protocol.https.Handler Https handler to establish the
         * Splunk Connection. Can be useful when running in application servers
         * to avoid app. server https handling. The option will be converted to
         * a boolean type.
         */
        public T useSunHttpsHandler(String useSunHttpsHandler) {
            this.properties.put("useSunHttpsHandler", useSunHttpsHandler);
            return (T) this;
        }
    }

    public static class SplunkConsumerBuilder
            extends
                SplunkCommonBuilder<SplunkConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public SplunkConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public SplunkConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a boolean type.
         */
        public SplunkConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * A number that indicates the maximum number of entities to return. The
         * option is a int type.
         */
        public SplunkConsumerBuilder count(int count) {
            this.properties.put("count", count);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * A number that indicates the maximum number of entities to return. The
         * option will be converted to a int type.
         */
        public SplunkConsumerBuilder count(String count) {
            this.properties.put("count", count);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Earliest time of the search time window. The option is a
         * java.lang.String type.
         */
        public SplunkConsumerBuilder earliestTime(String earliestTime) {
            this.properties.put("earliestTime", earliestTime);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Initial start offset of the first search. The option is a
         * java.lang.String type.
         */
        public SplunkConsumerBuilder initEarliestTime(String initEarliestTime) {
            this.properties.put("initEarliestTime", initEarliestTime);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Latest time of the search time window. The option is a
         * java.lang.String type.
         */
        public SplunkConsumerBuilder latestTime(String latestTime) {
            this.properties.put("latestTime", latestTime);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * The name of the query saved in Splunk to run. The option is a
         * java.lang.String type.
         */
        public SplunkConsumerBuilder savedSearch(String savedSearch) {
            this.properties.put("savedSearch", savedSearch);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * The Splunk query to run. The option is a java.lang.String type.
         */
        public SplunkConsumerBuilder search(String search) {
            this.properties.put("search", search);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option is a
         * boolean type.
         */
        public SplunkConsumerBuilder sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option will be
         * converted to a boolean type.
         */
        public SplunkConsumerBuilder sendEmptyMessageWhenIdle(
                String sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Sets streaming mode. Streaming mode sends exchanges as they are
         * received, rather than in a batch. The option is a java.lang.Boolean
         * type.
         */
        public SplunkConsumerBuilder streaming(Boolean streaming) {
            this.properties.put("streaming", streaming);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Sets streaming mode. Streaming mode sends exchanges as they are
         * received, rather than in a batch. The option will be converted to a
         * java.lang.Boolean type.
         */
        public SplunkConsumerBuilder streaming(String streaming) {
            this.properties.put("streaming", streaming);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public SplunkConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a org.apache.camel.spi.ExceptionHandler type.
         */
        public SplunkConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public SplunkConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a org.apache.camel.ExchangePattern type.
         */
        public SplunkConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option is a
         * org.apache.camel.spi.PollingConsumerPollStrategy type.
         */
        public SplunkConsumerBuilder pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option will be converted
         * to a org.apache.camel.spi.PollingConsumerPollStrategy type.
         */
        public SplunkConsumerBuilder pollStrategy(String pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * is a int type.
         */
        public SplunkConsumerBuilder backoffErrorThreshold(
                int backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * will be converted to a int type.
         */
        public SplunkConsumerBuilder backoffErrorThreshold(
                String backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option is a int type.
         */
        public SplunkConsumerBuilder backoffIdleThreshold(
                int backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option will be converted to a
         * int type.
         */
        public SplunkConsumerBuilder backoffIdleThreshold(
                String backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option is a int type.
         */
        public SplunkConsumerBuilder backoffMultiplier(int backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option will be converted to a int type.
         */
        public SplunkConsumerBuilder backoffMultiplier(String backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public SplunkConsumerBuilder delay(long delay) {
            this.properties.put("delay", delay);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option will be converted to a long
         * type.
         */
        public SplunkConsumerBuilder delay(String delay) {
            this.properties.put("delay", delay);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option is a boolean type.
         */
        public SplunkConsumerBuilder greedy(boolean greedy) {
            this.properties.put("greedy", greedy);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option will be converted to a boolean type.
         */
        public SplunkConsumerBuilder greedy(String greedy) {
            this.properties.put("greedy", greedy);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public SplunkConsumerBuilder initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option will be converted to a long
         * type.
         */
        public SplunkConsumerBuilder initialDelay(String initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * is a org.apache.camel.LoggingLevel type.
         */
        public SplunkConsumerBuilder runLoggingLevel(
                LoggingLevel runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * will be converted to a org.apache.camel.LoggingLevel type.
         */
        public SplunkConsumerBuilder runLoggingLevel(String runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option is a java.util.concurrent.ScheduledExecutorService
         * type.
         */
        public SplunkConsumerBuilder scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option will be converted to a
         * java.util.concurrent.ScheduledExecutorService type.
         */
        public SplunkConsumerBuilder scheduledExecutorService(
                String scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option is a
         * org.apache.camel.spi.ScheduledPollConsumerScheduler type.
         */
        public SplunkConsumerBuilder scheduler(
                ScheduledPollConsumerScheduler scheduler) {
            this.properties.put("scheduler", scheduler);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option will be converted to a
         * org.apache.camel.spi.ScheduledPollConsumerScheduler type.
         */
        public SplunkConsumerBuilder scheduler(String scheduler) {
            this.properties.put("scheduler", scheduler);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public SplunkConsumerBuilder schedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option will be
         * converted to a java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public SplunkConsumerBuilder schedulerProperties(
                String schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started. The option is a boolean
         * type.
         */
        public SplunkConsumerBuilder startScheduler(boolean startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started. The option will be
         * converted to a boolean type.
         */
        public SplunkConsumerBuilder startScheduler(String startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option is a
         * java.util.concurrent.TimeUnit type.
         */
        public SplunkConsumerBuilder timeUnit(TimeUnit timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option will be
         * converted to a java.util.concurrent.TimeUnit type.
         */
        public SplunkConsumerBuilder timeUnit(String timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option is a boolean
         * type.
         */
        public SplunkConsumerBuilder useFixedDelay(boolean useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (SplunkConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option will be
         * converted to a boolean type.
         */
        public SplunkConsumerBuilder useFixedDelay(String useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (SplunkConsumerBuilder) this;
        }
    }

    public static class SplunkProducerBuilder
            extends
                SplunkCommonBuilder<SplunkProducerBuilder>
            implements
                EndpointProducerBuilder {
        public SplunkProducerBuilder(String path) {
            super(path);
        }
        /**
         * Override the default Splunk event host field. The option is a
         * java.lang.String type.
         */
        public SplunkProducerBuilder eventHost(String eventHost) {
            this.properties.put("eventHost", eventHost);
            return (SplunkProducerBuilder) this;
        }
        /**
         * Splunk index to write to. The option is a java.lang.String type.
         */
        public SplunkProducerBuilder index(String index) {
            this.properties.put("index", index);
            return (SplunkProducerBuilder) this;
        }
        /**
         * Should the payload be inserted raw. The option is a boolean type.
         */
        public SplunkProducerBuilder raw(boolean raw) {
            this.properties.put("raw", raw);
            return (SplunkProducerBuilder) this;
        }
        /**
         * Should the payload be inserted raw. The option will be converted to a
         * boolean type.
         */
        public SplunkProducerBuilder raw(String raw) {
            this.properties.put("raw", raw);
            return (SplunkProducerBuilder) this;
        }
        /**
         * Splunk source argument. The option is a java.lang.String type.
         */
        public SplunkProducerBuilder source(String source) {
            this.properties.put("source", source);
            return (SplunkProducerBuilder) this;
        }
        /**
         * Splunk sourcetype argument. The option is a java.lang.String type.
         */
        public SplunkProducerBuilder sourceType(String sourceType) {
            this.properties.put("sourceType", sourceType);
            return (SplunkProducerBuilder) this;
        }
        /**
         * Splunk tcp receiver port. The option is a int type.
         */
        public SplunkProducerBuilder tcpReceiverPort(int tcpReceiverPort) {
            this.properties.put("tcpReceiverPort", tcpReceiverPort);
            return (SplunkProducerBuilder) this;
        }
        /**
         * Splunk tcp receiver port. The option will be converted to a int type.
         */
        public SplunkProducerBuilder tcpReceiverPort(String tcpReceiverPort) {
            this.properties.put("tcpReceiverPort", tcpReceiverPort);
            return (SplunkProducerBuilder) this;
        }
    }

    public static enum SSLSecurityProtocol {
        TLSv1_2, TLSv1_1, TLSv1, SSLv3;
    }
    public default SplunkConsumerBuilder fromSplunk(String path) {
        return new SplunkConsumerBuilder(path);
    }
    public default SplunkProducerBuilder toSplunk(String path) {
        return new SplunkProducerBuilder(path);
    }
}