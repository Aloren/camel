/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Integrates Camel with Wordpress.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface WordpressEndpoint {


    public static class WordpressCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        WordpressCommon(String path) {
            super("wordpress", path);
        }
        /**
         * The endpoint operation. The option is a java.lang.String type.
         */
        public T operation(String operation) {
            this.properties.put("operation", operation);
            return (T) this;
        }
        /**
         * The second part of an endpoint operation. Needed only when endpoint
         * semantic is not enough, like wordpress:post:delete. The option is a
         * java.lang.String type.
         */
        public T operationDetail(String operationDetail) {
            this.properties.put("operationDetail", operationDetail);
            return (T) this;
        }
        /**
         * The Wordpress REST API version. The option is a java.lang.String
         * type.
         */
        public T apiVersion(String apiVersion) {
            this.properties.put("apiVersion", apiVersion);
            return (T) this;
        }
        /**
         * The criteria to use with complex searches. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public T criteria(Map<String, Object> criteria) {
            this.properties.put("criteria", criteria);
            return (T) this;
        }
        /**
         * Whether to bypass trash and force deletion. The option is a
         * java.lang.Boolean type.
         */
        public T force(Boolean force) {
            this.properties.put("force", force);
            return (T) this;
        }
        /**
         * The entity ID. Should be passed when the operation performed requires
         * a specific entity, e.g. deleting a post. The option is a
         * java.lang.Integer type.
         */
        public T id(Integer id) {
            this.properties.put("id", id);
            return (T) this;
        }
        /**
         * Password from authorized user. The option is a java.lang.String type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * Search criteria. The option is a
         * org.apache.camel.component.wordpress.api.model.SearchCriteria type.
         */
        public T searchCriteria(Object searchCriteria) {
            this.properties.put("searchCriteria", searchCriteria);
            return (T) this;
        }
        /**
         * The Wordpress API URL from your site, e.g.
         * http://myblog.com/wp-json/. The option is a java.lang.String type.
         */
        public T url(String url) {
            this.properties.put("url", url);
            return (T) this;
        }
        /**
         * Authorized user to perform writing operations. The option is a
         * java.lang.String type.
         */
        public T user(String user) {
            this.properties.put("user", user);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class WordpressConsumer
            extends
                WordpressCommon<WordpressConsumer>
            implements
                EndpointDefinition.Consumer {
        public WordpressConsumer(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public WordpressConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (WordpressConsumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public WordpressConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (WordpressConsumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public WordpressConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (WordpressConsumer) this;
        }
    }

    public static class WordpressProducer
            extends
                WordpressCommon<WordpressProducer>
            implements
                EndpointDefinition.Producer {
        public WordpressProducer(String path) {
            super(path);
        }
    }
    public default WordpressConsumer fromWordpress(String path) {
        return new WordpressConsumer(path);
    }
    public default WordpressProducer toWordpress(String path) {
        return new WordpressProducer(path);
    }
}