/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The Ignite Cache endpoint is one of camel-ignite endpoints which allows you
 * to interact with an Ignite Cache.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class IgniteCacheEndpoint {


    public static class IgniteCacheCommon extends EndpointConfiguration {
        /**
         * The cache name. The option is a java.lang.String type.
         */
        private String cacheName;
        /**
         * Sets whether to propagate the incoming body if the return type of the
         * underlying Ignite operation is void. The option is a boolean type.
         */
        private Boolean propagateIncomingBodyIfNoReturnValue;
        /**
         * Sets whether to treat Collections as cache objects or as Collections
         * of items to insert/update/compute, etc. The option is a boolean type.
         */
        private Boolean treatCollectionsAsCacheObjects;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;

        public String getCacheName() {
            return cacheName;
        }

        public void setCacheName(String cacheName) {
            this.cacheName = cacheName;
        }

        public Boolean getPropagateIncomingBodyIfNoReturnValue() {
            return propagateIncomingBodyIfNoReturnValue;
        }

        public void setPropagateIncomingBodyIfNoReturnValue(
                Boolean propagateIncomingBodyIfNoReturnValue) {
            this.propagateIncomingBodyIfNoReturnValue = propagateIncomingBodyIfNoReturnValue;
        }

        public Boolean getTreatCollectionsAsCacheObjects() {
            return treatCollectionsAsCacheObjects;
        }

        public void setTreatCollectionsAsCacheObjects(
                Boolean treatCollectionsAsCacheObjects) {
            this.treatCollectionsAsCacheObjects = treatCollectionsAsCacheObjects;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class IgniteCacheConsumer extends IgniteCacheCommon {
        /**
         * Whether auto unsubscribe is enabled in the Continuous Query Consumer.
         * The option is a boolean type.
         */
        private Boolean autoUnsubscribe;
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private Boolean bridgeErrorHandler;
        /**
         * Whether to process existing results that match the query. Used on
         * initialization of the Continuous Query Consumer. The option is a
         * boolean type.
         */
        private Boolean fireExistingQueryResults;
        /**
         * Whether to pack each update in an individual Exchange, even if
         * multiple updates are received in one batch. Only used by the
         * Continuous Query Consumer. The option is a boolean type.
         */
        private Boolean oneExchangePerUpdate;
        /**
         * The page size. Only used by the Continuous Query Consumer. The option
         * is a int type.
         */
        private Integer pageSize;
        /**
         * The remote filter, only used by the Continuous Query Consumer. The
         * option is a
         * org.apache.ignite.cache.CacheEntryEventSerializableFilter<java.lang.Object,java.lang.Object> type.
         */
        private Object remoteFilter;
        /**
         * The time interval for the Continuous Query Consumer. The option is a
         * long type.
         */
        private Long timeInterval;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public Boolean getAutoUnsubscribe() {
            return autoUnsubscribe;
        }

        public void setAutoUnsubscribe(Boolean autoUnsubscribe) {
            this.autoUnsubscribe = autoUnsubscribe;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public Boolean getFireExistingQueryResults() {
            return fireExistingQueryResults;
        }

        public void setFireExistingQueryResults(Boolean fireExistingQueryResults) {
            this.fireExistingQueryResults = fireExistingQueryResults;
        }

        public Boolean getOneExchangePerUpdate() {
            return oneExchangePerUpdate;
        }

        public void setOneExchangePerUpdate(Boolean oneExchangePerUpdate) {
            this.oneExchangePerUpdate = oneExchangePerUpdate;
        }

        public Integer getPageSize() {
            return pageSize;
        }

        public void setPageSize(Integer pageSize) {
            this.pageSize = pageSize;
        }

        public Object getRemoteFilter() {
            return remoteFilter;
        }

        public void setRemoteFilter(Object remoteFilter) {
            this.remoteFilter = remoteFilter;
        }

        public Long getTimeInterval() {
            return timeInterval;
        }

        public void setTimeInterval(Long timeInterval) {
            this.timeInterval = timeInterval;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class IgniteCacheProducer extends IgniteCacheCommon {
        /**
         * The Query to execute, only needed for operations that require it, and
         * for the Continuous Query Consumer. The option is a
         * org.apache.ignite.cache.query.Query<javax.cache.Cache.Entry<java.lang.Object,java.lang.Object>> type.
         */
        private Object query;
        /**
         * The CachePeekMode, only needed for operations that require it
         * (IgniteCacheOperation#SIZE). The option is a
         * org.apache.ignite.cache.CachePeekMode type.
         */
        private CachePeekMode cachePeekMode;
        /**
         * Whether to fail the initialization if the cache doesn't exist. The
         * option is a boolean type.
         */
        private Boolean failIfInexistentCache;
        /**
         * The cache operation to invoke. Possible values: GET, PUT, REMOVE,
         * SIZE, REBALANCE, QUERY, CLEAR. The option is a
         * org.apache.camel.component.ignite.cache.IgniteCacheOperation type.
         */
        private IgniteCacheOperation operation;

        public Object getQuery() {
            return query;
        }

        public void setQuery(Object query) {
            this.query = query;
        }

        public CachePeekMode getCachePeekMode() {
            return cachePeekMode;
        }

        public void setCachePeekMode(CachePeekMode cachePeekMode) {
            this.cachePeekMode = cachePeekMode;
        }

        public Boolean getFailIfInexistentCache() {
            return failIfInexistentCache;
        }

        public void setFailIfInexistentCache(Boolean failIfInexistentCache) {
            this.failIfInexistentCache = failIfInexistentCache;
        }

        public IgniteCacheOperation getOperation() {
            return operation;
        }

        public void setOperation(IgniteCacheOperation operation) {
            this.operation = operation;
        }
    }

    public static enum CachePeekMode {
        ALL, NEAR, PRIMARY, BACKUP, ONHEAP, OFFHEAP;
    }

    public static enum IgniteCacheOperation {
        GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR;
    }
}