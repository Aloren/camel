/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.security.KeyStore;
import java.util.List;
import javax.annotation.Generated;

/**
 * The crypto cms component is used for encrypting data in CMS Enveloped Data
 * format, decrypting CMS Enveloped Data, signing data in CMS Signed Data
 * format, and verifying CMS Signed Data.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class CryptoCmsEndpoint {


    public static class CryptoCmsCommon extends EndpointConfiguration {
        /**
         * Set the Crypto operation from that supplied after the crypto scheme
         * in the endpoint uri e.g. crypto-cms:sign sets sign as the operation.
         * Possible values: sign, verify, encrypt, or decrypt. The option is a
         * org.apache.camel.component.crypto.cms.CryptoOperation type.
         */
        private CryptoOperation cryptoOperation;
        /**
         * The name part in the URI can be chosen by the user to distinguish
         * between different signer/verifier/encryptor/decryptor endpoints
         * within the camel context. The option is a java.lang.String type.
         */
        private String name;
        /**
         * Keystore which contains signer private keys, verifier public keys,
         * encryptor public keys, decryptor private keys depending on the
         * operation. Use either this parameter or the parameter
         * 'keyStoreParameters'. The option is a java.security.KeyStore type.
         */
        private KeyStore keyStore;
        /**
         * Keystore containing signer private keys, verifier public keys,
         * encryptor public keys, decryptor private keys depending on the
         * operation. Use either this parameter or the parameter 'keystore'. The
         * option is a org.apache.camel.support.jsse.KeyStoreParameters type.
         */
        private Object keyStoreParameters;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;
        /**
         * Sets the password of the private keys. It is assumed that all private
         * keys in the keystore have the same password. If not set then it is
         * assumed that the password of the private keys is given by the
         * keystore password given in the KeyStoreParameters. The option is a
         * char[] type.
         */
        private Character[] password;
        /**
         * If true then the CMS message is base 64 encoded and must be decoded
         * during the processing. Default value is false. The option is a
         * java.lang.Boolean type.
         */
        private Boolean fromBase64;
        /**
         * Encryption algorithm, for example DESede/CBC/PKCS5Padding. Further
         * possible values: DESede/CBC/PKCS5Padding, AES/CBC/PKCS5Padding,
         * Camellia/CBC/PKCS5Padding, CAST5/CBC/PKCS5Padding. The option is a
         * java.lang.String type.
         */
        private String contentEncryptionAlgorithm;
        /**
         * Provider for the originator info. See
         * https://tools.ietf.org/html/rfc5652#section-6.1. The default value is
         * null. The option is a
         * org.apache.camel.component.crypto.cms.common.OriginatorInformationProvider type.
         */
        private Object originatorInformationProvider;
        /**
         * Recipient Info: reference to a bean which implements the interface
         * org.apache.camel.component.crypto.cms.api.TransRecipientInfo. The
         * option is a
         * java.util.List<org.apache.camel.component.crypto.cms.crypt.RecipientInfo> type.
         */
        private List<Object> recipient;
        /**
         * Key length for the secret symmetric key used for the content
         * encryption. Only used if the specified content-encryption algorithm
         * allows keys of different sizes. If
         * contentEncryptionAlgorithm=AES/CBC/PKCS5Padding or
         * Camellia/CBC/PKCS5Padding then 128; if
         * contentEncryptionAlgorithm=DESede/CBC/PKCS5Padding then 192, 128; if
         * strong encryption is enabled then for AES/CBC/PKCS5Padding and
         * Camellia/CBC/PKCS5Padding also the key lengths 192 and 256 are
         * possible. The option is a int type.
         */
        private Integer secretKeyLength;
        /**
         * Provider of the generator for the unprotected attributes. The default
         * value is null which means no unprotected attribute is added to the
         * Enveloped Data object. See
         * https://tools.ietf.org/html/rfc5652#section-6.1. The option is a
         * org.apache.camel.component.crypto.cms.common.AttributesGeneratorProvider type.
         */
        private Object unprotectedAttributesGeneratorProvider;
        /**
         * Indicates whether the Signed Data or Enveloped Data instance shall be
         * base 64 encoded. Default value is false. The option is a
         * java.lang.Boolean type.
         */
        private Boolean toBase64;
        /**
         * Indicates whether the signed content should be included into the
         * Signed Data instance. If false then a detached Signed Data instance
         * is created in the header CamelCryptoCmsSignedData. The option is a
         * java.lang.Boolean type.
         */
        private Boolean includeContent;
        /**
         * Signer information: reference to bean(s) which implements
         * org.apache.camel.component.crypto.cms.api.SignerInfo. Multiple values
         * can be separated by comma. The option is a java.lang.String type.
         */
        private List<Object> signer;
        /**
         * Indicates whether the value in the header CamelCryptoCmsSignedData is
         * base64 encoded. Default value is false. Only relevant for detached
         * signatures. In the detached signature case, the header contains the
         * Signed Data object. The option is a java.lang.Boolean type.
         */
        private Boolean signedDataHeaderBase64;
        /**
         * If true then the signatures of all signers contained in the Signed
         * Data object are verified. If false then only one signature whose
         * signer info matches with one of the specified certificates is
         * verified. Default value is true. The option is a java.lang.Boolean
         * type.
         */
        private Boolean verifySignaturesOfAllSigners;

        public CryptoOperation getCryptoOperation() {
            return cryptoOperation;
        }

        public void setCryptoOperation(CryptoOperation cryptoOperation) {
            this.cryptoOperation = cryptoOperation;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public KeyStore getKeyStore() {
            return keyStore;
        }

        public void setKeyStore(KeyStore keyStore) {
            this.keyStore = keyStore;
        }

        public Object getKeyStoreParameters() {
            return keyStoreParameters;
        }

        public void setKeyStoreParameters(Object keyStoreParameters) {
            this.keyStoreParameters = keyStoreParameters;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Character[] getPassword() {
            return password;
        }

        public void setPassword(Character[] password) {
            this.password = password;
        }

        public Boolean getFromBase64() {
            return fromBase64;
        }

        public void setFromBase64(Boolean fromBase64) {
            this.fromBase64 = fromBase64;
        }

        public String getContentEncryptionAlgorithm() {
            return contentEncryptionAlgorithm;
        }

        public void setContentEncryptionAlgorithm(
                String contentEncryptionAlgorithm) {
            this.contentEncryptionAlgorithm = contentEncryptionAlgorithm;
        }

        public Object getOriginatorInformationProvider() {
            return originatorInformationProvider;
        }

        public void setOriginatorInformationProvider(
                Object originatorInformationProvider) {
            this.originatorInformationProvider = originatorInformationProvider;
        }

        public List<Object> getRecipient() {
            return recipient;
        }

        public void setRecipient(List<Object> recipient) {
            this.recipient = recipient;
        }

        public Integer getSecretKeyLength() {
            return secretKeyLength;
        }

        public void setSecretKeyLength(Integer secretKeyLength) {
            this.secretKeyLength = secretKeyLength;
        }

        public Object getUnprotectedAttributesGeneratorProvider() {
            return unprotectedAttributesGeneratorProvider;
        }

        public void setUnprotectedAttributesGeneratorProvider(
                Object unprotectedAttributesGeneratorProvider) {
            this.unprotectedAttributesGeneratorProvider = unprotectedAttributesGeneratorProvider;
        }

        public Boolean getToBase64() {
            return toBase64;
        }

        public void setToBase64(Boolean toBase64) {
            this.toBase64 = toBase64;
        }

        public Boolean getIncludeContent() {
            return includeContent;
        }

        public void setIncludeContent(Boolean includeContent) {
            this.includeContent = includeContent;
        }

        public List<Object> getSigner() {
            return signer;
        }

        public void setSigner(List<Object> signer) {
            this.signer = signer;
        }

        public Boolean getSignedDataHeaderBase64() {
            return signedDataHeaderBase64;
        }

        public void setSignedDataHeaderBase64(Boolean signedDataHeaderBase64) {
            this.signedDataHeaderBase64 = signedDataHeaderBase64;
        }

        public Boolean getVerifySignaturesOfAllSigners() {
            return verifySignaturesOfAllSigners;
        }

        public void setVerifySignaturesOfAllSigners(
                Boolean verifySignaturesOfAllSigners) {
            this.verifySignaturesOfAllSigners = verifySignaturesOfAllSigners;
        }
    }

    public static class CryptoCmsConsumer extends CryptoCmsCommon {
    }

    public static class CryptoCmsProducer extends CryptoCmsCommon {
    }

    public static enum CryptoOperation {
        sign, verify, encrypt, decrypt;
    }
}