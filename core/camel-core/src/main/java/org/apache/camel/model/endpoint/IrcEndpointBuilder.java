/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The irc component implements an IRC (Internet Relay Chat) transport.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface IrcEndpointBuilder {


    /**
     * Base class for the IRC component builders.
     */
    public static class IrcCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        IrcCommonBuilder(String path) {
            super("irc", path);
        }
        /**
         * Hostname for the IRC chat server. The option is a
         * <code>java.lang.String</code> type.
         */
        public T hostname(String hostname) {
            this.properties.put("hostname", hostname);
            return (T) this;
        }
        /**
         * Port number for the IRC chat server. If no port is configured then a
         * default port of either 6667, 6668 or 6669 is used. The option is a
         * <code>int</code> type.
         */
        public T port(int port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Port number for the IRC chat server. If no port is configured then a
         * default port of either 6667, 6668 or 6669 is used. The option will be
         * converted to a <code>int</code> type.
         */
        public T port(String port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Whether to auto re-join when being kicked. The option is a
         * <code>boolean</code> type.
         */
        public T autoRejoin(boolean autoRejoin) {
            this.properties.put("autoRejoin", autoRejoin);
            return (T) this;
        }
        /**
         * Whether to auto re-join when being kicked. The option will be
         * converted to a <code>boolean</code> type.
         */
        public T autoRejoin(String autoRejoin) {
            this.properties.put("autoRejoin", autoRejoin);
            return (T) this;
        }
        /**
         * Delay in milliseconds before sending commands after the connection is
         * established. The option is a <code>long</code> type.
         */
        public T commandTimeout(long commandTimeout) {
            this.properties.put("commandTimeout", commandTimeout);
            return (T) this;
        }
        /**
         * Delay in milliseconds before sending commands after the connection is
         * established. The option will be converted to a <code>long</code>
         * type.
         */
        public T commandTimeout(String commandTimeout) {
            this.properties.put("commandTimeout", commandTimeout);
            return (T) this;
        }
        /**
         * Sends NAMES command to channel after joining it. onReply has to be
         * true in order to process the result which will have the header value
         * irc.num = '353'. The option is a <code>boolean</code> type.
         */
        public T namesOnJoin(boolean namesOnJoin) {
            this.properties.put("namesOnJoin", namesOnJoin);
            return (T) this;
        }
        /**
         * Sends NAMES command to channel after joining it. onReply has to be
         * true in order to process the result which will have the header value
         * irc.num = '353'. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T namesOnJoin(String namesOnJoin) {
            this.properties.put("namesOnJoin", namesOnJoin);
            return (T) this;
        }
        /**
         * The nickname used in chat. The option is a
         * <code>java.lang.String</code> type.
         */
        public T nickname(String nickname) {
            this.properties.put("nickname", nickname);
            return (T) this;
        }
        /**
         * Use persistent messages. The option is a <code>boolean</code> type.
         */
        @Deprecated
        public T persistent(boolean persistent) {
            this.properties.put("persistent", persistent);
            return (T) this;
        }
        /**
         * Use persistent messages. The option will be converted to a
         * <code>boolean</code> type.
         */
        @Deprecated
        public T persistent(String persistent) {
            this.properties.put("persistent", persistent);
            return (T) this;
        }
        /**
         * The IRC user's actual name. The option is a
         * <code>java.lang.String</code> type.
         */
        public T realname(String realname) {
            this.properties.put("realname", realname);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether or not the server supports color codes. The option is a
         * <code>boolean</code> type.
         */
        public T colors(boolean colors) {
            this.properties.put("colors", colors);
            return (T) this;
        }
        /**
         * Whether or not the server supports color codes. The option will be
         * converted to a <code>boolean</code> type.
         */
        public T colors(String colors) {
            this.properties.put("colors", colors);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Handle user join events. The option is a <code>boolean</code> type.
         */
        public T onJoin(boolean onJoin) {
            this.properties.put("onJoin", onJoin);
            return (T) this;
        }
        /**
         * Handle user join events. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T onJoin(String onJoin) {
            this.properties.put("onJoin", onJoin);
            return (T) this;
        }
        /**
         * Handle kick events. The option is a <code>boolean</code> type.
         */
        public T onKick(boolean onKick) {
            this.properties.put("onKick", onKick);
            return (T) this;
        }
        /**
         * Handle kick events. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T onKick(String onKick) {
            this.properties.put("onKick", onKick);
            return (T) this;
        }
        /**
         * Handle mode change events. The option is a <code>boolean</code> type.
         */
        public T onMode(boolean onMode) {
            this.properties.put("onMode", onMode);
            return (T) this;
        }
        /**
         * Handle mode change events. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T onMode(String onMode) {
            this.properties.put("onMode", onMode);
            return (T) this;
        }
        /**
         * Handle nickname change events. The option is a <code>boolean</code>
         * type.
         */
        public T onNick(boolean onNick) {
            this.properties.put("onNick", onNick);
            return (T) this;
        }
        /**
         * Handle nickname change events. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T onNick(String onNick) {
            this.properties.put("onNick", onNick);
            return (T) this;
        }
        /**
         * Handle user part events. The option is a <code>boolean</code> type.
         */
        public T onPart(boolean onPart) {
            this.properties.put("onPart", onPart);
            return (T) this;
        }
        /**
         * Handle user part events. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T onPart(String onPart) {
            this.properties.put("onPart", onPart);
            return (T) this;
        }
        /**
         * Handle private message events. The option is a <code>boolean</code>
         * type.
         */
        public T onPrivmsg(boolean onPrivmsg) {
            this.properties.put("onPrivmsg", onPrivmsg);
            return (T) this;
        }
        /**
         * Handle private message events. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T onPrivmsg(String onPrivmsg) {
            this.properties.put("onPrivmsg", onPrivmsg);
            return (T) this;
        }
        /**
         * Handle user quit events. The option is a <code>boolean</code> type.
         */
        public T onQuit(boolean onQuit) {
            this.properties.put("onQuit", onQuit);
            return (T) this;
        }
        /**
         * Handle user quit events. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T onQuit(String onQuit) {
            this.properties.put("onQuit", onQuit);
            return (T) this;
        }
        /**
         * Whether or not to handle general responses to commands or
         * informational messages. The option is a <code>boolean</code> type.
         */
        public T onReply(boolean onReply) {
            this.properties.put("onReply", onReply);
            return (T) this;
        }
        /**
         * Whether or not to handle general responses to commands or
         * informational messages. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T onReply(String onReply) {
            this.properties.put("onReply", onReply);
            return (T) this;
        }
        /**
         * Handle topic change events. The option is a <code>boolean</code>
         * type.
         */
        public T onTopic(boolean onTopic) {
            this.properties.put("onTopic", onTopic);
            return (T) this;
        }
        /**
         * Handle topic change events. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T onTopic(String onTopic) {
            this.properties.put("onTopic", onTopic);
            return (T) this;
        }
        /**
         * Your IRC server nickname password. The option is a
         * <code>java.lang.String</code> type.
         */
        public T nickPassword(String nickPassword) {
            this.properties.put("nickPassword", nickPassword);
            return (T) this;
        }
        /**
         * The IRC server password. The option is a
         * <code>java.lang.String</code> type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * Used for configuring security using SSL. Reference to a
         * org.apache.camel.support.jsse.SSLContextParameters in the Registry.
         * This reference overrides any configured SSLContextParameters at the
         * component level. Note that this setting overrides the trustManager
         * option. The option is a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         */
        public T sslContextParameters(Object sslContextParameters) {
            this.properties.put("sslContextParameters", sslContextParameters);
            return (T) this;
        }
        /**
         * Used for configuring security using SSL. Reference to a
         * org.apache.camel.support.jsse.SSLContextParameters in the Registry.
         * This reference overrides any configured SSLContextParameters at the
         * component level. Note that this setting overrides the trustManager
         * option. The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         */
        public T sslContextParameters(String sslContextParameters) {
            this.properties.put("sslContextParameters", sslContextParameters);
            return (T) this;
        }
        /**
         * The trust manager used to verify the SSL server's certificate. The
         * option is a <code>org.schwering.irc.lib.ssl.SSLTrustManager</code>
         * type.
         */
        public T trustManager(Object trustManager) {
            this.properties.put("trustManager", trustManager);
            return (T) this;
        }
        /**
         * The trust manager used to verify the SSL server's certificate. The
         * option will be converted to a
         * <code>org.schwering.irc.lib.ssl.SSLTrustManager</code> type.
         */
        public T trustManager(String trustManager) {
            this.properties.put("trustManager", trustManager);
            return (T) this;
        }
        /**
         * The IRC server user name. The option is a
         * <code>java.lang.String</code> type.
         */
        public T username(String username) {
            this.properties.put("username", username);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint consumers for the IRC component.
     */
    public static class IrcConsumerBuilder
            extends
                IrcCommonBuilder<IrcConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public IrcConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public IrcConsumerBuilder bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (IrcConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public IrcConsumerBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (IrcConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public IrcConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (IrcConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public IrcConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (IrcConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public IrcConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (IrcConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public IrcConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (IrcConsumerBuilder) this;
        }
    }

    /**
     * Builder for endpoint producers for the IRC component.
     */
    public static class IrcProducerBuilder
            extends
                IrcCommonBuilder<IrcProducerBuilder>
            implements
                EndpointProducerBuilder {
        public IrcProducerBuilder(String path) {
            super(path);
        }
    }
    /**
     * The irc component implements an IRC (Internet Relay Chat) transport.
     * Creates a builder to build a consumer endpoint for the IRC component.
     */
    public default IrcConsumerBuilder fromIrc(String path) {
        return new IrcConsumerBuilder(path);
    }
    /**
     * The irc component implements an IRC (Internet Relay Chat) transport.
     * Creates a builder to build a producer endpoint for the IRC component.
     */
    public default IrcProducerBuilder toIrc(String path) {
        return new IrcProducerBuilder(path);
    }
}