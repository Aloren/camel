/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URI;
import java.util.List;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * To send and receive messages using the SIP protocol (used in telco and
 * mobile).
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class SipEndpoint {


    public static class SipCommon extends EndpointConfiguration {
        /**
         * URI of the SIP server to connect to (the username and password can be
         * included such as: john:secretmyserver:9999). The option is a
         * java.net.URI type.
         */
        private URI uri;
        /**
         * Should connections be cached by the SipStack to reduce cost of
         * connection creation. This is useful if the connection is used for
         * long running conversations. The option is a boolean type.
         */
        private boolean cacheConnections;
        /**
         * Setting for contentSubType can be set to any valid MimeSubType. The
         * option is a java.lang.String type.
         */
        private String contentSubType;
        /**
         * Setting for contentType can be set to any valid MimeType. The option
         * is a java.lang.String type.
         */
        private String contentType;
        /**
         * Setting for a String based event type. The option is a
         * java.lang.String type.
         */
        private String eventHeaderName;
        /**
         * Setting for a String based event Id. Mandatory setting unless a
         * registry based FromHeader is specified. The option is a
         * java.lang.String type.
         */
        private String eventId;
        /**
         * Hostname of the message originator. Mandatory setting unless a
         * registry based FromHeader is specified. The option is a
         * java.lang.String type.
         */
        private String fromHost;
        /**
         * Port of the message originator. Mandatory setting unless a registry
         * based FromHeader is specified. The option is a int type.
         */
        private int fromPort;
        /**
         * Username of the message originator. Mandatory setting unless a
         * registry based custom FromHeader is specified. The option is a
         * java.lang.String type.
         */
        private String fromUser;
        /**
         * The amount of time a message received at an endpoint is considered
         * valid. The option is a int type.
         */
        private int msgExpiration;
        /**
         * Setting for specifying amount of time to wait for a Response and/or
         * Acknowledgement can be received from another SIP stack. The option is
         * a long type.
         */
        private long receiveTimeoutMillis;
        /**
         * Name of the SIP Stack instance associated with an SIP Endpoint. The
         * option is a java.lang.String type.
         */
        private String stackName;
        /**
         * Hostname of the message receiver. Mandatory setting unless a registry
         * based ToHeader is specified. The option is a java.lang.String type.
         */
        private String toHost;
        /**
         * Portname of the message receiver. Mandatory setting unless a registry
         * based ToHeader is specified. The option is a int type.
         */
        private int toPort;
        /**
         * Username of the message receiver. Mandatory setting unless a registry
         * based custom ToHeader is specified. The option is a java.lang.String
         * type.
         */
        private String toUser;
        /**
         * Setting for choice of transport protocol. Valid choices are tcp or
         * udp. The option is a java.lang.String type.
         */
        private String transport;
        /**
         * To use a custom AddressFactory. The option is a
         * javax.sip.address.AddressFactory type.
         */
        private Object addressFactory;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * A custom Header object containing call details. Must implement the
         * type javax.sip.header.CallIdHeader. The option is a
         * javax.sip.header.CallIdHeader type.
         */
        private Object callIdHeader;
        /**
         * An optional custom Header object containing verbose contact details
         * (email, phone number etc). Must implement the type
         * javax.sip.header.ContactHeader. The option is a
         * javax.sip.header.ContactHeader type.
         */
        private Object contactHeader;
        /**
         * A custom Header object containing message content details. Must
         * implement the type javax.sip.header.ContentTypeHeader. The option is
         * a javax.sip.header.ContentTypeHeader type.
         */
        private Object contentTypeHeader;
        /**
         * A custom Header object containing event details. Must implement the
         * type javax.sip.header.EventHeader. The option is a
         * javax.sip.header.EventHeader type.
         */
        private Object eventHeader;
        /**
         * A custom Header object containing message expiration details. Must
         * implement the type javax.sip.header.ExpiresHeader. The option is a
         * javax.sip.header.ExpiresHeader type.
         */
        private Object expiresHeader;
        /**
         * A custom Header object containing user/application specific details.
         * Must implement the type javax.sip.header.ExtensionHeader. The option
         * is a javax.sip.header.ExtensionHeader type.
         */
        private Object extensionHeader;
        /**
         * A custom Header object containing message originator settings. Must
         * implement the type javax.sip.header.FromHeader. The option is a
         * javax.sip.header.FromHeader type.
         */
        private Object fromHeader;
        /**
         * To use a custom HeaderFactory. The option is a
         * javax.sip.header.HeaderFactory type.
         */
        private Object headerFactory;
        /**
         * To use a custom ListeningPoint implementation. The option is a
         * javax.sip.ListeningPoint type.
         */
        private Object listeningPoint;
        /**
         * A custom Header object containing details on maximum proxy forwards.
         * This header places a limit on the viaHeaders possible. Must implement
         * the type javax.sip.header.MaxForwardsHeader. The option is a
         * javax.sip.header.MaxForwardsHeader type.
         */
        private Object maxForwardsHeader;
        /**
         * Setting for maximum allowed Message size in bytes. The option is a
         * int type.
         */
        private int maxMessageSize;
        /**
         * To use a custom MessageFactory. The option is a
         * javax.sip.message.MessageFactory type.
         */
        private Object messageFactory;
        /**
         * To use a custom SipFactory to create the SipStack to be used. The
         * option is a javax.sip.SipFactory type.
         */
        private Object sipFactory;
        /**
         * To use a custom SipStack. The option is a javax.sip.SipStack type.
         */
        private Object sipStack;
        /**
         * To use a custom SipURI. If none configured, then the SipUri fallback
         * to use the options toUser toHost:toPort. The option is a
         * javax.sip.address.SipURI type.
         */
        private Object sipUri;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * A custom Header object containing message receiver settings. Must
         * implement the type javax.sip.header.ToHeader. The option is a
         * javax.sip.header.ToHeader type.
         */
        private Object toHeader;
        /**
         * List of custom Header objects of the type javax.sip.header.ViaHeader.
         * Each ViaHeader containing a proxy address for request forwarding.
         * (Note this header is automatically updated by each proxy when the
         * request arrives at its listener). The option is a
         * java.util.List<javax.sip.header.ViaHeader> type.
         */
        private List<Object> viaHeaders;
        /**
         * Name of client debug log file to use for logging. The option is a
         * java.lang.String type.
         */
        private String implementationDebugLogFile;
        /**
         * Name of server log file to use for logging. The option is a
         * java.lang.String type.
         */
        private String implementationServerLogFile;
        /**
         * Logging level for tracing. The option is a java.lang.String type.
         */
        private String implementationTraceLevel;
        /**
         * Number of maximum proxy forwards. The option is a int type.
         */
        private int maxForwards;
        /**
         * This setting is used when requests are sent to the Presence Agent via
         * a proxy. The option is a boolean type.
         */
        private boolean useRouterForAllUris;

        public URI getUri() {
            return uri;
        }

        public void setUri(URI uri) {
            this.uri = uri;
        }

        public boolean getCacheConnections() {
            return cacheConnections;
        }

        public void setCacheConnections(boolean cacheConnections) {
            this.cacheConnections = cacheConnections;
        }

        public String getContentSubType() {
            return contentSubType;
        }

        public void setContentSubType(String contentSubType) {
            this.contentSubType = contentSubType;
        }

        public String getContentType() {
            return contentType;
        }

        public void setContentType(String contentType) {
            this.contentType = contentType;
        }

        public String getEventHeaderName() {
            return eventHeaderName;
        }

        public void setEventHeaderName(String eventHeaderName) {
            this.eventHeaderName = eventHeaderName;
        }

        public String getEventId() {
            return eventId;
        }

        public void setEventId(String eventId) {
            this.eventId = eventId;
        }

        public String getFromHost() {
            return fromHost;
        }

        public void setFromHost(String fromHost) {
            this.fromHost = fromHost;
        }

        public int getFromPort() {
            return fromPort;
        }

        public void setFromPort(int fromPort) {
            this.fromPort = fromPort;
        }

        public String getFromUser() {
            return fromUser;
        }

        public void setFromUser(String fromUser) {
            this.fromUser = fromUser;
        }

        public int getMsgExpiration() {
            return msgExpiration;
        }

        public void setMsgExpiration(int msgExpiration) {
            this.msgExpiration = msgExpiration;
        }

        public long getReceiveTimeoutMillis() {
            return receiveTimeoutMillis;
        }

        public void setReceiveTimeoutMillis(long receiveTimeoutMillis) {
            this.receiveTimeoutMillis = receiveTimeoutMillis;
        }

        public String getStackName() {
            return stackName;
        }

        public void setStackName(String stackName) {
            this.stackName = stackName;
        }

        public String getToHost() {
            return toHost;
        }

        public void setToHost(String toHost) {
            this.toHost = toHost;
        }

        public int getToPort() {
            return toPort;
        }

        public void setToPort(int toPort) {
            this.toPort = toPort;
        }

        public String getToUser() {
            return toUser;
        }

        public void setToUser(String toUser) {
            this.toUser = toUser;
        }

        public String getTransport() {
            return transport;
        }

        public void setTransport(String transport) {
            this.transport = transport;
        }

        public Object getAddressFactory() {
            return addressFactory;
        }

        public void setAddressFactory(Object addressFactory) {
            this.addressFactory = addressFactory;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Object getCallIdHeader() {
            return callIdHeader;
        }

        public void setCallIdHeader(Object callIdHeader) {
            this.callIdHeader = callIdHeader;
        }

        public Object getContactHeader() {
            return contactHeader;
        }

        public void setContactHeader(Object contactHeader) {
            this.contactHeader = contactHeader;
        }

        public Object getContentTypeHeader() {
            return contentTypeHeader;
        }

        public void setContentTypeHeader(Object contentTypeHeader) {
            this.contentTypeHeader = contentTypeHeader;
        }

        public Object getEventHeader() {
            return eventHeader;
        }

        public void setEventHeader(Object eventHeader) {
            this.eventHeader = eventHeader;
        }

        public Object getExpiresHeader() {
            return expiresHeader;
        }

        public void setExpiresHeader(Object expiresHeader) {
            this.expiresHeader = expiresHeader;
        }

        public Object getExtensionHeader() {
            return extensionHeader;
        }

        public void setExtensionHeader(Object extensionHeader) {
            this.extensionHeader = extensionHeader;
        }

        public Object getFromHeader() {
            return fromHeader;
        }

        public void setFromHeader(Object fromHeader) {
            this.fromHeader = fromHeader;
        }

        public Object getHeaderFactory() {
            return headerFactory;
        }

        public void setHeaderFactory(Object headerFactory) {
            this.headerFactory = headerFactory;
        }

        public Object getListeningPoint() {
            return listeningPoint;
        }

        public void setListeningPoint(Object listeningPoint) {
            this.listeningPoint = listeningPoint;
        }

        public Object getMaxForwardsHeader() {
            return maxForwardsHeader;
        }

        public void setMaxForwardsHeader(Object maxForwardsHeader) {
            this.maxForwardsHeader = maxForwardsHeader;
        }

        public int getMaxMessageSize() {
            return maxMessageSize;
        }

        public void setMaxMessageSize(int maxMessageSize) {
            this.maxMessageSize = maxMessageSize;
        }

        public Object getMessageFactory() {
            return messageFactory;
        }

        public void setMessageFactory(Object messageFactory) {
            this.messageFactory = messageFactory;
        }

        public Object getSipFactory() {
            return sipFactory;
        }

        public void setSipFactory(Object sipFactory) {
            this.sipFactory = sipFactory;
        }

        public Object getSipStack() {
            return sipStack;
        }

        public void setSipStack(Object sipStack) {
            this.sipStack = sipStack;
        }

        public Object getSipUri() {
            return sipUri;
        }

        public void setSipUri(Object sipUri) {
            this.sipUri = sipUri;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Object getToHeader() {
            return toHeader;
        }

        public void setToHeader(Object toHeader) {
            this.toHeader = toHeader;
        }

        public List<Object> getViaHeaders() {
            return viaHeaders;
        }

        public void setViaHeaders(List<Object> viaHeaders) {
            this.viaHeaders = viaHeaders;
        }

        public String getImplementationDebugLogFile() {
            return implementationDebugLogFile;
        }

        public void setImplementationDebugLogFile(
                String implementationDebugLogFile) {
            this.implementationDebugLogFile = implementationDebugLogFile;
        }

        public String getImplementationServerLogFile() {
            return implementationServerLogFile;
        }

        public void setImplementationServerLogFile(
                String implementationServerLogFile) {
            this.implementationServerLogFile = implementationServerLogFile;
        }

        public String getImplementationTraceLevel() {
            return implementationTraceLevel;
        }

        public void setImplementationTraceLevel(String implementationTraceLevel) {
            this.implementationTraceLevel = implementationTraceLevel;
        }

        public int getMaxForwards() {
            return maxForwards;
        }

        public void setMaxForwards(int maxForwards) {
            this.maxForwards = maxForwards;
        }

        public boolean getUseRouterForAllUris() {
            return useRouterForAllUris;
        }

        public void setUseRouterForAllUris(boolean useRouterForAllUris) {
            this.useRouterForAllUris = useRouterForAllUris;
        }
    }

    public static class SipConsumer extends SipCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * This setting is used to determine whether the kind of header
         * (FromHeader,ToHeader etc) that needs to be created for this endpoint.
         * The option is a boolean type.
         */
        private boolean consumer;
        /**
         * This setting is used to distinguish between a Presence Agent & a
         * consumer. This is due to the fact that the SIP Camel component ships
         * with a basic Presence Agent (for testing purposes only). Consumers
         * have to set this flag to true. The option is a boolean type.
         */
        private boolean presenceAgent;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public boolean getConsumer() {
            return consumer;
        }

        public void setConsumer(boolean consumer) {
            this.consumer = consumer;
        }

        public boolean getPresenceAgent() {
            return presenceAgent;
        }

        public void setPresenceAgent(boolean presenceAgent) {
            this.presenceAgent = presenceAgent;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class SipProducer extends SipCommon {
    }
}