/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The stream: component provides access to the system-in, system-out and
 * system-err streams as well as allowing streaming of file and URL.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class StreamEndpoint {


    public static class StreamCommon extends EndpointConfiguration {
        /**
         * Kind of stream to use such as System.in or System.out. The option is
         * a java.lang.String type.
         */
        private String kind;
        /**
         * You can configure the encoding (is a charset name) to use text-based
         * streams (for example, message body is a String object). If not
         * provided, Camel uses the JVM default Charset. The option is a
         * java.lang.String type.
         */
        private String encoding;
        /**
         * When using the stream:file URI format, this option specifies the
         * filename to stream to/from. The option is a java.lang.String type.
         */
        private String fileName;
        /**
         * When using the stream:url URI format, this option specifies the URL
         * to stream to/from. The input/output stream will be opened using the
         * JDK URLConnection facility. The option is a java.lang.String type.
         */
        private String url;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Sets a specified timeout value, in milliseconds, to be used when
         * opening a communications link to the resource referenced by this
         * URLConnection. If the timeout expires before the connection can be
         * established, a java.net.SocketTimeoutException is raised. A timeout
         * of zero is interpreted as an infinite timeout. The option is a int
         * type.
         */
        private Integer connectTimeout;
        /**
         * Optional http headers to use in request when using HTTP URL. The
         * option is a java.util.Map<java.lang.String,java.lang.Object> type.
         */
        private Map<String, Object> httpHeaders;
        /**
         * Sets the read timeout to a specified timeout, in milliseconds. A
         * non-zero value specifies the timeout when reading from Input stream
         * when a connection is established to a resource. If the timeout
         * expires before there is data available for read, a
         * java.net.SocketTimeoutException is raised. A timeout of zero is
         * interpreted as an infinite timeout. The option is a int type.
         */
        private Integer readTimeout;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;

        public String getKind() {
            return kind;
        }

        public void setKind(String kind) {
            this.kind = kind;
        }

        public String getEncoding() {
            return encoding;
        }

        public void setEncoding(String encoding) {
            this.encoding = encoding;
        }

        public String getFileName() {
            return fileName;
        }

        public void setFileName(String fileName) {
            this.fileName = fileName;
        }

        public String getUrl() {
            return url;
        }

        public void setUrl(String url) {
            this.url = url;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Integer getConnectTimeout() {
            return connectTimeout;
        }

        public void setConnectTimeout(Integer connectTimeout) {
            this.connectTimeout = connectTimeout;
        }

        public Map<String, Object> getHttpHeaders() {
            return httpHeaders;
        }

        public void setHttpHeaders(Map<String, Object> httpHeaders) {
            this.httpHeaders = httpHeaders;
        }

        public Integer getReadTimeout() {
            return readTimeout;
        }

        public void setReadTimeout(Integer readTimeout) {
            this.readTimeout = readTimeout;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class StreamConsumer extends StreamCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private Boolean bridgeErrorHandler;
        /**
         * To use JVM file watcher to listen for file change events to support
         * re-loading files that may be overwritten, somewhat like tail --retry.
         * The option is a boolean type.
         */
        private Boolean fileWatcher;
        /**
         * To group X number of lines in the consumer. For example to group 10
         * lines and therefore only spit out an Exchange with 10 lines, instead
         * of 1 Exchange per line. The option is a int type.
         */
        private Integer groupLines;
        /**
         * Allows to use a custom GroupStrategy to control how to group lines.
         * The option is a org.apache.camel.component.stream.GroupStrategy type.
         */
        private Object groupStrategy;
        /**
         * Initial delay in milliseconds before showing the message prompt. This
         * delay occurs only once. Can be used during system startup to avoid
         * message prompts being written while other logging is done to the
         * system out. The option is a long type.
         */
        private Long initialPromptDelay;
        /**
         * Optional delay in milliseconds before showing the message prompt. The
         * option is a long type.
         */
        private Long promptDelay;
        /**
         * Message prompt to use when reading from stream:in; for example, you
         * could set this to Enter a command:. The option is a java.lang.String
         * type.
         */
        private String promptMessage;
        /**
         * Will retry opening the stream if it's overwritten, somewhat like tail
         * --retry If reading from files then you should also enable the
         * fileWatcher option, to make it work reliable. The option is a boolean
         * type.
         */
        private Boolean retry;
        /**
         * To be used for continuously reading a stream such as the unix tail
         * command. The option is a boolean type.
         */
        private Boolean scanStream;
        /**
         * Delay in milliseconds between read attempts when using scanStream.
         * The option is a long type.
         */
        private Long scanStreamDelay;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public Boolean getFileWatcher() {
            return fileWatcher;
        }

        public void setFileWatcher(Boolean fileWatcher) {
            this.fileWatcher = fileWatcher;
        }

        public Integer getGroupLines() {
            return groupLines;
        }

        public void setGroupLines(Integer groupLines) {
            this.groupLines = groupLines;
        }

        public Object getGroupStrategy() {
            return groupStrategy;
        }

        public void setGroupStrategy(Object groupStrategy) {
            this.groupStrategy = groupStrategy;
        }

        public Long getInitialPromptDelay() {
            return initialPromptDelay;
        }

        public void setInitialPromptDelay(Long initialPromptDelay) {
            this.initialPromptDelay = initialPromptDelay;
        }

        public Long getPromptDelay() {
            return promptDelay;
        }

        public void setPromptDelay(Long promptDelay) {
            this.promptDelay = promptDelay;
        }

        public String getPromptMessage() {
            return promptMessage;
        }

        public void setPromptMessage(String promptMessage) {
            this.promptMessage = promptMessage;
        }

        public Boolean getRetry() {
            return retry;
        }

        public void setRetry(Boolean retry) {
            this.retry = retry;
        }

        public Boolean getScanStream() {
            return scanStream;
        }

        public void setScanStream(Boolean scanStream) {
            this.scanStream = scanStream;
        }

        public Long getScanStreamDelay() {
            return scanStreamDelay;
        }

        public void setScanStreamDelay(Long scanStreamDelay) {
            this.scanStreamDelay = scanStreamDelay;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class StreamProducer extends StreamCommon {
        /**
         * Number of messages to process before closing stream on Producer side.
         * Never close stream by default (only when Producer is stopped). If
         * more messages are sent, the stream is reopened for another
         * autoCloseCount batch. The option is a int type.
         */
        private Integer autoCloseCount;
        /**
         * This option is used in combination with Splitter and streaming to the
         * same file. The idea is to keep the stream open and only close when
         * the Splitter is done, to improve performance. Mind this requires that
         * you only stream to the same file, and not 2 or more files. The option
         * is a boolean type.
         */
        private Boolean closeOnDone;
        /**
         * Initial delay in milliseconds before producing the stream. The option
         * is a long type.
         */
        private Long delay;

        public Integer getAutoCloseCount() {
            return autoCloseCount;
        }

        public void setAutoCloseCount(Integer autoCloseCount) {
            this.autoCloseCount = autoCloseCount;
        }

        public Boolean getCloseOnDone() {
            return closeOnDone;
        }

        public void setCloseOnDone(Boolean closeOnDone) {
            this.closeOnDone = closeOnDone;
        }

        public Long getDelay() {
            return delay;
        }

        public void setDelay(Long delay) {
            this.delay = delay;
        }
    }
}