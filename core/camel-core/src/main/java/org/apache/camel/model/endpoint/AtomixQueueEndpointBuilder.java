/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.List;
import java.util.Map;
import java.util.Properties;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The atomix-queue component is used to access Atomix's distributed queue.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface AtomixQueueEndpointBuilder {


    /**
     * Base class for the Atomix Queue component builders.
     */
    public static class AtomixQueueCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        AtomixQueueCommonBuilder(String path) {
            super("atomix-queue", path);
        }
        /**
         * The distributed resource name.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T resourceName(String resourceName) {
            this.properties.put("resourceName", resourceName);
            return (T) this;
        }
        /**
         * The Atomix instance to use.
         * The option is a <code>io.atomix.AtomixClient</code> type.
         * @group common
         */
        public T atomix(Object atomix) {
            this.properties.put("atomix", atomix);
            return (T) this;
        }
        /**
         * The Atomix instance to use.
         * The option will be converted to a <code>io.atomix.AtomixClient</code>
         * type.
         * @group common
         */
        public T atomix(String atomix) {
            this.properties.put("atomix", atomix);
            return (T) this;
        }
        /**
         * The Atomix configuration uri.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T configurationUri(String configurationUri) {
            this.properties.put("configurationUri", configurationUri);
            return (T) this;
        }
        /**
         * The default action.
         * The option is a
         * <code>org.apache.camel.component.atomix.client.queue.AtomixQueue$Action</code> type.
         * @group common
         */
        public T defaultAction(Action defaultAction) {
            this.properties.put("defaultAction", defaultAction);
            return (T) this;
        }
        /**
         * The default action.
         * The option will be converted to a
         * <code>org.apache.camel.component.atomix.client.queue.AtomixQueue$Action</code> type.
         * @group common
         */
        public T defaultAction(String defaultAction) {
            this.properties.put("defaultAction", defaultAction);
            return (T) this;
        }
        /**
         * The address of the nodes composing the cluster.
         * The option is a
         * <code>java.util.List&lt;io.atomix.catalyst.transport.Address&gt;</code> type.
         * @group common
         */
        public T nodes(List<Object> nodes) {
            this.properties.put("nodes", nodes);
            return (T) this;
        }
        /**
         * The address of the nodes composing the cluster.
         * The option will be converted to a
         * <code>java.util.List&lt;io.atomix.catalyst.transport.Address&gt;</code> type.
         * @group common
         */
        public T nodes(String nodes) {
            this.properties.put("nodes", nodes);
            return (T) this;
        }
        /**
         * The header that wil carry the result.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T resultHeader(String resultHeader) {
            this.properties.put("resultHeader", resultHeader);
            return (T) this;
        }
        /**
         * Sets the Atomix transport.
         * The option is a
         * <code>java.lang.Class&lt;io.atomix.catalyst.transport.Transport&gt;</code> type.
         * @group common
         */
        public T transport(Class<Object> transport) {
            this.properties.put("transport", transport);
            return (T) this;
        }
        /**
         * Sets the Atomix transport.
         * The option will be converted to a
         * <code>java.lang.Class&lt;io.atomix.catalyst.transport.Transport&gt;</code> type.
         * @group common
         */
        public T transport(String transport) {
            this.properties.put("transport", transport);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * The cluster wide default resource configuration.
         * The option is a <code>java.util.Properties</code> type.
         * @group advanced
         */
        public T defaultResourceConfig(Properties defaultResourceConfig) {
            this.properties.put("defaultResourceConfig", defaultResourceConfig);
            return (T) this;
        }
        /**
         * The cluster wide default resource configuration.
         * The option will be converted to a <code>java.util.Properties</code>
         * type.
         * @group advanced
         */
        public T defaultResourceConfig(String defaultResourceConfig) {
            this.properties.put("defaultResourceConfig", defaultResourceConfig);
            return (T) this;
        }
        /**
         * The local default resource options.
         * The option is a <code>java.util.Properties</code> type.
         * @group advanced
         */
        public T defaultResourceOptions(Properties defaultResourceOptions) {
            this.properties.put("defaultResourceOptions", defaultResourceOptions);
            return (T) this;
        }
        /**
         * The local default resource options.
         * The option will be converted to a <code>java.util.Properties</code>
         * type.
         * @group advanced
         */
        public T defaultResourceOptions(String defaultResourceOptions) {
            this.properties.put("defaultResourceOptions", defaultResourceOptions);
            return (T) this;
        }
        /**
         * Sets if the local member should join groups as PersistentMember or
         * not. If set to ephemeral the local member will receive an auto
         * generated ID thus the local one is ignored.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T ephemeral(boolean ephemeral) {
            this.properties.put("ephemeral", ephemeral);
            return (T) this;
        }
        /**
         * Sets if the local member should join groups as PersistentMember or
         * not. If set to ephemeral the local member will receive an auto
         * generated ID thus the local one is ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T ephemeral(String ephemeral) {
            this.properties.put("ephemeral", ephemeral);
            return (T) this;
        }
        /**
         * The read consistency level.
         * The option is a <code>io.atomix.resource.ReadConsistency</code> type.
         * @group advanced
         */
        public T readConsistency(ReadConsistency readConsistency) {
            this.properties.put("readConsistency", readConsistency);
            return (T) this;
        }
        /**
         * The read consistency level.
         * The option will be converted to a
         * <code>io.atomix.resource.ReadConsistency</code> type.
         * @group advanced
         */
        public T readConsistency(String readConsistency) {
            this.properties.put("readConsistency", readConsistency);
            return (T) this;
        }
        /**
         * Cluster wide resources configuration.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.util.Properties&gt;</code> type.
         * @group advanced
         */
        public T resourceConfigs(Map<String, Properties> resourceConfigs) {
            this.properties.put("resourceConfigs", resourceConfigs);
            return (T) this;
        }
        /**
         * Cluster wide resources configuration.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String,
         * java.util.Properties&gt;</code> type.
         * @group advanced
         */
        public T resourceConfigs(String resourceConfigs) {
            this.properties.put("resourceConfigs", resourceConfigs);
            return (T) this;
        }
        /**
         * Local resources configurations.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.util.Properties&gt;</code> type.
         * @group advanced
         */
        public T resourceOptions(Map<String, Properties> resourceOptions) {
            this.properties.put("resourceOptions", resourceOptions);
            return (T) this;
        }
        /**
         * Local resources configurations.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String,
         * java.util.Properties&gt;</code> type.
         * @group advanced
         */
        public T resourceOptions(String resourceOptions) {
            this.properties.put("resourceOptions", resourceOptions);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint consumers for the Atomix Queue component.
     */
    public static class AtomixQueueConsumerBuilder
            extends
                AtomixQueueCommonBuilder<AtomixQueueConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public AtomixQueueConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public AtomixQueueConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (AtomixQueueConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public AtomixQueueConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (AtomixQueueConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        public AtomixQueueConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (AtomixQueueConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        public AtomixQueueConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (AtomixQueueConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        public AtomixQueueConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (AtomixQueueConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        public AtomixQueueConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (AtomixQueueConsumerBuilder) this;
        }
    }

    /**
     * Builder for endpoint producers for the Atomix Queue component.
     */
    public static class AtomixQueueProducerBuilder
            extends
                AtomixQueueCommonBuilder<AtomixQueueProducerBuilder>
            implements
                EndpointProducerBuilder {
        public AtomixQueueProducerBuilder(String path) {
            super(path);
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.atomix.client.queue.AtomixQueue$Action</code> enum.
     */
    public static enum Action {
        ADD, OFFER, PEEK, POLL, CLEAR, CONTAINS, IS_EMPTY, REMOVE, SIZE;
    }

    /**
     * Proxy enum for <code>io.atomix.resource.ReadConsistency</code> enum.
     */
    public static enum ReadConsistency {
        ATOMIC, ATOMIC_LEASE, SEQUENTIAL, LOCAL;
    }
    /**
     * The atomix-queue component is used to access Atomix's distributed queue.
     * Creates a builder to build a consumer endpoint for the Atomix Queue
     * component.
     */
    public default AtomixQueueConsumerBuilder fromAtomixQueue(String path) {
        return new AtomixQueueConsumerBuilder(path);
    }
    /**
     * The atomix-queue component is used to access Atomix's distributed queue.
     * Creates a builder to build a producer endpoint for the Atomix Queue
     * component.
     */
    public default AtomixQueueProducerBuilder toAtomixQueue(String path) {
        return new AtomixQueueProducerBuilder(path);
    }
}