/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The salesforce component is used for integrating Camel with the massive
 * Salesforce API.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class SalesforceEndpoint {


    public static class SalesforceCommon extends EndpointConfiguration {
        /**
         * APEX method name. The option is a java.lang.String type.
         */
        private String apexMethod;
        /**
         * Query params for APEX method. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        private Map<String, Object> apexQueryParams;
        /**
         * APEX method URL. The option is a java.lang.String type.
         */
        private String apexUrl;
        /**
         * Salesforce API version, defaults to
         * SalesforceEndpointConfig.DEFAULT_VERSION. The option is a
         * java.lang.String type.
         */
        private String apiVersion;
        /**
         * Backoff interval increment for Streaming connection restart attempts
         * for failures beyond CometD auto-reconnect. The option is a long type.
         */
        private Long backoffIncrement;
        /**
         * Bulk API Batch ID. The option is a java.lang.String type.
         */
        private String batchId;
        /**
         * Bulk API content type, one of XML, CSV, ZIP_XML, ZIP_CSV. The option
         * is a org.apache.camel.component.salesforce.api.dto.bulk.ContentType
         * type.
         */
        private ContentType contentType;
        /**
         * Default replayId setting if no value is found in initialReplayIdMap.
         * The option is a java.lang.Long type.
         */
        private Long defaultReplayId;
        /**
         * Payload format to use for Salesforce API calls, either JSON or XML,
         * defaults to JSON. The option is a
         * org.apache.camel.component.salesforce.internal.PayloadFormat type.
         */
        private PayloadFormat format;
        /**
         * Custom Jetty Http Client to use to connect to Salesforce. The option
         * is a org.apache.camel.component.salesforce.SalesforceHttpClient type.
         */
        private Object httpClient;
        /**
         * Include details in Salesforce1 Analytics report, defaults to false.
         * The option is a java.lang.Boolean type.
         */
        private Boolean includeDetails;
        /**
         * Replay IDs to start from per channel name. The option is a
         * java.util.Map<java.lang.String,java.lang.Long> type.
         */
        private Map<String, Long> initialReplayIdMap;
        /**
         * Salesforce1 Analytics report execution instance ID. The option is a
         * java.lang.String type.
         */
        private String instanceId;
        /**
         * Bulk API Job ID. The option is a java.lang.String type.
         */
        private String jobId;
        /**
         * Limit on number of returned records. Applicable to some of the API,
         * check the Salesforce documentation. The option is a java.lang.Integer
         * type.
         */
        private Integer limit;
        /**
         * Maximum backoff interval for Streaming connection restart attempts
         * for failures beyond CometD auto-reconnect. The option is a long type.
         */
        private Long maxBackoff;
        /**
         * Sets the behaviour of 404 not found status received from Salesforce
         * API. Should the body be set to NULL NotFoundBehaviour#NULL or should
         * a exception be signaled on the exchange NotFoundBehaviour#EXCEPTION -
         * the default. The option is a
         * org.apache.camel.component.salesforce.NotFoundBehaviour type.
         */
        private NotFoundBehaviour notFoundBehaviour;
        /**
         * Notify for fields, options are ALL, REFERENCED, SELECT, WHERE. The
         * option is a
         * org.apache.camel.component.salesforce.internal.dto.NotifyForFieldsEnum type.
         */
        private NotifyForFieldsEnum notifyForFields;
        /**
         * Notify for create operation, defaults to false (API version = 29.0).
         * The option is a java.lang.Boolean type.
         */
        private Boolean notifyForOperationCreate;
        /**
         * Notify for delete operation, defaults to false (API version = 29.0).
         * The option is a java.lang.Boolean type.
         */
        private Boolean notifyForOperationDelete;
        /**
         * Notify for operations, options are ALL, CREATE, EXTENDED, UPDATE (API
         * version 29.0). The option is a
         * org.apache.camel.component.salesforce.internal.dto.NotifyForOperationsEnum type.
         */
        private NotifyForOperationsEnum notifyForOperations;
        /**
         * Notify for un-delete operation, defaults to false (API version =
         * 29.0). The option is a java.lang.Boolean type.
         */
        private Boolean notifyForOperationUndelete;
        /**
         * Notify for update operation, defaults to false (API version = 29.0).
         * The option is a java.lang.Boolean type.
         */
        private Boolean notifyForOperationUpdate;
        /**
         * Custom Jackson ObjectMapper to use when serializing/deserializing
         * Salesforce objects. The option is a
         * com.fasterxml.jackson.databind.ObjectMapper type.
         */
        private Object objectMapper;
        /**
         * Use raw payload String for request and response (either JSON or XML
         * depending on format), instead of DTOs, false by default. The option
         * is a boolean type.
         */
        private Boolean rawPayload;
        /**
         * Salesforce1 Analytics report Id. The option is a java.lang.String
         * type.
         */
        private String reportId;
        /**
         * Salesforce1 Analytics report metadata for filtering. The option is a
         * org.apache.camel.component.salesforce.api.dto.analytics.reports.ReportMetadata type.
         */
        private Object reportMetadata;
        /**
         * Bulk API Result ID. The option is a java.lang.String type.
         */
        private String resultId;
        /**
         * Should the NULL values of given DTO be serialized with empty (NULL)
         * values. This affects only JSON data format. The option is a boolean
         * type.
         */
        private Boolean serializeNulls;
        /**
         * SObject blob field name. The option is a java.lang.String type.
         */
        private String sObjectBlobFieldName;
        /**
         * Fully qualified SObject class name, usually generated using
         * camel-salesforce-maven-plugin. The option is a java.lang.String type.
         */
        private String sObjectClass;
        /**
         * SObject fields to retrieve. The option is a java.lang.String type.
         */
        private String sObjectFields;
        /**
         * SObject ID if required by API. The option is a java.lang.String type.
         */
        private String sObjectId;
        /**
         * SObject external ID field name. The option is a java.lang.String
         * type.
         */
        private String sObjectIdName;
        /**
         * SObject external ID field value. The option is a java.lang.String
         * type.
         */
        private String sObjectIdValue;
        /**
         * SObject name if required or supported by API. The option is a
         * java.lang.String type.
         */
        private String sObjectName;
        /**
         * Salesforce SOQL query string. The option is a java.lang.String type.
         */
        private String sObjectQuery;
        /**
         * Salesforce SOSL search string. The option is a java.lang.String type.
         */
        private String sObjectSearch;
        /**
         * Whether to update an existing Push Topic when using the Streaming
         * API, defaults to false. The option is a boolean type.
         */
        private Boolean updateTopic;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;

        public String getApexMethod() {
            return apexMethod;
        }

        public void setApexMethod(String apexMethod) {
            this.apexMethod = apexMethod;
        }

        public Map<String, Object> getApexQueryParams() {
            return apexQueryParams;
        }

        public void setApexQueryParams(Map<String, Object> apexQueryParams) {
            this.apexQueryParams = apexQueryParams;
        }

        public String getApexUrl() {
            return apexUrl;
        }

        public void setApexUrl(String apexUrl) {
            this.apexUrl = apexUrl;
        }

        public String getApiVersion() {
            return apiVersion;
        }

        public void setApiVersion(String apiVersion) {
            this.apiVersion = apiVersion;
        }

        public Long getBackoffIncrement() {
            return backoffIncrement;
        }

        public void setBackoffIncrement(Long backoffIncrement) {
            this.backoffIncrement = backoffIncrement;
        }

        public String getBatchId() {
            return batchId;
        }

        public void setBatchId(String batchId) {
            this.batchId = batchId;
        }

        public ContentType getContentType() {
            return contentType;
        }

        public void setContentType(ContentType contentType) {
            this.contentType = contentType;
        }

        public Long getDefaultReplayId() {
            return defaultReplayId;
        }

        public void setDefaultReplayId(Long defaultReplayId) {
            this.defaultReplayId = defaultReplayId;
        }

        public PayloadFormat getFormat() {
            return format;
        }

        public void setFormat(PayloadFormat format) {
            this.format = format;
        }

        public Object getHttpClient() {
            return httpClient;
        }

        public void setHttpClient(Object httpClient) {
            this.httpClient = httpClient;
        }

        public Boolean getIncludeDetails() {
            return includeDetails;
        }

        public void setIncludeDetails(Boolean includeDetails) {
            this.includeDetails = includeDetails;
        }

        public Map<String, Long> getInitialReplayIdMap() {
            return initialReplayIdMap;
        }

        public void setInitialReplayIdMap(Map<String, Long> initialReplayIdMap) {
            this.initialReplayIdMap = initialReplayIdMap;
        }

        public String getInstanceId() {
            return instanceId;
        }

        public void setInstanceId(String instanceId) {
            this.instanceId = instanceId;
        }

        public String getJobId() {
            return jobId;
        }

        public void setJobId(String jobId) {
            this.jobId = jobId;
        }

        public Integer getLimit() {
            return limit;
        }

        public void setLimit(Integer limit) {
            this.limit = limit;
        }

        public Long getMaxBackoff() {
            return maxBackoff;
        }

        public void setMaxBackoff(Long maxBackoff) {
            this.maxBackoff = maxBackoff;
        }

        public NotFoundBehaviour getNotFoundBehaviour() {
            return notFoundBehaviour;
        }

        public void setNotFoundBehaviour(NotFoundBehaviour notFoundBehaviour) {
            this.notFoundBehaviour = notFoundBehaviour;
        }

        public NotifyForFieldsEnum getNotifyForFields() {
            return notifyForFields;
        }

        public void setNotifyForFields(NotifyForFieldsEnum notifyForFields) {
            this.notifyForFields = notifyForFields;
        }

        public Boolean getNotifyForOperationCreate() {
            return notifyForOperationCreate;
        }

        public void setNotifyForOperationCreate(Boolean notifyForOperationCreate) {
            this.notifyForOperationCreate = notifyForOperationCreate;
        }

        public Boolean getNotifyForOperationDelete() {
            return notifyForOperationDelete;
        }

        public void setNotifyForOperationDelete(Boolean notifyForOperationDelete) {
            this.notifyForOperationDelete = notifyForOperationDelete;
        }

        public NotifyForOperationsEnum getNotifyForOperations() {
            return notifyForOperations;
        }

        public void setNotifyForOperations(
                NotifyForOperationsEnum notifyForOperations) {
            this.notifyForOperations = notifyForOperations;
        }

        public Boolean getNotifyForOperationUndelete() {
            return notifyForOperationUndelete;
        }

        public void setNotifyForOperationUndelete(
                Boolean notifyForOperationUndelete) {
            this.notifyForOperationUndelete = notifyForOperationUndelete;
        }

        public Boolean getNotifyForOperationUpdate() {
            return notifyForOperationUpdate;
        }

        public void setNotifyForOperationUpdate(Boolean notifyForOperationUpdate) {
            this.notifyForOperationUpdate = notifyForOperationUpdate;
        }

        public Object getObjectMapper() {
            return objectMapper;
        }

        public void setObjectMapper(Object objectMapper) {
            this.objectMapper = objectMapper;
        }

        public Boolean getRawPayload() {
            return rawPayload;
        }

        public void setRawPayload(Boolean rawPayload) {
            this.rawPayload = rawPayload;
        }

        public String getReportId() {
            return reportId;
        }

        public void setReportId(String reportId) {
            this.reportId = reportId;
        }

        public Object getReportMetadata() {
            return reportMetadata;
        }

        public void setReportMetadata(Object reportMetadata) {
            this.reportMetadata = reportMetadata;
        }

        public String getResultId() {
            return resultId;
        }

        public void setResultId(String resultId) {
            this.resultId = resultId;
        }

        public Boolean getSerializeNulls() {
            return serializeNulls;
        }

        public void setSerializeNulls(Boolean serializeNulls) {
            this.serializeNulls = serializeNulls;
        }

        public String getSObjectBlobFieldName() {
            return sObjectBlobFieldName;
        }

        public void setSObjectBlobFieldName(String sObjectBlobFieldName) {
            this.sObjectBlobFieldName = sObjectBlobFieldName;
        }

        public String getSObjectClass() {
            return sObjectClass;
        }

        public void setSObjectClass(String sObjectClass) {
            this.sObjectClass = sObjectClass;
        }

        public String getSObjectFields() {
            return sObjectFields;
        }

        public void setSObjectFields(String sObjectFields) {
            this.sObjectFields = sObjectFields;
        }

        public String getSObjectId() {
            return sObjectId;
        }

        public void setSObjectId(String sObjectId) {
            this.sObjectId = sObjectId;
        }

        public String getSObjectIdName() {
            return sObjectIdName;
        }

        public void setSObjectIdName(String sObjectIdName) {
            this.sObjectIdName = sObjectIdName;
        }

        public String getSObjectIdValue() {
            return sObjectIdValue;
        }

        public void setSObjectIdValue(String sObjectIdValue) {
            this.sObjectIdValue = sObjectIdValue;
        }

        public String getSObjectName() {
            return sObjectName;
        }

        public void setSObjectName(String sObjectName) {
            this.sObjectName = sObjectName;
        }

        public String getSObjectQuery() {
            return sObjectQuery;
        }

        public void setSObjectQuery(String sObjectQuery) {
            this.sObjectQuery = sObjectQuery;
        }

        public String getSObjectSearch() {
            return sObjectSearch;
        }

        public void setSObjectSearch(String sObjectSearch) {
            this.sObjectSearch = sObjectSearch;
        }

        public Boolean getUpdateTopic() {
            return updateTopic;
        }

        public void setUpdateTopic(Boolean updateTopic) {
            this.updateTopic = updateTopic;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class SalesforceConsumer extends SalesforceCommon {
        /**
         * The name of the topic/channel to use. The option is a
         * java.lang.String type.
         */
        private String topicName;
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private Boolean bridgeErrorHandler;
        /**
         * The replayId value to use when subscribing. The option is a
         * java.lang.Long type.
         */
        private Long replayId;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public String getTopicName() {
            return topicName;
        }

        public void setTopicName(String topicName) {
            this.topicName = topicName;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public Long getReplayId() {
            return replayId;
        }

        public void setReplayId(Long replayId) {
            this.replayId = replayId;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class SalesforceProducer extends SalesforceCommon {
        /**
         * The operation to use. The option is a
         * org.apache.camel.component.salesforce.internal.OperationName type.
         */
        private OperationName operationName;

        public OperationName getOperationName() {
            return operationName;
        }

        public void setOperationName(OperationName operationName) {
            this.operationName = operationName;
        }
    }

    public static enum OperationName {
        getVersions, getResources, getGlobalObjects, getBasicInfo, getDescription, getSObject, createSObject, updateSObject, deleteSObject, getSObjectWithId, upsertSObject, deleteSObjectWithId, getBlobField, query, queryMore, queryAll, search, apexCall, recent, createJob, getJob, closeJob, abortJob, createBatch, getBatch, getAllBatches, getRequest, getResults, createBatchQuery, getQueryResultIds, getQueryResult, getRecentReports, getReportDescription, executeSyncReport, executeAsyncReport, getReportInstances, getReportResults, limits, approval, approvals, composite_tree, composite_batch, composite;
    }

    public static enum ContentType {
        XML, CSV, JSON, ZIP_XML, ZIP_CSV, ZIP_JSON;
    }

    public static enum PayloadFormat {
        JSON, XML;
    }

    public static enum NotFoundBehaviour {
        EXCEPTION, NULL;
    }

    public static enum NotifyForFieldsEnum {
        ALL, REFERENCED, SELECT, WHERE;
    }

    public static enum NotifyForOperationsEnum {
        ALL, CREATE, EXTENDED, UPDATE;
    }
}