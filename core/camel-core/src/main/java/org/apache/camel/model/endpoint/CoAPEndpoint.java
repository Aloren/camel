/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URI;
import java.security.PrivateKey;
import java.security.PublicKey;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The coap component is used for sending and receiving messages from COAP
 * capable devices.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class CoAPEndpoint {


    public static class CoAPCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        CoAPCommon(String path) {
            super("coap", path);
        }
        /**
         * The URI for the CoAP endpoint. The option is a java.net.URI type.
         */
        public T uri(URI uri) {
            this.properties.put("uri", uri);
            return (T) this;
        }
        /**
         * Sets the alias used to query the KeyStore for the private key and
         * certificate. This parameter is used when we are enabling TLS with
         * certificates on the service side, and similarly on the client side
         * when TLS is used with certificates and client authentication. If the
         * parameter is not specified then the default behavior is to use the
         * first alias in the keystore that contains a key entry. This
         * configuration parameter does not apply to configuring TLS via a Raw
         * Public Key or a Pre-Shared Key. The option is a java.lang.String
         * type.
         */
        public T alias(String alias) {
            this.properties.put("alias", alias);
            return (T) this;
        }
        /**
         * Sets the cipherSuites String. This is a comma separated String of
         * ciphersuites to configure. If it is not specified, then it falls back
         * to getting the ciphersuites from the sslContextParameters object. The
         * option is a java.lang.String type.
         */
        public T cipherSuites(String cipherSuites) {
            this.properties.put("cipherSuites", cipherSuites);
            return (T) this;
        }
        /**
         * Sets the configuration options for server-side client-authentication
         * requirements. The value must be one of NONE, WANT, REQUIRE. If this
         * value is not specified, then it falls back to checking the
         * sslContextParameters.getServerParameters().getClientAuthentication()
         * value. The option is a java.lang.String type.
         */
        public T clientAuthentication(String clientAuthentication) {
            this.properties.put("clientAuthentication", clientAuthentication);
            return (T) this;
        }
        /**
         * Set the configured private key for use with Raw Public Key. The
         * option is a java.security.PrivateKey type.
         */
        public T privateKey(PrivateKey privateKey) {
            this.properties.put("privateKey", privateKey);
            return (T) this;
        }
        /**
         * Set the PskStore to use for pre-shared key. The option is a
         * org.eclipse.californium.scandium.dtls.pskstore.PskStore type.
         */
        public T pskStore(Object pskStore) {
            this.properties.put("pskStore", pskStore);
            return (T) this;
        }
        /**
         * Set the configured public key for use with Raw Public Key. The option
         * is a java.security.PublicKey type.
         */
        public T publicKey(PublicKey publicKey) {
            this.properties.put("publicKey", publicKey);
            return (T) this;
        }
        /**
         * Set the SSLContextParameters object for setting up TLS. This is
         * required for coapstcp, and for coaps when we are using certificates
         * for TLS (as opposed to RPK or PKS). The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        public T sslContextParameters(Object sslContextParameters) {
            this.properties.put("sslContextParameters", sslContextParameters);
            return (T) this;
        }
        /**
         * Set the TrustedRpkStore to use to determine trust in raw public keys.
         * The option is a
         * org.eclipse.californium.scandium.dtls.rpkstore.TrustedRpkStore type.
         */
        public T trustedRpkStore(Object trustedRpkStore) {
            this.properties.put("trustedRpkStore", trustedRpkStore);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class CoAPConsumer
            extends
                CoAPCommon<CoAPConsumer>
            implements
                EndpointDefinition.Consumer {
        public CoAPConsumer(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public CoAPConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (CoAPConsumer) this;
        }
        /**
         * Comma separated list of methods that the CoAP consumer will bind to.
         * The default is to bind to all methods (DELETE, GET, POST, PUT). The
         * option is a java.lang.String type.
         */
        public CoAPConsumer coapMethodRestrict(String coapMethodRestrict) {
            this.properties.put("coapMethodRestrict", coapMethodRestrict);
            return (CoAPConsumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public CoAPConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (CoAPConsumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public CoAPConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (CoAPConsumer) this;
        }
    }

    public static class CoAPProducer
            extends
                CoAPCommon<CoAPProducer>
            implements
                EndpointDefinition.Producer {
        public CoAPProducer(String path) {
            super(path);
        }
    }
}