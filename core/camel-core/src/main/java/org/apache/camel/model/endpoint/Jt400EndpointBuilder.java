/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * The jt400 component allows you to exchanges messages with an AS/400 system
 * using data queues or program call.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface Jt400EndpointBuilder {


    /**
     * Base class for the JT400 component builders.
     */
    public static class Jt400CommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        Jt400CommonBuilder(String path) {
            super("jt400", path);
        }
        /**
         * Returns the ID of the AS/400 user. The option is a
         * <code>java.lang.String</code> type.
         */
        public T userID(String userID) {
            this.properties.put("userID", userID);
            return (T) this;
        }
        /**
         * Returns the password of the AS/400 user. The option is a
         * <code>java.lang.String</code> type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * Returns the name of the AS/400 system. The option is a
         * <code>java.lang.String</code> type.
         */
        public T systemName(String systemName) {
            this.properties.put("systemName", systemName);
            return (T) this;
        }
        /**
         * Returns the fully qualified integrated file system path name of the
         * target object of this endpoint. The option is a
         * <code>java.lang.String</code> type.
         */
        public T objectPath(String objectPath) {
            this.properties.put("objectPath", objectPath);
            return (T) this;
        }
        /**
         * Whether to work with data queues or remote program call. The option
         * is a <code>org.apache.camel.component.jt400.Jt400Type</code> type.
         */
        public T type(Jt400Type type) {
            this.properties.put("type", type);
            return (T) this;
        }
        /**
         * Whether to work with data queues or remote program call. The option
         * will be converted to a
         * <code>org.apache.camel.component.jt400.Jt400Type</code> type.
         */
        public T type(String type) {
            this.properties.put("type", type);
            return (T) this;
        }
        /**
         * Sets the CCSID to use for the connection with the AS/400 system. The
         * option is a <code>int</code> type.
         */
        public T ccsid(int ccsid) {
            this.properties.put("ccsid", ccsid);
            return (T) this;
        }
        /**
         * Sets the CCSID to use for the connection with the AS/400 system. The
         * option will be converted to a <code>int</code> type.
         */
        public T ccsid(String ccsid) {
            this.properties.put("ccsid", ccsid);
            return (T) this;
        }
        /**
         * Sets the data format for sending messages. The option is a
         * <code>org.apache.camel.component.jt400.Jt400Configuration$Format</code> type.
         */
        public T format(Format format) {
            this.properties.put("format", format);
            return (T) this;
        }
        /**
         * Sets the data format for sending messages. The option will be
         * converted to a
         * <code>org.apache.camel.component.jt400.Jt400Configuration$Format</code> type.
         */
        public T format(String format) {
            this.properties.put("format", format);
            return (T) this;
        }
        /**
         * Sets whether AS/400 prompting is enabled in the environment running
         * Camel. The option is a <code>boolean</code> type.
         */
        public T guiAvailable(boolean guiAvailable) {
            this.properties.put("guiAvailable", guiAvailable);
            return (T) this;
        }
        /**
         * Sets whether AS/400 prompting is enabled in the environment running
         * Camel. The option will be converted to a <code>boolean</code> type.
         */
        public T guiAvailable(String guiAvailable) {
            this.properties.put("guiAvailable", guiAvailable);
            return (T) this;
        }
        /**
         * Whether to use keyed or non-keyed data queues. The option is a
         * <code>boolean</code> type.
         */
        public T keyed(boolean keyed) {
            this.properties.put("keyed", keyed);
            return (T) this;
        }
        /**
         * Whether to use keyed or non-keyed data queues. The option will be
         * converted to a <code>boolean</code> type.
         */
        public T keyed(String keyed) {
            this.properties.put("keyed", keyed);
            return (T) this;
        }
        /**
         * Specifies which fields (program parameters) are output parameters.
         * The option is a <code>java.lang.Integer[]</code> type.
         */
        public T outputFieldsIdxArray(Integer[] outputFieldsIdxArray) {
            this.properties.put("outputFieldsIdxArray", outputFieldsIdxArray);
            return (T) this;
        }
        /**
         * Specifies which fields (program parameters) are output parameters.
         * The option will be converted to a <code>java.lang.Integer[]</code>
         * type.
         */
        public T outputFieldsIdxArray(String outputFieldsIdxArray) {
            this.properties.put("outputFieldsIdxArray", outputFieldsIdxArray);
            return (T) this;
        }
        /**
         * Specifies the fields (program parameters) length as in the AS/400
         * program definition. The option is a <code>java.lang.Integer[]</code>
         * type.
         */
        public T outputFieldsLengthArray(Integer[] outputFieldsLengthArray) {
            this.properties.put("outputFieldsLengthArray", outputFieldsLengthArray);
            return (T) this;
        }
        /**
         * Specifies the fields (program parameters) length as in the AS/400
         * program definition. The option will be converted to a
         * <code>java.lang.Integer[]</code> type.
         */
        public T outputFieldsLengthArray(String outputFieldsLengthArray) {
            this.properties.put("outputFieldsLengthArray", outputFieldsLengthArray);
            return (T) this;
        }
        /**
         * Search key for keyed data queues. The option is a
         * <code>java.lang.String</code> type.
         */
        public T searchKey(String searchKey) {
            this.properties.put("searchKey", searchKey);
            return (T) this;
        }
        /**
         * Search type such as EQ for equal etc. The option is a
         * <code>org.apache.camel.component.jt400.Jt400Configuration$SearchType</code> type.
         */
        public T searchType(SearchType searchType) {
            this.properties.put("searchType", searchType);
            return (T) this;
        }
        /**
         * Search type such as EQ for equal etc. The option will be converted to
         * a
         * <code>org.apache.camel.component.jt400.Jt400Configuration$SearchType</code> type.
         */
        public T searchType(String searchType) {
            this.properties.put("searchType", searchType);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Procedure name from a service program to call. The option is a
         * <code>java.lang.String</code> type.
         */
        public T procedureName(String procedureName) {
            this.properties.put("procedureName", procedureName);
            return (T) this;
        }
        /**
         * Whether connections to AS/400 are secured with SSL. The option is a
         * <code>boolean</code> type.
         */
        public T secured(boolean secured) {
            this.properties.put("secured", secured);
            return (T) this;
        }
        /**
         * Whether connections to AS/400 are secured with SSL. The option will
         * be converted to a <code>boolean</code> type.
         */
        public T secured(String secured) {
            this.properties.put("secured", secured);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint consumers for the JT400 component.
     */
    public static class Jt400ConsumerBuilder
            extends
                Jt400CommonBuilder<Jt400ConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public Jt400ConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public Jt400ConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public Jt400ConsumerBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Timeout in millis the consumer will wait while trying to read a new
         * message of the data queue. The option is a <code>int</code> type.
         */
        public Jt400ConsumerBuilder readTimeout(int readTimeout) {
            this.properties.put("readTimeout", readTimeout);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Timeout in millis the consumer will wait while trying to read a new
         * message of the data queue. The option will be converted to a
         * <code>int</code> type.
         */
        public Jt400ConsumerBuilder readTimeout(String readTimeout) {
            this.properties.put("readTimeout", readTimeout);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option is a
         * <code>boolean</code> type.
         */
        public Jt400ConsumerBuilder sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option will be
         * converted to a <code>boolean</code> type.
         */
        public Jt400ConsumerBuilder sendEmptyMessageWhenIdle(
                String sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public Jt400ConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public Jt400ConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public Jt400ConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public Jt400ConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option is a
         * <code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.
         */
        public Jt400ConsumerBuilder pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option will be converted
         * to a <code>org.apache.camel.spi.PollingConsumerPollStrategy</code>
         * type.
         */
        public Jt400ConsumerBuilder pollStrategy(String pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * is a <code>int</code> type.
         */
        public Jt400ConsumerBuilder backoffErrorThreshold(
                int backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * will be converted to a <code>int</code> type.
         */
        public Jt400ConsumerBuilder backoffErrorThreshold(
                String backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option is a <code>int</code>
         * type.
         */
        public Jt400ConsumerBuilder backoffIdleThreshold(
                int backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option will be converted to a
         * <code>int</code> type.
         */
        public Jt400ConsumerBuilder backoffIdleThreshold(
                String backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option is a <code>int</code> type.
         */
        public Jt400ConsumerBuilder backoffMultiplier(int backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option will be converted to a <code>int</code> type.
         */
        public Jt400ConsumerBuilder backoffMultiplier(String backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a <code>long</code> type.
         */
        public Jt400ConsumerBuilder delay(long delay) {
            this.properties.put("delay", delay);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option will be converted to a
         * <code>long</code> type.
         */
        public Jt400ConsumerBuilder delay(String delay) {
            this.properties.put("delay", delay);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option is a <code>boolean</code> type.
         */
        public Jt400ConsumerBuilder greedy(boolean greedy) {
            this.properties.put("greedy", greedy);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option will be converted to a <code>boolean</code> type.
         */
        public Jt400ConsumerBuilder greedy(String greedy) {
            this.properties.put("greedy", greedy);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a <code>long</code> type.
         */
        public Jt400ConsumerBuilder initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option will be converted to a
         * <code>long</code> type.
         */
        public Jt400ConsumerBuilder initialDelay(String initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * is a <code>org.apache.camel.LoggingLevel</code> type.
         */
        public Jt400ConsumerBuilder runLoggingLevel(LoggingLevel runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * will be converted to a <code>org.apache.camel.LoggingLevel</code>
         * type.
         */
        public Jt400ConsumerBuilder runLoggingLevel(String runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option is a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         */
        public Jt400ConsumerBuilder scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option will be converted to a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         */
        public Jt400ConsumerBuilder scheduledExecutorService(
                String scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option is a
         * <code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>
         * type.
         */
        public Jt400ConsumerBuilder scheduler(
                ScheduledPollConsumerScheduler scheduler) {
            this.properties.put("scheduler", scheduler);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option will be converted to a
         * <code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>
         * type.
         */
        public Jt400ConsumerBuilder scheduler(String scheduler) {
            this.properties.put("scheduler", scheduler);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option is a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         */
        public Jt400ConsumerBuilder schedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option will be
         * converted to a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         */
        public Jt400ConsumerBuilder schedulerProperties(
                String schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started. The option is a
         * <code>boolean</code> type.
         */
        public Jt400ConsumerBuilder startScheduler(boolean startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started. The option will be
         * converted to a <code>boolean</code> type.
         */
        public Jt400ConsumerBuilder startScheduler(String startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option is a
         * <code>java.util.concurrent.TimeUnit</code> type.
         */
        public Jt400ConsumerBuilder timeUnit(TimeUnit timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option will be
         * converted to a <code>java.util.concurrent.TimeUnit</code> type.
         */
        public Jt400ConsumerBuilder timeUnit(String timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option is a
         * <code>boolean</code> type.
         */
        public Jt400ConsumerBuilder useFixedDelay(boolean useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (Jt400ConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option will be
         * converted to a <code>boolean</code> type.
         */
        public Jt400ConsumerBuilder useFixedDelay(String useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (Jt400ConsumerBuilder) this;
        }
    }

    /**
     * Builder for endpoint producers for the JT400 component.
     */
    public static class Jt400ProducerBuilder
            extends
                Jt400CommonBuilder<Jt400ProducerBuilder>
            implements
                EndpointProducerBuilder {
        public Jt400ProducerBuilder(String path) {
            super(path);
        }
    }

    /**
     * Proxy enum for <code>org.apache.camel.component.jt400.Jt400Type</code>
     * enum.
     */
    public static enum Jt400Type {
        DTAQ, PGM, SRVPGM;
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.jt400.Jt400Configuration$Format</code>
     * enum.
     */
    public static enum Format {
        text, binary;
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.jt400.Jt400Configuration$SearchType</code> enum.
     */
    public static enum SearchType {
        EQ, NE, LT, LE, GT, GE;
    }
    /**
     * The jt400 component allows you to exchanges messages with an AS/400
     * system using data queues or program call. Creates a builder to build a
     * consumer endpoint for the JT400 component.
     */
    public default Jt400ConsumerBuilder fromJt400(String path) {
        return new Jt400ConsumerBuilder(path);
    }
    /**
     * The jt400 component allows you to exchanges messages with an AS/400
     * system using data queues or program call. Creates a builder to build a
     * producer endpoint for the JT400 component.
     */
    public default Jt400ProducerBuilder toJt400(String path) {
        return new Jt400ProducerBuilder(path);
    }
}