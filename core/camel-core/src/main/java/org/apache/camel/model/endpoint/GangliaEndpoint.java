/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;

/**
 * The ganglia component is used for sending metrics to the Ganglia monitoring
 * system.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class GangliaEndpoint {


    public static class GangliaCommon extends EndpointConfiguration {
        /**
         * Host name for Ganglia server. The option is a java.lang.String type.
         */
        private String host;
        /**
         * Port for Ganglia server. The option is a int type.
         */
        private int port;
        /**
         * Minumum time in seconds before Ganglia will purge the metric value if
         * it expires. Set to 0 and the value will remain in Ganglia
         * indefinitely until a gmond agent restart. The option is a int type.
         */
        private int dmax;
        /**
         * The group that the metric belongs to. The option is a
         * java.lang.String type.
         */
        private String groupName;
        /**
         * The name to use for the metric. The option is a java.lang.String
         * type.
         */
        private String metricName;
        /**
         * Send the UDP metric packets using MULTICAST or UNICAST. The option is
         * a info.ganglia.gmetric4j.gmetric.GMetric.UDPAddressingMode type.
         */
        private Object mode;
        /**
         * Prefix the metric name with this string and an underscore. The option
         * is a java.lang.String type.
         */
        private String prefix;
        /**
         * The slope. The option is a
         * info.ganglia.gmetric4j.gmetric.GMetricSlope type.
         */
        private GMetricSlope slope;
        /**
         * Spoofing information IP:hostname. The option is a java.lang.String
         * type.
         */
        private String spoofHostname;
        /**
         * Maximum time in seconds that the value can be considered current.
         * After this, Ganglia considers the value to have expired. The option
         * is a int type.
         */
        private int tmax;
        /**
         * If using multicast, set the TTL of the packets. The option is a int
         * type.
         */
        private int ttl;
        /**
         * The type of value. The option is a
         * info.ganglia.gmetric4j.gmetric.GMetricType type.
         */
        private GMetricType type;
        /**
         * Any unit of measurement that qualifies the metric, e.g. widgets,
         * litres, bytes. Do not include a prefix such as k (kilo) or m (milli),
         * other tools may scale the units later. The value should be unscaled.
         * The option is a java.lang.String type.
         */
        private String units;
        /**
         * Use the wire format of Ganglia 3.1.0 and later versions. Set this to
         * false to use Ganglia 3.0.x or earlier. The option is a boolean type.
         */
        private boolean wireFormat31x;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;

        public String getHost() {
            return host;
        }

        public void setHost(String host) {
            this.host = host;
        }

        public int getPort() {
            return port;
        }

        public void setPort(int port) {
            this.port = port;
        }

        public int getDmax() {
            return dmax;
        }

        public void setDmax(int dmax) {
            this.dmax = dmax;
        }

        public String getGroupName() {
            return groupName;
        }

        public void setGroupName(String groupName) {
            this.groupName = groupName;
        }

        public String getMetricName() {
            return metricName;
        }

        public void setMetricName(String metricName) {
            this.metricName = metricName;
        }

        public Object getMode() {
            return mode;
        }

        public void setMode(Object mode) {
            this.mode = mode;
        }

        public String getPrefix() {
            return prefix;
        }

        public void setPrefix(String prefix) {
            this.prefix = prefix;
        }

        public GMetricSlope getSlope() {
            return slope;
        }

        public void setSlope(GMetricSlope slope) {
            this.slope = slope;
        }

        public String getSpoofHostname() {
            return spoofHostname;
        }

        public void setSpoofHostname(String spoofHostname) {
            this.spoofHostname = spoofHostname;
        }

        public int getTmax() {
            return tmax;
        }

        public void setTmax(int tmax) {
            this.tmax = tmax;
        }

        public int getTtl() {
            return ttl;
        }

        public void setTtl(int ttl) {
            this.ttl = ttl;
        }

        public GMetricType getType() {
            return type;
        }

        public void setType(GMetricType type) {
            this.type = type;
        }

        public String getUnits() {
            return units;
        }

        public void setUnits(String units) {
            this.units = units;
        }

        public boolean getWireFormat31x() {
            return wireFormat31x;
        }

        public void setWireFormat31x(boolean wireFormat31x) {
            this.wireFormat31x = wireFormat31x;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class GangliaConsumer extends GangliaCommon {
    }

    public static class GangliaProducer extends GangliaCommon {
    }

    public static enum GMetricSlope {
        ZERO, POSITIVE, NEGATIVE, BOTH;
    }

    public static enum GMetricType {
        STRING, INT8, UINT8, INT16, UINT16, INT32, UINT32, FLOAT, DOUBLE;
    }
}