/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.logging.Level;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The braintree component is used for integrating with the Braintree Payment
 * System.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class BraintreeEndpoint {


    public static class BraintreeCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        BraintreeCommon(String path) {
            super("braintree", path);
        }
        /**
         * What kind of operation to perform. The option is a
         * org.apache.camel.component.braintree.internal.BraintreeApiName type.
         */
        public T apiName(BraintreeApiName apiName) {
            this.properties.put("apiName", apiName);
            return (T) this;
        }
        /**
         * What sub operation to use for the selected operation. The option is a
         * java.lang.String type.
         */
        public T methodName(String methodName) {
            this.properties.put("methodName", methodName);
            return (T) this;
        }
        /**
         * The environment Either SANDBOX or PRODUCTION. The option is a
         * java.lang.String type.
         */
        public T environment(String environment) {
            this.properties.put("environment", environment);
            return (T) this;
        }
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * The option is a java.lang.String type.
         */
        public T inBody(String inBody) {
            this.properties.put("inBody", inBody);
            return (T) this;
        }
        /**
         * The merchant id provided by Braintree. The option is a
         * java.lang.String type.
         */
        public T merchantId(String merchantId) {
            this.properties.put("merchantId", merchantId);
            return (T) this;
        }
        /**
         * The private key provided by Braintree. The option is a
         * java.lang.String type.
         */
        public T privateKey(String privateKey) {
            this.properties.put("privateKey", privateKey);
            return (T) this;
        }
        /**
         * The public key provided by Braintree. The option is a
         * java.lang.String type.
         */
        public T publicKey(String publicKey) {
            this.properties.put("publicKey", publicKey);
            return (T) this;
        }
        /**
         * The access token granted by a merchant to another in order to process
         * transactions on their behalf. Used in place of environment, merchant
         * id, public key and private key fields. The option is a
         * java.lang.String type.
         */
        public T accessToken(String accessToken) {
            this.properties.put("accessToken", accessToken);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Set read timeout for http calls. The option is a java.lang.Integer
         * type.
         */
        public T httpReadTimeout(Integer httpReadTimeout) {
            this.properties.put("httpReadTimeout", httpReadTimeout);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Set logging level for http calls, see java.util.logging.Level. The
         * option is a java.lang.String type.
         */
        public T httpLogLevel(Level httpLogLevel) {
            this.properties.put("httpLogLevel", httpLogLevel);
            return (T) this;
        }
        /**
         * The proxy host. The option is a java.lang.String type.
         */
        public T proxyHost(String proxyHost) {
            this.properties.put("proxyHost", proxyHost);
            return (T) this;
        }
        /**
         * The proxy port. The option is a java.lang.Integer type.
         */
        public T proxyPort(Integer proxyPort) {
            this.properties.put("proxyPort", proxyPort);
            return (T) this;
        }
    }

    public static class BraintreeConsumer
            extends
                BraintreeCommon<BraintreeConsumer>
            implements
                EndpointDefinition.Consumer {
        public BraintreeConsumer(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public BraintreeConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (BraintreeConsumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public BraintreeConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (BraintreeConsumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public BraintreeConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (BraintreeConsumer) this;
        }
    }

    public static class BraintreeProducer
            extends
                BraintreeCommon<BraintreeProducer>
            implements
                EndpointDefinition.Producer {
        public BraintreeProducer(String path) {
            super(path);
        }
    }

    public static enum BraintreeApiName {
        ADDON, ADDRESS, CLIENTTOKEN, CREDITCARDVERIFICATION, CUSTOMER, DISCOUNT, DISPUTE, DOCUMENTUPLOAD, MERCHANTACCOUNT, PAYMENTMETHOD, PAYMENTMETHODNONCE, PLAN, REPORT, SETTLEMENTBATCHSUMMARY, SUBSCRIPTION, TRANSACTION, WEBHOOKNOTIFICATION;
    }
}