/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The couchdb component is used for integrate with CouchDB databases.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface CouchDbEndpointBuilder {


    public static class CouchDbCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        CouchDbCommonBuilder(String path) {
            super("couchdb", path);
        }
        /**
         * The protocol to use for communicating with the database. The option
         * is a java.lang.String type.
         */
        public T protocol(String protocol) {
            this.properties.put("protocol", protocol);
            return (T) this;
        }
        /**
         * Hostname of the running couchdb instance. The option is a
         * java.lang.String type.
         */
        public T hostname(String hostname) {
            this.properties.put("hostname", hostname);
            return (T) this;
        }
        /**
         * Port number for the running couchdb instance. The option is a int
         * type.
         */
        public T port(int port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Port number for the running couchdb instance. The option will be
         * converted to a int type.
         */
        public T port(String port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Name of the database to use. The option is a java.lang.String type.
         */
        public T database(String database) {
            this.properties.put("database", database);
            return (T) this;
        }
        /**
         * Creates the database if it does not already exist. The option is a
         * boolean type.
         */
        public T createDatabase(boolean createDatabase) {
            this.properties.put("createDatabase", createDatabase);
            return (T) this;
        }
        /**
         * Creates the database if it does not already exist. The option will be
         * converted to a boolean type.
         */
        public T createDatabase(String createDatabase) {
            this.properties.put("createDatabase", createDatabase);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a boolean type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a boolean type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Password for authenticated databases. The option is a
         * java.lang.String type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * Username in case of authenticated databases. The option is a
         * java.lang.String type.
         */
        public T username(String username) {
            this.properties.put("username", username);
            return (T) this;
        }
    }

    public static class CouchDbConsumerBuilder
            extends
                CouchDbCommonBuilder<CouchDbConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public CouchDbConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public CouchDbConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a boolean type.
         */
        public CouchDbConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * Document deletes are published as events. The option is a boolean
         * type.
         */
        public CouchDbConsumerBuilder deletes(boolean deletes) {
            this.properties.put("deletes", deletes);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * Document deletes are published as events. The option will be
         * converted to a boolean type.
         */
        public CouchDbConsumerBuilder deletes(String deletes) {
            this.properties.put("deletes", deletes);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * How often to send an empty message to keep socket alive in millis.
         * The option is a long type.
         */
        public CouchDbConsumerBuilder heartbeat(long heartbeat) {
            this.properties.put("heartbeat", heartbeat);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * How often to send an empty message to keep socket alive in millis.
         * The option will be converted to a long type.
         */
        public CouchDbConsumerBuilder heartbeat(String heartbeat) {
            this.properties.put("heartbeat", heartbeat);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * Start tracking changes immediately after the given update sequence.
         * The default, null, will start monitoring from the latest sequence.
         * The option is a java.lang.String type.
         */
        public CouchDbConsumerBuilder since(String since) {
            this.properties.put("since", since);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * Specifies how many revisions are returned in the changes array. The
         * default, main_only, will only return the current winning revision;
         * all_docs will return all leaf revisions (including conflicts and
         * deleted former conflicts.). The option is a java.lang.String type.
         */
        public CouchDbConsumerBuilder style(String style) {
            this.properties.put("style", style);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * Document inserts/updates are published as events. The option is a
         * boolean type.
         */
        public CouchDbConsumerBuilder updates(boolean updates) {
            this.properties.put("updates", updates);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * Document inserts/updates are published as events. The option will be
         * converted to a boolean type.
         */
        public CouchDbConsumerBuilder updates(String updates) {
            this.properties.put("updates", updates);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public CouchDbConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a org.apache.camel.spi.ExceptionHandler type.
         */
        public CouchDbConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public CouchDbConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (CouchDbConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a org.apache.camel.ExchangePattern type.
         */
        public CouchDbConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (CouchDbConsumerBuilder) this;
        }
    }

    public static class CouchDbProducerBuilder
            extends
                CouchDbCommonBuilder<CouchDbProducerBuilder>
            implements
                EndpointProducerBuilder {
        public CouchDbProducerBuilder(String path) {
            super(path);
        }
    }
    public default CouchDbConsumerBuilder fromCouchDb(String path) {
        return new CouchDbConsumerBuilder(path);
    }
    public default CouchDbProducerBuilder toCouchDb(String path) {
        return new CouchDbProducerBuilder(path);
    }
}