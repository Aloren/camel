/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.List;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The google-drive component provides access to Google Drive file storage
 * service.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class GoogleDriveEndpoint {


    public static class GoogleDriveCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private GoogleDriveApiName apiName;
        private String methodName;
        private String accessToken;
        private String applicationName;
        private Object clientFactory;
        private String clientId;
        private String clientSecret;
        private String inBody;
        private String refreshToken;
        private List<String> scopes;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;

        /**
         * What kind of operation to perform. The option is a
         * org.apache.camel.component.google.drive.internal.GoogleDriveApiName
         * type.
         */
        public T apiName(GoogleDriveApiName apiName) {
            this.apiName = apiName;
            return (T) this;
        }

        /**
         * What sub operation to use for the selected operation. The option is a
         * java.lang.String type.
         */
        public T methodName(String methodName) {
            this.methodName = methodName;
            return (T) this;
        }

        /**
         * OAuth 2 access token. This typically expires after an hour so
         * refreshToken is recommended for long term usage. The option is a
         * java.lang.String type.
         */
        public T accessToken(String accessToken) {
            this.accessToken = accessToken;
            return (T) this;
        }

        /**
         * Google drive application name. Example would be
         * camel-google-drive/1.0. The option is a java.lang.String type.
         */
        public T applicationName(String applicationName) {
            this.applicationName = applicationName;
            return (T) this;
        }

        /**
         * To use the GoogleCalendarClientFactory as factory for creating the
         * client. Will by default use BatchGoogleDriveClientFactory. The option
         * is a org.apache.camel.component.google.drive.GoogleDriveClientFactory
         * type.
         */
        public T clientFactory(Object clientFactory) {
            this.clientFactory = clientFactory;
            return (T) this;
        }

        /**
         * Client ID of the drive application. The option is a java.lang.String
         * type.
         */
        public T clientId(String clientId) {
            this.clientId = clientId;
            return (T) this;
        }

        /**
         * Client secret of the drive application. The option is a
         * java.lang.String type.
         */
        public T clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return (T) this;
        }

        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * The option is a java.lang.String type.
         */
        public T inBody(String inBody) {
            this.inBody = inBody;
            return (T) this;
        }

        /**
         * OAuth 2 refresh token. Using this, the Google Calendar component can
         * obtain a new accessToken whenever the current one expires - a
         * necessity if the application is long-lived. The option is a
         * java.lang.String type.
         */
        public T refreshToken(String refreshToken) {
            this.refreshToken = refreshToken;
            return (T) this;
        }

        /**
         * Specifies the level of permissions you want a drive application to
         * have to a user account. See
         * https://developers.google.com/drive/web/scopes for more info. The
         * option is a java.util.List<java.lang.String> type.
         */
        public T scopes(List<String> scopes) {
            this.scopes = scopes;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public GoogleDriveApiName getApiName() {
            return apiName;
        }

        public void setApiName(GoogleDriveApiName apiName) {
            this.apiName = apiName;
        }

        public String getMethodName() {
            return methodName;
        }

        public void setMethodName(String methodName) {
            this.methodName = methodName;
        }

        public String getAccessToken() {
            return accessToken;
        }

        public void setAccessToken(String accessToken) {
            this.accessToken = accessToken;
        }

        public String getApplicationName() {
            return applicationName;
        }

        public void setApplicationName(String applicationName) {
            this.applicationName = applicationName;
        }

        public Object getClientFactory() {
            return clientFactory;
        }

        public void setClientFactory(Object clientFactory) {
            this.clientFactory = clientFactory;
        }

        public String getClientId() {
            return clientId;
        }

        public void setClientId(String clientId) {
            this.clientId = clientId;
        }

        public String getClientSecret() {
            return clientSecret;
        }

        public void setClientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
        }

        public String getInBody() {
            return inBody;
        }

        public void setInBody(String inBody) {
            this.inBody = inBody;
        }

        public String getRefreshToken() {
            return refreshToken;
        }

        public void setRefreshToken(String refreshToken) {
            this.refreshToken = refreshToken;
        }

        public List<String> getScopes() {
            return scopes;
        }

        public void setScopes(List<String> scopes) {
            this.scopes = scopes;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class GoogleDriveConsumer
            extends
                GoogleDriveCommon<GoogleDriveConsumer> {
        private Boolean bridgeErrorHandler;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public GoogleDriveConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (GoogleDriveConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public GoogleDriveConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (GoogleDriveConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public GoogleDriveConsumer exchangePattern(
                ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (GoogleDriveConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class GoogleDriveProducer
            extends
                GoogleDriveCommon<GoogleDriveProducer> {
    }

    public static enum GoogleDriveApiName {
        drive_about, drive_apps, drive_changes, drive_channels, drive_children, drive_comments, drive_files, drive_parents, drive_permissions, drive_properties, drive_realtime, drive_replies, drive_revisions;
    }
}