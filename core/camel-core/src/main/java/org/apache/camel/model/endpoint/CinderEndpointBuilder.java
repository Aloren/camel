/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;

/**
 * The openstack-cinder component allows messages to be sent to an OpenStack
 * block storage services.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface CinderEndpointBuilder {


    /**
     * Base class for the OpenStack Cinder component builders.
     */
    public static class CinderCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        CinderCommonBuilder(String path) {
            super("openstack-cinder", path);
        }
        /**
         * OpenStack host url.
         * The option is a <code>java.lang.String</code> type.
         * @group producer
         */
        public T host(String host) {
            this.properties.put("host", host);
            return (T) this;
        }
        /**
         * OpenStack API version.
         * The option is a <code>java.lang.String</code> type.
         * @group producer
         */
        public T apiVersion(String apiVersion) {
            this.properties.put("apiVersion", apiVersion);
            return (T) this;
        }
        /**
         * OpenStack configuration.
         * The option is a <code>org.openstack4j.core.transport.Config</code>
         * type.
         * @group producer
         */
        public T config(Object config) {
            this.properties.put("config", config);
            return (T) this;
        }
        /**
         * OpenStack configuration.
         * The option will be converted to a
         * <code>org.openstack4j.core.transport.Config</code> type.
         * @group producer
         */
        public T config(String config) {
            this.properties.put("config", config);
            return (T) this;
        }
        /**
         * Authentication domain.
         * The option is a <code>java.lang.String</code> type.
         * @group producer
         */
        public T domain(String domain) {
            this.properties.put("domain", domain);
            return (T) this;
        }
        /**
         * The operation to do.
         * The option is a <code>java.lang.String</code> type.
         * @group producer
         */
        public T operation(String operation) {
            this.properties.put("operation", operation);
            return (T) this;
        }
        /**
         * OpenStack password.
         * The option is a <code>java.lang.String</code> type.
         * @group producer
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * The project ID.
         * The option is a <code>java.lang.String</code> type.
         * @group producer
         */
        public T project(String project) {
            this.properties.put("project", project);
            return (T) this;
        }
        /**
         * OpenStack Cinder subsystem.
         * The option is a <code>java.lang.String</code> type.
         * @group producer
         */
        public T subsystem(String subsystem) {
            this.properties.put("subsystem", subsystem);
            return (T) this;
        }
        /**
         * OpenStack username.
         * The option is a <code>java.lang.String</code> type.
         * @group producer
         */
        public T username(String username) {
            this.properties.put("username", username);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint producers for the OpenStack Cinder component.
     */
    public static class CinderProducerBuilder
            extends
                CinderCommonBuilder<CinderProducerBuilder>
            implements
                EndpointProducerBuilder {
        public CinderProducerBuilder(String path) {
            super(path);
        }
    }
    /**
     * The openstack-cinder component allows messages to be sent to an OpenStack
     * block storage services. Creates a builder to build a producer endpoint
     * for the OpenStack Cinder component.
     */
    public default CinderProducerBuilder toCinder(String path) {
        return new CinderProducerBuilder(path);
    }
}