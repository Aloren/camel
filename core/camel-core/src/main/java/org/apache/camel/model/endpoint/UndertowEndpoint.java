/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URI;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.HeaderFilterStrategy;

/**
 * The undertow component provides HTTP and WebSocket based endpoints for
 * consuming and producing HTTP/WebSocket requests.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class UndertowEndpoint {


    public static class UndertowCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private URI httpURI;
        private Boolean basicPropertyBinding;
        private HeaderFilterStrategy headerFilterStrategy;
        private Boolean synchronous;
        private Object undertowHttpBinding;
        private Object sslContextParameters;

        /**
         * The url of the HTTP endpoint to use. The option is a java.net.URI
         * type.
         */
        public T httpURI(URI httpURI) {
            this.httpURI = httpURI;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message. The option is a
         * org.apache.camel.spi.HeaderFilterStrategy type.
         */
        public T headerFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {
            this.headerFilterStrategy = headerFilterStrategy;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        /**
         * To use a custom UndertowHttpBinding to control the mapping between
         * Camel message and undertow. The option is a
         * org.apache.camel.component.undertow.UndertowHttpBinding type.
         */
        public T undertowHttpBinding(Object undertowHttpBinding) {
            this.undertowHttpBinding = undertowHttpBinding;
            return (T) this;
        }

        /**
         * To configure security using SSLContextParameters. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        public T sslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
            return (T) this;
        }

        public URI getHttpURI() {
            return httpURI;
        }

        public void setHttpURI(URI httpURI) {
            this.httpURI = httpURI;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public HeaderFilterStrategy getHeaderFilterStrategy() {
            return headerFilterStrategy;
        }

        public void setHeaderFilterStrategy(
                HeaderFilterStrategy headerFilterStrategy) {
            this.headerFilterStrategy = headerFilterStrategy;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Object getUndertowHttpBinding() {
            return undertowHttpBinding;
        }

        public void setUndertowHttpBinding(Object undertowHttpBinding) {
            this.undertowHttpBinding = undertowHttpBinding;
        }

        public Object getSslContextParameters() {
            return sslContextParameters;
        }

        public void setSslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
        }
    }

    public static class UndertowConsumer
            extends
                UndertowCommon<UndertowConsumer> {
        private Boolean bridgeErrorHandler;
        private String httpMethodRestrict;
        private Boolean matchOnUriPrefix;
        private Boolean optionsEnabled;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;
        private Boolean fireWebSocketChannelEvents;
        private Boolean useStreaming;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public UndertowConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (UndertowConsumer) this;
        }

        /**
         * Used to only allow consuming if the HttpMethod matches, such as
         * GET/POST/PUT etc. Multiple methods can be specified separated by
         * comma. The option is a java.lang.String type.
         */
        public UndertowConsumer httpMethodRestrict(String httpMethodRestrict) {
            this.httpMethodRestrict = httpMethodRestrict;
            return (UndertowConsumer) this;
        }

        /**
         * Whether or not the consumer should try to find a target consumer by
         * matching the URI prefix if no exact match is found. The option is a
         * java.lang.Boolean type.
         */
        public UndertowConsumer matchOnUriPrefix(Boolean matchOnUriPrefix) {
            this.matchOnUriPrefix = matchOnUriPrefix;
            return (UndertowConsumer) this;
        }

        /**
         * Specifies whether to enable HTTP OPTIONS for this Servlet consumer.
         * By default OPTIONS is turned off. The option is a boolean type.
         */
        public UndertowConsumer optionsEnabled(boolean optionsEnabled) {
            this.optionsEnabled = optionsEnabled;
            return (UndertowConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public UndertowConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (UndertowConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public UndertowConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (UndertowConsumer) this;
        }

        /**
         * if true, the consumer will post notifications to the route when a new
         * WebSocket peer connects, disconnects, etc. See
         * UndertowConstants.EVENT_TYPE and EventType. The option is a boolean
         * type.
         */
        public UndertowConsumer fireWebSocketChannelEvents(
                boolean fireWebSocketChannelEvents) {
            this.fireWebSocketChannelEvents = fireWebSocketChannelEvents;
            return (UndertowConsumer) this;
        }

        /**
         * if true, text and binary messages coming through a WebSocket will be
         * wrapped as java.io.Reader and java.io.InputStream respectively before
         * they are passed to an Exchange; otherwise they will be passed as
         * String and byte respectively. The option is a boolean type.
         */
        public UndertowConsumer useStreaming(boolean useStreaming) {
            this.useStreaming = useStreaming;
            return (UndertowConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public String getHttpMethodRestrict() {
            return httpMethodRestrict;
        }

        public void setHttpMethodRestrict(String httpMethodRestrict) {
            this.httpMethodRestrict = httpMethodRestrict;
        }

        public Boolean getMatchOnUriPrefix() {
            return matchOnUriPrefix;
        }

        public void setMatchOnUriPrefix(Boolean matchOnUriPrefix) {
            this.matchOnUriPrefix = matchOnUriPrefix;
        }

        public Boolean getOptionsEnabled() {
            return optionsEnabled;
        }

        public void setOptionsEnabled(Boolean optionsEnabled) {
            this.optionsEnabled = optionsEnabled;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }

        public Boolean getFireWebSocketChannelEvents() {
            return fireWebSocketChannelEvents;
        }

        public void setFireWebSocketChannelEvents(
                Boolean fireWebSocketChannelEvents) {
            this.fireWebSocketChannelEvents = fireWebSocketChannelEvents;
        }

        public Boolean getUseStreaming() {
            return useStreaming;
        }

        public void setUseStreaming(Boolean useStreaming) {
            this.useStreaming = useStreaming;
        }
    }

    public static class UndertowProducer
            extends
                UndertowCommon<UndertowProducer> {
        private Object cookieHandler;
        private Boolean keepAlive;
        private Map<String, Object> options;
        private Boolean reuseAddresses;
        private Boolean tcpNoDelay;
        private Boolean throwExceptionOnFailure;
        private Boolean transferException;
        private Integer sendTimeout;
        private Boolean sendToAll;

        /**
         * Configure a cookie handler to maintain a HTTP session. The option is
         * a org.apache.camel.http.common.cookie.CookieHandler type.
         */
        public UndertowProducer cookieHandler(Object cookieHandler) {
            this.cookieHandler = cookieHandler;
            return (UndertowProducer) this;
        }

        /**
         * Setting to ensure socket is not closed due to inactivity. The option
         * is a java.lang.Boolean type.
         */
        public UndertowProducer keepAlive(Boolean keepAlive) {
            this.keepAlive = keepAlive;
            return (UndertowProducer) this;
        }

        /**
         * Sets additional channel options. The options that can be used are
         * defined in org.xnio.Options. To configure from endpoint uri, then
         * prefix each option with option., such as
         * option.close-abort=true&option.send-buffer=8192. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public UndertowProducer options(Map<String, Object> options) {
            this.options = options;
            return (UndertowProducer) this;
        }

        /**
         * Setting to facilitate socket multiplexing. The option is a
         * java.lang.Boolean type.
         */
        public UndertowProducer reuseAddresses(Boolean reuseAddresses) {
            this.reuseAddresses = reuseAddresses;
            return (UndertowProducer) this;
        }

        /**
         * Setting to improve TCP protocol performance. The option is a
         * java.lang.Boolean type.
         */
        public UndertowProducer tcpNoDelay(Boolean tcpNoDelay) {
            this.tcpNoDelay = tcpNoDelay;
            return (UndertowProducer) this;
        }

        /**
         * Option to disable throwing the HttpOperationFailedException in case
         * of failed responses from the remote server. This allows you to get
         * all responses regardless of the HTTP status code. The option is a
         * java.lang.Boolean type.
         */
        public UndertowProducer throwExceptionOnFailure(
                Boolean throwExceptionOnFailure) {
            this.throwExceptionOnFailure = throwExceptionOnFailure;
            return (UndertowProducer) this;
        }

        /**
         * If enabled and an Exchange failed processing on the consumer side and
         * if the caused Exception was send back serialized in the response as a
         * application/x-java-serialized-object content type. On the producer
         * side the exception will be deserialized and thrown as is instead of
         * the HttpOperationFailedException. The caused exception is required to
         * be serialized. This is by default turned off. If you enable this then
         * be aware that Java will deserialize the incoming data from the
         * request to Java and that can be a potential security risk. The option
         * is a java.lang.Boolean type.
         */
        public UndertowProducer transferException(Boolean transferException) {
            this.transferException = transferException;
            return (UndertowProducer) this;
        }

        /**
         * Timeout in milliseconds when sending to a websocket channel. The
         * default timeout is 30000 (30 seconds). The option is a
         * java.lang.Integer type.
         */
        public UndertowProducer sendTimeout(Integer sendTimeout) {
            this.sendTimeout = sendTimeout;
            return (UndertowProducer) this;
        }

        /**
         * To send to all websocket subscribers. Can be used to configure on
         * endpoint level, instead of having to use the
         * UndertowConstants.SEND_TO_ALL header on the message. The option is a
         * java.lang.Boolean type.
         */
        public UndertowProducer sendToAll(Boolean sendToAll) {
            this.sendToAll = sendToAll;
            return (UndertowProducer) this;
        }

        public Object getCookieHandler() {
            return cookieHandler;
        }

        public void setCookieHandler(Object cookieHandler) {
            this.cookieHandler = cookieHandler;
        }

        public Boolean getKeepAlive() {
            return keepAlive;
        }

        public void setKeepAlive(Boolean keepAlive) {
            this.keepAlive = keepAlive;
        }

        public Map<String, Object> getOptions() {
            return options;
        }

        public void setOptions(Map<String, Object> options) {
            this.options = options;
        }

        public Boolean getReuseAddresses() {
            return reuseAddresses;
        }

        public void setReuseAddresses(Boolean reuseAddresses) {
            this.reuseAddresses = reuseAddresses;
        }

        public Boolean getTcpNoDelay() {
            return tcpNoDelay;
        }

        public void setTcpNoDelay(Boolean tcpNoDelay) {
            this.tcpNoDelay = tcpNoDelay;
        }

        public Boolean getThrowExceptionOnFailure() {
            return throwExceptionOnFailure;
        }

        public void setThrowExceptionOnFailure(Boolean throwExceptionOnFailure) {
            this.throwExceptionOnFailure = throwExceptionOnFailure;
        }

        public Boolean getTransferException() {
            return transferException;
        }

        public void setTransferException(Boolean transferException) {
            this.transferException = transferException;
        }

        public Integer getSendTimeout() {
            return sendTimeout;
        }

        public void setSendTimeout(Integer sendTimeout) {
            this.sendTimeout = sendTimeout;
        }

        public Boolean getSendToAll() {
            return sendToAll;
        }

        public void setSendToAll(Boolean sendToAll) {
            this.sendToAll = sendToAll;
        }
    }
}