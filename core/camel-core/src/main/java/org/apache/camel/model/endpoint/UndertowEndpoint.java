/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URI;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.HeaderFilterStrategy;

/**
 * The undertow component provides HTTP and WebSocket based endpoints for
 * consuming and producing HTTP/WebSocket requests.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface UndertowEndpoint {


    public static class UndertowCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        UndertowCommon(String path) {
            super("undertow", path);
        }
        /**
         * The url of the HTTP endpoint to use. The option is a java.net.URI
         * type.
         */
        public T httpURI(URI httpURI) {
            this.properties.put("httpURI", httpURI);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message. The option is a
         * org.apache.camel.spi.HeaderFilterStrategy type.
         */
        public T headerFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {
            this.properties.put("headerFilterStrategy", headerFilterStrategy);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * To use a custom UndertowHttpBinding to control the mapping between
         * Camel message and undertow. The option is a
         * org.apache.camel.component.undertow.UndertowHttpBinding type.
         */
        public T undertowHttpBinding(Object undertowHttpBinding) {
            this.properties.put("undertowHttpBinding", undertowHttpBinding);
            return (T) this;
        }
        /**
         * To configure security using SSLContextParameters. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        public T sslContextParameters(Object sslContextParameters) {
            this.properties.put("sslContextParameters", sslContextParameters);
            return (T) this;
        }
    }

    public static class UndertowConsumer
            extends
                UndertowCommon<UndertowConsumer>
            implements
                EndpointDefinition.Consumer {
        public UndertowConsumer(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public UndertowConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (UndertowConsumer) this;
        }
        /**
         * Used to only allow consuming if the HttpMethod matches, such as
         * GET/POST/PUT etc. Multiple methods can be specified separated by
         * comma. The option is a java.lang.String type.
         */
        public UndertowConsumer httpMethodRestrict(String httpMethodRestrict) {
            this.properties.put("httpMethodRestrict", httpMethodRestrict);
            return (UndertowConsumer) this;
        }
        /**
         * Whether or not the consumer should try to find a target consumer by
         * matching the URI prefix if no exact match is found. The option is a
         * java.lang.Boolean type.
         */
        public UndertowConsumer matchOnUriPrefix(Boolean matchOnUriPrefix) {
            this.properties.put("matchOnUriPrefix", matchOnUriPrefix);
            return (UndertowConsumer) this;
        }
        /**
         * Specifies whether to enable HTTP OPTIONS for this Servlet consumer.
         * By default OPTIONS is turned off. The option is a boolean type.
         */
        public UndertowConsumer optionsEnabled(boolean optionsEnabled) {
            this.properties.put("optionsEnabled", optionsEnabled);
            return (UndertowConsumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public UndertowConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (UndertowConsumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public UndertowConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (UndertowConsumer) this;
        }
        /**
         * if true, the consumer will post notifications to the route when a new
         * WebSocket peer connects, disconnects, etc. See
         * UndertowConstants.EVENT_TYPE and EventType. The option is a boolean
         * type.
         */
        public UndertowConsumer fireWebSocketChannelEvents(
                boolean fireWebSocketChannelEvents) {
            this.properties.put("fireWebSocketChannelEvents", fireWebSocketChannelEvents);
            return (UndertowConsumer) this;
        }
        /**
         * if true, text and binary messages coming through a WebSocket will be
         * wrapped as java.io.Reader and java.io.InputStream respectively before
         * they are passed to an Exchange; otherwise they will be passed as
         * String and byte respectively. The option is a boolean type.
         */
        public UndertowConsumer useStreaming(boolean useStreaming) {
            this.properties.put("useStreaming", useStreaming);
            return (UndertowConsumer) this;
        }
    }

    public static class UndertowProducer
            extends
                UndertowCommon<UndertowProducer>
            implements
                EndpointDefinition.Producer {
        public UndertowProducer(String path) {
            super(path);
        }
        /**
         * Configure a cookie handler to maintain a HTTP session. The option is
         * a org.apache.camel.http.common.cookie.CookieHandler type.
         */
        public UndertowProducer cookieHandler(Object cookieHandler) {
            this.properties.put("cookieHandler", cookieHandler);
            return (UndertowProducer) this;
        }
        /**
         * Setting to ensure socket is not closed due to inactivity. The option
         * is a java.lang.Boolean type.
         */
        public UndertowProducer keepAlive(Boolean keepAlive) {
            this.properties.put("keepAlive", keepAlive);
            return (UndertowProducer) this;
        }
        /**
         * Sets additional channel options. The options that can be used are
         * defined in org.xnio.Options. To configure from endpoint uri, then
         * prefix each option with option., such as
         * option.close-abort=true&option.send-buffer=8192. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public UndertowProducer options(Map<String, Object> options) {
            this.properties.put("options", options);
            return (UndertowProducer) this;
        }
        /**
         * Setting to facilitate socket multiplexing. The option is a
         * java.lang.Boolean type.
         */
        public UndertowProducer reuseAddresses(Boolean reuseAddresses) {
            this.properties.put("reuseAddresses", reuseAddresses);
            return (UndertowProducer) this;
        }
        /**
         * Setting to improve TCP protocol performance. The option is a
         * java.lang.Boolean type.
         */
        public UndertowProducer tcpNoDelay(Boolean tcpNoDelay) {
            this.properties.put("tcpNoDelay", tcpNoDelay);
            return (UndertowProducer) this;
        }
        /**
         * Option to disable throwing the HttpOperationFailedException in case
         * of failed responses from the remote server. This allows you to get
         * all responses regardless of the HTTP status code. The option is a
         * java.lang.Boolean type.
         */
        public UndertowProducer throwExceptionOnFailure(
                Boolean throwExceptionOnFailure) {
            this.properties.put("throwExceptionOnFailure", throwExceptionOnFailure);
            return (UndertowProducer) this;
        }
        /**
         * If enabled and an Exchange failed processing on the consumer side and
         * if the caused Exception was send back serialized in the response as a
         * application/x-java-serialized-object content type. On the producer
         * side the exception will be deserialized and thrown as is instead of
         * the HttpOperationFailedException. The caused exception is required to
         * be serialized. This is by default turned off. If you enable this then
         * be aware that Java will deserialize the incoming data from the
         * request to Java and that can be a potential security risk. The option
         * is a java.lang.Boolean type.
         */
        public UndertowProducer transferException(Boolean transferException) {
            this.properties.put("transferException", transferException);
            return (UndertowProducer) this;
        }
        /**
         * Timeout in milliseconds when sending to a websocket channel. The
         * default timeout is 30000 (30 seconds). The option is a
         * java.lang.Integer type.
         */
        public UndertowProducer sendTimeout(Integer sendTimeout) {
            this.properties.put("sendTimeout", sendTimeout);
            return (UndertowProducer) this;
        }
        /**
         * To send to all websocket subscribers. Can be used to configure on
         * endpoint level, instead of having to use the
         * UndertowConstants.SEND_TO_ALL header on the message. The option is a
         * java.lang.Boolean type.
         */
        public UndertowProducer sendToAll(Boolean sendToAll) {
            this.properties.put("sendToAll", sendToAll);
            return (UndertowProducer) this;
        }
    }
    public default UndertowConsumer fromUndertow(String path) {
        return new UndertowConsumer(path);
    }
    public default UndertowProducer toUndertow(String path) {
        return new UndertowProducer(path);
    }
}