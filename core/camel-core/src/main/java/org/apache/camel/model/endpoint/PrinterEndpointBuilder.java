/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;

/**
 * The printer component is used for sending messages to printers as print jobs.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface PrinterEndpointBuilder {


    public static class PrinterCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        PrinterCommonBuilder(String path) {
            super("lpr", path);
        }
        /**
         * Hostname of the printer. The option is a
         * <code>java.lang.String</code> type.
         */
        public T hostname(String hostname) {
            this.properties.put("hostname", hostname);
            return (T) this;
        }
        /**
         * Port number of the printer. The option is a <code>int</code> type.
         */
        public T port(int port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Port number of the printer. The option will be converted to a
         * <code>int</code> type.
         */
        public T port(String port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * Name of the printer. The option is a <code>java.lang.String</code>
         * type.
         */
        public T printername(String printername) {
            this.properties.put("printername", printername);
            return (T) this;
        }
        /**
         * Number of copies to print. The option is a <code>int</code> type.
         */
        public T copies(int copies) {
            this.properties.put("copies", copies);
            return (T) this;
        }
        /**
         * Number of copies to print. The option will be converted to a
         * <code>int</code> type.
         */
        public T copies(String copies) {
            this.properties.put("copies", copies);
            return (T) this;
        }
        /**
         * Sets DocFlavor to use. The option is a
         * <code>javax.print.DocFlavor</code> type.
         */
        public T docFlavor(Object docFlavor) {
            this.properties.put("docFlavor", docFlavor);
            return (T) this;
        }
        /**
         * Sets DocFlavor to use. The option will be converted to a
         * <code>javax.print.DocFlavor</code> type.
         */
        public T docFlavor(String docFlavor) {
            this.properties.put("docFlavor", docFlavor);
            return (T) this;
        }
        /**
         * Sets DocFlavor to use. The option is a <code>java.lang.String</code>
         * type.
         */
        public T flavor(String flavor) {
            this.properties.put("flavor", flavor);
            return (T) this;
        }
        /**
         * Sets the stationary as defined by enumeration names in the
         * javax.print.attribute.standard.MediaSizeName API. The default setting
         * is to use North American Letter sized stationary. The value's case is
         * ignored, e.g. values of iso_a4 and ISO_A4 may be used. The option is
         * a <code>java.lang.String</code> type.
         */
        public T mediaSize(String mediaSize) {
            this.properties.put("mediaSize", mediaSize);
            return (T) this;
        }
        /**
         * Sets MediaTray supported by the javax.print.DocFlavor API, for
         * example upper,middle etc. The option is a
         * <code>java.lang.String</code> type.
         */
        public T mediaTray(String mediaTray) {
            this.properties.put("mediaTray", mediaTray);
            return (T) this;
        }
        /**
         * Sets mimeTypes supported by the javax.print.DocFlavor API. The option
         * is a <code>java.lang.String</code> type.
         */
        public T mimeType(String mimeType) {
            this.properties.put("mimeType", mimeType);
            return (T) this;
        }
        /**
         * Sets the page orientation. The option is a
         * <code>java.lang.String</code> type.
         */
        public T orientation(String orientation) {
            this.properties.put("orientation", orientation);
            return (T) this;
        }
        /**
         * Sets the prefix name of the printer, it is useful when the printer
         * name does not start with //hostname/printer. The option is a
         * <code>java.lang.String</code> type.
         */
        public T printerPrefix(String printerPrefix) {
            this.properties.put("printerPrefix", printerPrefix);
            return (T) this;
        }
        /**
         * etting this option to false prevents sending of the print data to the
         * printer. The option is a <code>boolean</code> type.
         */
        public T sendToPrinter(boolean sendToPrinter) {
            this.properties.put("sendToPrinter", sendToPrinter);
            return (T) this;
        }
        /**
         * etting this option to false prevents sending of the print data to the
         * printer. The option will be converted to a <code>boolean</code> type.
         */
        public T sendToPrinter(String sendToPrinter) {
            this.properties.put("sendToPrinter", sendToPrinter);
            return (T) this;
        }
        /**
         * Sets one sided or two sided printing based on the
         * javax.print.attribute.standard.Sides API. The option is a
         * <code>java.lang.String</code> type.
         */
        public T sides(String sides) {
            this.properties.put("sides", sides);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class PrinterProducerBuilder
            extends
                PrinterCommonBuilder<PrinterProducerBuilder>
            implements
                EndpointProducerBuilder {
        public PrinterProducerBuilder(String path) {
            super(path);
        }
    }
    public default PrinterProducerBuilder toPrinter(String path) {
        return new PrinterProducerBuilder(path);
    }
}