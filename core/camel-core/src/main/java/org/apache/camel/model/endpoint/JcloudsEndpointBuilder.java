/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * For interacting with cloud compute & blobstore service via jclouds.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface JcloudsEndpointBuilder {


    public static class JcloudsCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        JcloudsCommonBuilder(String path) {
            super("jclouds", path);
        }
        /**
         * What command to execute such as blobstore or compute. The option is a
         * org.apache.camel.component.jclouds.JcloudsCommand type.
         */
        public T command(JcloudsCommand command) {
            this.properties.put("command", command);
            return (T) this;
        }
        /**
         * The name of the cloud provider that provides the target service (e.g.
         * aws-s3 or aws_ec2). The option is a java.lang.String type.
         */
        public T providerId(String providerId) {
            this.properties.put("providerId", providerId);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * The name of the blob container. The option is a java.lang.String
         * type.
         */
        public T container(String container) {
            this.properties.put("container", container);
            return (T) this;
        }
    }

    public static class JcloudsConsumerBuilder
            extends
                JcloudsCommonBuilder<JcloudsConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public JcloudsConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public JcloudsConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (JcloudsConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public JcloudsConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (JcloudsConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public JcloudsConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (JcloudsConsumerBuilder) this;
        }
        /**
         * An optional directory name to use. The option is a java.lang.String
         * type.
         */
        public JcloudsConsumerBuilder directory(String directory) {
            this.properties.put("directory", directory);
            return (JcloudsConsumerBuilder) this;
        }
    }

    public static class JcloudsProducerBuilder
            extends
                JcloudsCommonBuilder<JcloudsProducerBuilder>
            implements
                EndpointProducerBuilder {
        public JcloudsProducerBuilder(String path) {
            super(path);
        }
        /**
         * The name of the blob. The option is a java.lang.String type.
         */
        public JcloudsProducerBuilder blobName(String blobName) {
            this.properties.put("blobName", blobName);
            return (JcloudsProducerBuilder) this;
        }
        /**
         * The group that will be assigned to the newly created node. Values
         * depend on the actual cloud provider. The option is a java.lang.String
         * type.
         */
        public JcloudsProducerBuilder group(String group) {
            this.properties.put("group", group);
            return (JcloudsProducerBuilder) this;
        }
        /**
         * The hardware that will be used for creating a node. Values depend on
         * the actual cloud provider. The option is a java.lang.String type.
         */
        public JcloudsProducerBuilder hardwareId(String hardwareId) {
            this.properties.put("hardwareId", hardwareId);
            return (JcloudsProducerBuilder) this;
        }
        /**
         * The imageId that will be used for creating a node. Values depend on
         * the actual cloud provider. The option is a java.lang.String type.
         */
        public JcloudsProducerBuilder imageId(String imageId) {
            this.properties.put("imageId", imageId);
            return (JcloudsProducerBuilder) this;
        }
        /**
         * The location that will be used for creating a node. Values depend on
         * the actual cloud provider. The option is a java.lang.String type.
         */
        public JcloudsProducerBuilder locationId(String locationId) {
            this.properties.put("locationId", locationId);
            return (JcloudsProducerBuilder) this;
        }
        /**
         * The id of the node that will run the script or destroyed. The option
         * is a java.lang.String type.
         */
        public JcloudsProducerBuilder nodeId(String nodeId) {
            this.properties.put("nodeId", nodeId);
            return (JcloudsProducerBuilder) this;
        }
        /**
         * To filter by node status to only select running nodes etc. The option
         * is a java.lang.String type.
         */
        public JcloudsProducerBuilder nodeState(String nodeState) {
            this.properties.put("nodeState", nodeState);
            return (JcloudsProducerBuilder) this;
        }
        /**
         * Specifies the type of operation that will be performed to the
         * blobstore. The option is a java.lang.String type.
         */
        public JcloudsProducerBuilder operation(String operation) {
            this.properties.put("operation", operation);
            return (JcloudsProducerBuilder) this;
        }
        /**
         * The user on the target node that will run the script. The option is a
         * java.lang.String type.
         */
        public JcloudsProducerBuilder user(String user) {
            this.properties.put("user", user);
            return (JcloudsProducerBuilder) this;
        }
    }

    public static enum JcloudsCommand {
        blobstore, compute;
    }
    public default JcloudsConsumerBuilder fromJclouds(String path) {
        return new JcloudsConsumerBuilder(path);
    }
    public default JcloudsProducerBuilder toJclouds(String path) {
        return new JcloudsProducerBuilder(path);
    }
}