/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;

/**
 * The geocoder component is used for looking up geocodes (latitude and
 * longitude) for a given address, or reverse lookup.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface GeoCoderEndpointBuilder {


    public static class GeoCoderCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        GeoCoderCommonBuilder(String path) {
            super("geocoder", path);
        }
        /**
         * The geo address which should be prefixed with address:. The option is
         * a <code>java.lang.String</code> type.
         */
        public T address(String address) {
            this.properties.put("address", address);
            return (T) this;
        }
        /**
         * The geo latitude and longitude which should be prefixed with latlng:.
         * The option is a <code>java.lang.String</code> type.
         */
        public T latlng(String latlng) {
            this.properties.put("latlng", latlng);
            return (T) this;
        }
        /**
         * Whether to only enrich the Exchange with headers, and leave the body
         * as-is. The option is a <code>boolean</code> type.
         */
        public T headersOnly(boolean headersOnly) {
            this.properties.put("headersOnly", headersOnly);
            return (T) this;
        }
        /**
         * Whether to only enrich the Exchange with headers, and leave the body
         * as-is. The option will be converted to a <code>boolean</code> type.
         */
        public T headersOnly(String headersOnly) {
            this.properties.put("headersOnly", headersOnly);
            return (T) this;
        }
        /**
         * The language to use. The option is a <code>java.lang.String</code>
         * type.
         */
        public T language(String language) {
            this.properties.put("language", language);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Domain for proxy NTML authentication. The option is a
         * <code>java.lang.String</code> type.
         */
        public T proxyAuthDomain(String proxyAuthDomain) {
            this.properties.put("proxyAuthDomain", proxyAuthDomain);
            return (T) this;
        }
        /**
         * Optional host for proxy NTML authentication. The option is a
         * <code>java.lang.String</code> type.
         */
        public T proxyAuthHost(String proxyAuthHost) {
            this.properties.put("proxyAuthHost", proxyAuthHost);
            return (T) this;
        }
        /**
         * Authentication method for proxy, either as Basic, Digest or NTLM. The
         * option is a <code>java.lang.String</code> type.
         */
        public T proxyAuthMethod(String proxyAuthMethod) {
            this.properties.put("proxyAuthMethod", proxyAuthMethod);
            return (T) this;
        }
        /**
         * Password for proxy authentication. The option is a
         * <code>java.lang.String</code> type.
         */
        public T proxyAuthPassword(String proxyAuthPassword) {
            this.properties.put("proxyAuthPassword", proxyAuthPassword);
            return (T) this;
        }
        /**
         * Username for proxy authentication. The option is a
         * <code>java.lang.String</code> type.
         */
        public T proxyAuthUsername(String proxyAuthUsername) {
            this.properties.put("proxyAuthUsername", proxyAuthUsername);
            return (T) this;
        }
        /**
         * The proxy host name. The option is a <code>java.lang.String</code>
         * type.
         */
        public T proxyHost(String proxyHost) {
            this.properties.put("proxyHost", proxyHost);
            return (T) this;
        }
        /**
         * The proxy port number. The option is a <code>java.lang.Integer</code>
         * type.
         */
        public T proxyPort(Integer proxyPort) {
            this.properties.put("proxyPort", proxyPort);
            return (T) this;
        }
        /**
         * The proxy port number. The option will be converted to a
         * <code>java.lang.Integer</code> type.
         */
        public T proxyPort(String proxyPort) {
            this.properties.put("proxyPort", proxyPort);
            return (T) this;
        }
        /**
         * To use google apiKey. The option is a <code>java.lang.String</code>
         * type.
         */
        public T apiKey(String apiKey) {
            this.properties.put("apiKey", apiKey);
            return (T) this;
        }
        /**
         * To use google premium with this client id. The option is a
         * <code>java.lang.String</code> type.
         */
        public T clientId(String clientId) {
            this.properties.put("clientId", clientId);
            return (T) this;
        }
        /**
         * To use google premium with this client key. The option is a
         * <code>java.lang.String</code> type.
         */
        public T clientKey(String clientKey) {
            this.properties.put("clientKey", clientKey);
            return (T) this;
        }
    }

    public static class GeoCoderProducerBuilder
            extends
                GeoCoderCommonBuilder<GeoCoderProducerBuilder>
            implements
                EndpointProducerBuilder {
        public GeoCoderProducerBuilder(String path) {
            super(path);
        }
    }
    public default GeoCoderProducerBuilder toGeoCoder(String path) {
        return new GeoCoderProducerBuilder(path);
    }
}