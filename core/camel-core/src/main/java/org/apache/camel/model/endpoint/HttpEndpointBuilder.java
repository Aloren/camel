/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URI;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.HeaderFilterStrategy;

/**
 * For calling out to external HTTP servers using Apache HTTP Client 4.x.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface HttpEndpointBuilder {


    /**
     * Base class for the HTTP4 component builders.
     */
    public static class HttpCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        HttpCommonBuilder(String path) {
            super("http", path);
        }
        /**
         * Determines whether or not the raw input stream from Servlet is cached
         * or not (Camel will read the stream into a in memory/overflow to file,
         * Stream caching) cache. By default Camel will cache the Servlet input
         * stream to support reading it multiple times to ensure it Camel can
         * retrieve all data from the stream. However you can set this option to
         * true when you for example need to access the raw stream, such as
         * streaming it directly to a file or other persistent store.
         * DefaultHttpBinding will copy the request input stream into a stream
         * cache and put it into message body if this option is false to support
         * reading the stream multiple times. If you use Servlet to bridge/proxy
         * an endpoint then consider enabling this option to improve
         * performance, in case you do not need to read the message payload
         * multiple times. The http/http4 producer will by default cache the
         * response body stream. If setting this option to true, then the
         * producers will not cache the response body stream but use the
         * response stream as-is as the message body.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        public T disableStreamCache(boolean disableStreamCache) {
            this.properties.put("disableStreamCache", disableStreamCache);
            return (T) this;
        }
        /**
         * Determines whether or not the raw input stream from Servlet is cached
         * or not (Camel will read the stream into a in memory/overflow to file,
         * Stream caching) cache. By default Camel will cache the Servlet input
         * stream to support reading it multiple times to ensure it Camel can
         * retrieve all data from the stream. However you can set this option to
         * true when you for example need to access the raw stream, such as
         * streaming it directly to a file or other persistent store.
         * DefaultHttpBinding will copy the request input stream into a stream
         * cache and put it into message body if this option is false to support
         * reading the stream multiple times. If you use Servlet to bridge/proxy
         * an endpoint then consider enabling this option to improve
         * performance, in case you do not need to read the message payload
         * multiple times. The http/http4 producer will by default cache the
         * response body stream. If setting this option to true, then the
         * producers will not cache the response body stream but use the
         * response stream as-is as the message body.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        public T disableStreamCache(String disableStreamCache) {
            this.properties.put("disableStreamCache", disableStreamCache);
            return (T) this;
        }
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message.
         * The option is a
         * <code>org.apache.camel.spi.HeaderFilterStrategy</code> type.
         * @group common
         */
        public T headerFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {
            this.properties.put("headerFilterStrategy", headerFilterStrategy);
            return (T) this;
        }
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message.
         * The option will be converted to a
         * <code>org.apache.camel.spi.HeaderFilterStrategy</code> type.
         * @group common
         */
        public T headerFilterStrategy(String headerFilterStrategy) {
            this.properties.put("headerFilterStrategy", headerFilterStrategy);
            return (T) this;
        }
        /**
         * To use a custom HttpBinding to control the mapping between Camel
         * message and HttpClient.
         * The option is a <code>org.apache.camel.http.common.HttpBinding</code>
         * type.
         * @group common (advanced)
         */
        public T httpBinding(Object httpBinding) {
            this.properties.put("httpBinding", httpBinding);
            return (T) this;
        }
        /**
         * To use a custom HttpBinding to control the mapping between Camel
         * message and HttpClient.
         * The option will be converted to a
         * <code>org.apache.camel.http.common.HttpBinding</code> type.
         * @group common (advanced)
         */
        public T httpBinding(String httpBinding) {
            this.properties.put("httpBinding", httpBinding);
            return (T) this;
        }
        /**
         * If this option is false the Servlet will disable the HTTP streaming
         * and set the content-length header on the response.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public T chunked(boolean chunked) {
            this.properties.put("chunked", chunked);
            return (T) this;
        }
        /**
         * If this option is false the Servlet will disable the HTTP streaming
         * and set the content-length header on the response.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public T chunked(String chunked) {
            this.properties.put("chunked", chunked);
            return (T) this;
        }
        /**
         * If enabled and an Exchange failed processing on the consumer side,
         * and if the caused Exception was send back serialized in the response
         * as a application/x-java-serialized-object content type. On the
         * producer side the exception will be deserialized and thrown as is,
         * instead of the HttpOperationFailedException. The caused exception is
         * required to be serialized. This is by default turned off. If you
         * enable this then be aware that Java will deserialize the incoming
         * data from the request to Java and that can be a potential security
         * risk.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public T transferException(boolean transferException) {
            this.properties.put("transferException", transferException);
            return (T) this;
        }
        /**
         * If enabled and an Exchange failed processing on the consumer side,
         * and if the caused Exception was send back serialized in the response
         * as a application/x-java-serialized-object content type. On the
         * producer side the exception will be deserialized and thrown as is,
         * instead of the HttpOperationFailedException. The caused exception is
         * required to be serialized. This is by default turned off. If you
         * enable this then be aware that Java will deserialize the incoming
         * data from the request to Java and that can be a potential security
         * risk.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public T transferException(String transferException) {
            this.properties.put("transferException", transferException);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Provide access to the http client request parameters used on new
         * RequestConfig instances used by producers or consumers of this
         * endpoint.
         * The option is a
         * <code>org.apache.http.impl.client.HttpClientBuilder</code> type.
         * @group advanced
         */
        public T clientBuilder(Object clientBuilder) {
            this.properties.put("clientBuilder", clientBuilder);
            return (T) this;
        }
        /**
         * Provide access to the http client request parameters used on new
         * RequestConfig instances used by producers or consumers of this
         * endpoint.
         * The option will be converted to a
         * <code>org.apache.http.impl.client.HttpClientBuilder</code> type.
         * @group advanced
         */
        public T clientBuilder(String clientBuilder) {
            this.properties.put("clientBuilder", clientBuilder);
            return (T) this;
        }
        /**
         * To use a custom HttpClientConnectionManager to manage connections.
         * The option is a
         * <code>org.apache.http.conn.HttpClientConnectionManager</code> type.
         * @group advanced
         */
        public T clientConnectionManager(Object clientConnectionManager) {
            this.properties.put("clientConnectionManager", clientConnectionManager);
            return (T) this;
        }
        /**
         * To use a custom HttpClientConnectionManager to manage connections.
         * The option will be converted to a
         * <code>org.apache.http.conn.HttpClientConnectionManager</code> type.
         * @group advanced
         */
        public T clientConnectionManager(String clientConnectionManager) {
            this.properties.put("clientConnectionManager", clientConnectionManager);
            return (T) this;
        }
        /**
         * The maximum number of connections per route.
         * The option is a <code>int</code> type.
         * @group advanced
         */
        public T connectionsPerRoute(int connectionsPerRoute) {
            this.properties.put("connectionsPerRoute", connectionsPerRoute);
            return (T) this;
        }
        /**
         * The maximum number of connections per route.
         * The option will be converted to a <code>int</code> type.
         * @group advanced
         */
        public T connectionsPerRoute(String connectionsPerRoute) {
            this.properties.put("connectionsPerRoute", connectionsPerRoute);
            return (T) this;
        }
        /**
         * Sets a custom HttpClient to be used by the producer.
         * The option is a <code>org.apache.http.client.HttpClient</code> type.
         * @group advanced
         */
        public T httpClient(Object httpClient) {
            this.properties.put("httpClient", httpClient);
            return (T) this;
        }
        /**
         * Sets a custom HttpClient to be used by the producer.
         * The option will be converted to a
         * <code>org.apache.http.client.HttpClient</code> type.
         * @group advanced
         */
        public T httpClient(String httpClient) {
            this.properties.put("httpClient", httpClient);
            return (T) this;
        }
        /**
         * Register a custom configuration strategy for new HttpClient instances
         * created by producers or consumers such as to configure authentication
         * mechanisms etc.
         * The option is a
         * <code>org.apache.camel.component.http4.HttpClientConfigurer</code>
         * type.
         * @group advanced
         */
        public T httpClientConfigurer(Object httpClientConfigurer) {
            this.properties.put("httpClientConfigurer", httpClientConfigurer);
            return (T) this;
        }
        /**
         * Register a custom configuration strategy for new HttpClient instances
         * created by producers or consumers such as to configure authentication
         * mechanisms etc.
         * The option will be converted to a
         * <code>org.apache.camel.component.http4.HttpClientConfigurer</code>
         * type.
         * @group advanced
         */
        public T httpClientConfigurer(String httpClientConfigurer) {
            this.properties.put("httpClientConfigurer", httpClientConfigurer);
            return (T) this;
        }
        /**
         * To configure the HttpClient using the key/values from the Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        public T httpClientOptions(Map<String, Object> httpClientOptions) {
            this.properties.put("httpClientOptions", httpClientOptions);
            return (T) this;
        }
        /**
         * To configure the HttpClient using the key/values from the Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        public T httpClientOptions(String httpClientOptions) {
            this.properties.put("httpClientOptions", httpClientOptions);
            return (T) this;
        }
        /**
         * To use a custom HttpContext instance.
         * The option is a <code>org.apache.http.protocol.HttpContext</code>
         * type.
         * @group advanced
         */
        public T httpContext(Object httpContext) {
            this.properties.put("httpContext", httpContext);
            return (T) this;
        }
        /**
         * To use a custom HttpContext instance.
         * The option will be converted to a
         * <code>org.apache.http.protocol.HttpContext</code> type.
         * @group advanced
         */
        public T httpContext(String httpContext) {
            this.properties.put("httpContext", httpContext);
            return (T) this;
        }
        /**
         * If this option is true then IN exchange Body of the exchange will be
         * mapped to HTTP body. Setting this to false will avoid the HTTP
         * mapping.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T mapHttpMessageBody(boolean mapHttpMessageBody) {
            this.properties.put("mapHttpMessageBody", mapHttpMessageBody);
            return (T) this;
        }
        /**
         * If this option is true then IN exchange Body of the exchange will be
         * mapped to HTTP body. Setting this to false will avoid the HTTP
         * mapping.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T mapHttpMessageBody(String mapHttpMessageBody) {
            this.properties.put("mapHttpMessageBody", mapHttpMessageBody);
            return (T) this;
        }
        /**
         * If this option is true then IN exchange Form Encoded body of the
         * exchange will be mapped to HTTP. Setting this to false will avoid the
         * HTTP Form Encoded body mapping.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T mapHttpMessageFormUrlEncodedBody(
                boolean mapHttpMessageFormUrlEncodedBody) {
            this.properties.put("mapHttpMessageFormUrlEncodedBody", mapHttpMessageFormUrlEncodedBody);
            return (T) this;
        }
        /**
         * If this option is true then IN exchange Form Encoded body of the
         * exchange will be mapped to HTTP. Setting this to false will avoid the
         * HTTP Form Encoded body mapping.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T mapHttpMessageFormUrlEncodedBody(
                String mapHttpMessageFormUrlEncodedBody) {
            this.properties.put("mapHttpMessageFormUrlEncodedBody", mapHttpMessageFormUrlEncodedBody);
            return (T) this;
        }
        /**
         * If this option is true then IN exchange Headers of the exchange will
         * be mapped to HTTP headers. Setting this to false will avoid the HTTP
         * Headers mapping.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T mapHttpMessageHeaders(boolean mapHttpMessageHeaders) {
            this.properties.put("mapHttpMessageHeaders", mapHttpMessageHeaders);
            return (T) this;
        }
        /**
         * If this option is true then IN exchange Headers of the exchange will
         * be mapped to HTTP headers. Setting this to false will avoid the HTTP
         * Headers mapping.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T mapHttpMessageHeaders(String mapHttpMessageHeaders) {
            this.properties.put("mapHttpMessageHeaders", mapHttpMessageHeaders);
            return (T) this;
        }
        /**
         * The maximum number of connections.
         * The option is a <code>int</code> type.
         * @group advanced
         */
        public T maxTotalConnections(int maxTotalConnections) {
            this.properties.put("maxTotalConnections", maxTotalConnections);
            return (T) this;
        }
        /**
         * The maximum number of connections.
         * The option will be converted to a <code>int</code> type.
         * @group advanced
         */
        public T maxTotalConnections(String maxTotalConnections) {
            this.properties.put("maxTotalConnections", maxTotalConnections);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * To use System Properties as fallback for configuration.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T useSystemProperties(boolean useSystemProperties) {
            this.properties.put("useSystemProperties", useSystemProperties);
            return (T) this;
        }
        /**
         * To use System Properties as fallback for configuration.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T useSystemProperties(String useSystemProperties) {
            this.properties.put("useSystemProperties", useSystemProperties);
            return (T) this;
        }
        /**
         * To configure security using SSLContextParameters. Important: Only one
         * instance of org.apache.camel.util.jsse.SSLContextParameters is
         * supported per HttpComponent. If you need to use 2 or more different
         * instances, you need to define a new HttpComponent per instance you
         * need.
         * The option is a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        public T sslContextParameters(Object sslContextParameters) {
            this.properties.put("sslContextParameters", sslContextParameters);
            return (T) this;
        }
        /**
         * To configure security using SSLContextParameters. Important: Only one
         * instance of org.apache.camel.util.jsse.SSLContextParameters is
         * supported per HttpComponent. If you need to use 2 or more different
         * instances, you need to define a new HttpComponent per instance you
         * need.
         * The option will be converted to a
         * <code>org.apache.camel.support.jsse.SSLContextParameters</code> type.
         * @group security
         */
        public T sslContextParameters(String sslContextParameters) {
            this.properties.put("sslContextParameters", sslContextParameters);
            return (T) this;
        }
        /**
         * To use a custom X509HostnameVerifier such as DefaultHostnameVerifier
         * or org.apache.http.conn.ssl.NoopHostnameVerifier.
         * The option is a <code>javax.net.ssl.HostnameVerifier</code> type.
         * @group security
         */
        public T x509HostnameVerifier(Object x509HostnameVerifier) {
            this.properties.put("x509HostnameVerifier", x509HostnameVerifier);
            return (T) this;
        }
        /**
         * To use a custom X509HostnameVerifier such as DefaultHostnameVerifier
         * or org.apache.http.conn.ssl.NoopHostnameVerifier.
         * The option will be converted to a
         * <code>javax.net.ssl.HostnameVerifier</code> type.
         * @group security
         */
        public T x509HostnameVerifier(String x509HostnameVerifier) {
            this.properties.put("x509HostnameVerifier", x509HostnameVerifier);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint producers for the HTTP4 component.
     */
    public static class HttpProducerBuilder
            extends
                HttpCommonBuilder<HttpProducerBuilder>
            implements
                EndpointProducerBuilder {
        public HttpProducerBuilder(String path) {
            super(path);
        }
        /**
         * The url of the HTTP endpoint to call.
         * The option is a <code>java.net.URI</code> type.
         * @group producer
         */
        public HttpProducerBuilder httpUri(URI httpUri) {
            this.properties.put("httpUri", httpUri);
            return (HttpProducerBuilder) this;
        }
        /**
         * The url of the HTTP endpoint to call.
         * The option will be converted to a <code>java.net.URI</code> type.
         * @group producer
         */
        public HttpProducerBuilder httpUri(String httpUri) {
            this.properties.put("httpUri", httpUri);
            return (HttpProducerBuilder) this;
        }
        /**
         * If this option is true, camel-http4 sends preemptive basic
         * authentication to the server.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder authenticationPreemptive(
                boolean authenticationPreemptive) {
            this.properties.put("authenticationPreemptive", authenticationPreemptive);
            return (HttpProducerBuilder) this;
        }
        /**
         * If this option is true, camel-http4 sends preemptive basic
         * authentication to the server.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder authenticationPreemptive(
                String authenticationPreemptive) {
            this.properties.put("authenticationPreemptive", authenticationPreemptive);
            return (HttpProducerBuilder) this;
        }
        /**
         * If the option is true, HttpProducer will ignore the Exchange.HTTP_URI
         * header, and use the endpoint's URI for request. You may also set the
         * option throwExceptionOnFailure to be false to let the HttpProducer
         * send all the fault response back.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder bridgeEndpoint(boolean bridgeEndpoint) {
            this.properties.put("bridgeEndpoint", bridgeEndpoint);
            return (HttpProducerBuilder) this;
        }
        /**
         * If the option is true, HttpProducer will ignore the Exchange.HTTP_URI
         * header, and use the endpoint's URI for request. You may also set the
         * option throwExceptionOnFailure to be false to let the HttpProducer
         * send all the fault response back.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder bridgeEndpoint(String bridgeEndpoint) {
            this.properties.put("bridgeEndpoint", bridgeEndpoint);
            return (HttpProducerBuilder) this;
        }
        /**
         * Whether to clear expired cookies before sending the HTTP request.
         * This ensures the cookies store does not keep growing by adding new
         * cookies which is newer removed when they are expired.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder clearExpiredCookies(
                boolean clearExpiredCookies) {
            this.properties.put("clearExpiredCookies", clearExpiredCookies);
            return (HttpProducerBuilder) this;
        }
        /**
         * Whether to clear expired cookies before sending the HTTP request.
         * This ensures the cookies store does not keep growing by adding new
         * cookies which is newer removed when they are expired.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder clearExpiredCookies(
                String clearExpiredCookies) {
            this.properties.put("clearExpiredCookies", clearExpiredCookies);
            return (HttpProducerBuilder) this;
        }
        /**
         * Specifies whether a Connection Close header must be added to HTTP
         * Request. By default connectionClose is false.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder connectionClose(boolean connectionClose) {
            this.properties.put("connectionClose", connectionClose);
            return (HttpProducerBuilder) this;
        }
        /**
         * Specifies whether a Connection Close header must be added to HTTP
         * Request. By default connectionClose is false.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder connectionClose(String connectionClose) {
            this.properties.put("connectionClose", connectionClose);
            return (HttpProducerBuilder) this;
        }
        /**
         * To use a custom CookieStore. By default the BasicCookieStore is used
         * which is an in-memory only cookie store. Notice if
         * bridgeEndpoint=true then the cookie store is forced to be a noop
         * cookie store as cookie shouldn't be stored as we are just bridging
         * (eg acting as a proxy). If a cookieHandler is set then the cookie
         * store is also forced to be a noop cookie store as cookie handling is
         * then performed by the cookieHandler.
         * The option is a <code>org.apache.http.client.CookieStore</code> type.
         * @group producer
         */
        public HttpProducerBuilder cookieStore(Object cookieStore) {
            this.properties.put("cookieStore", cookieStore);
            return (HttpProducerBuilder) this;
        }
        /**
         * To use a custom CookieStore. By default the BasicCookieStore is used
         * which is an in-memory only cookie store. Notice if
         * bridgeEndpoint=true then the cookie store is forced to be a noop
         * cookie store as cookie shouldn't be stored as we are just bridging
         * (eg acting as a proxy). If a cookieHandler is set then the cookie
         * store is also forced to be a noop cookie store as cookie handling is
         * then performed by the cookieHandler.
         * The option will be converted to a
         * <code>org.apache.http.client.CookieStore</code> type.
         * @group producer
         */
        public HttpProducerBuilder cookieStore(String cookieStore) {
            this.properties.put("cookieStore", cookieStore);
            return (HttpProducerBuilder) this;
        }
        /**
         * If this option is true then IN exchange headers will be copied to OUT
         * exchange headers according to copy strategy. Setting this to false,
         * allows to only include the headers from the HTTP response (not
         * propagating IN headers).
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder copyHeaders(boolean copyHeaders) {
            this.properties.put("copyHeaders", copyHeaders);
            return (HttpProducerBuilder) this;
        }
        /**
         * If this option is true then IN exchange headers will be copied to OUT
         * exchange headers according to copy strategy. Setting this to false,
         * allows to only include the headers from the HTTP response (not
         * propagating IN headers).
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder copyHeaders(String copyHeaders) {
            this.properties.put("copyHeaders", copyHeaders);
            return (HttpProducerBuilder) this;
        }
        /**
         * Whether the HTTP DELETE should include the message body or not. By
         * default HTTP DELETE do not include any HTTP message. However in some
         * rare cases users may need to be able to include the message body.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder deleteWithBody(boolean deleteWithBody) {
            this.properties.put("deleteWithBody", deleteWithBody);
            return (HttpProducerBuilder) this;
        }
        /**
         * Whether the HTTP DELETE should include the message body or not. By
         * default HTTP DELETE do not include any HTTP message. However in some
         * rare cases users may need to be able to include the message body.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder deleteWithBody(String deleteWithBody) {
            this.properties.put("deleteWithBody", deleteWithBody);
            return (HttpProducerBuilder) this;
        }
        /**
         * Configure the HTTP method to use. The HttpMethod header cannot
         * override this option if set.
         * The option is a <code>org.apache.camel.http.common.HttpMethods</code>
         * type.
         * @group producer
         */
        public HttpProducerBuilder httpMethod(HttpMethods httpMethod) {
            this.properties.put("httpMethod", httpMethod);
            return (HttpProducerBuilder) this;
        }
        /**
         * Configure the HTTP method to use. The HttpMethod header cannot
         * override this option if set.
         * The option will be converted to a
         * <code>org.apache.camel.http.common.HttpMethods</code> type.
         * @group producer
         */
        public HttpProducerBuilder httpMethod(String httpMethod) {
            this.properties.put("httpMethod", httpMethod);
            return (HttpProducerBuilder) this;
        }
        /**
         * If this option is true, The http producer won't read response body
         * and cache the input stream.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder ignoreResponseBody(boolean ignoreResponseBody) {
            this.properties.put("ignoreResponseBody", ignoreResponseBody);
            return (HttpProducerBuilder) this;
        }
        /**
         * If this option is true, The http producer won't read response body
         * and cache the input stream.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder ignoreResponseBody(String ignoreResponseBody) {
            this.properties.put("ignoreResponseBody", ignoreResponseBody);
            return (HttpProducerBuilder) this;
        }
        /**
         * If the option is true, HttpProducer will set the Host header to the
         * value contained in the current exchange Host header, useful in
         * reverse proxy applications where you want the Host header received by
         * the downstream server to reflect the URL called by the upstream
         * client, this allows applications which use the Host header to
         * generate accurate URL's for a proxied service.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder preserveHostHeader(boolean preserveHostHeader) {
            this.properties.put("preserveHostHeader", preserveHostHeader);
            return (HttpProducerBuilder) this;
        }
        /**
         * If the option is true, HttpProducer will set the Host header to the
         * value contained in the current exchange Host header, useful in
         * reverse proxy applications where you want the Host header received by
         * the downstream server to reflect the URL called by the upstream
         * client, this allows applications which use the Host header to
         * generate accurate URL's for a proxied service.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder preserveHostHeader(String preserveHostHeader) {
            this.properties.put("preserveHostHeader", preserveHostHeader);
            return (HttpProducerBuilder) this;
        }
        /**
         * Option to disable throwing the HttpOperationFailedException in case
         * of failed responses from the remote server. This allows you to get
         * all responses regardless of the HTTP status code.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder throwExceptionOnFailure(
                boolean throwExceptionOnFailure) {
            this.properties.put("throwExceptionOnFailure", throwExceptionOnFailure);
            return (HttpProducerBuilder) this;
        }
        /**
         * Option to disable throwing the HttpOperationFailedException in case
         * of failed responses from the remote server. This allows you to get
         * all responses regardless of the HTTP status code.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public HttpProducerBuilder throwExceptionOnFailure(
                String throwExceptionOnFailure) {
            this.properties.put("throwExceptionOnFailure", throwExceptionOnFailure);
            return (HttpProducerBuilder) this;
        }
        /**
         * Configure a cookie handler to maintain a HTTP session.
         * The option is a
         * <code>org.apache.camel.http.common.cookie.CookieHandler</code> type.
         * @group producer (advanced)
         */
        public HttpProducerBuilder cookieHandler(Object cookieHandler) {
            this.properties.put("cookieHandler", cookieHandler);
            return (HttpProducerBuilder) this;
        }
        /**
         * Configure a cookie handler to maintain a HTTP session.
         * The option will be converted to a
         * <code>org.apache.camel.http.common.cookie.CookieHandler</code> type.
         * @group producer (advanced)
         */
        public HttpProducerBuilder cookieHandler(String cookieHandler) {
            this.properties.put("cookieHandler", cookieHandler);
            return (HttpProducerBuilder) this;
        }
        /**
         * The status codes which are considered a success response. The values
         * are inclusive. Multiple ranges can be defined, separated by comma,
         * e.g. 200-204,209,301-304. Each range must be a single number or
         * from-to with the dash included.
         * The option is a <code>java.lang.String</code> type.
         * @group producer (advanced)
         */
        public HttpProducerBuilder okStatusCodeRange(String okStatusCodeRange) {
            this.properties.put("okStatusCodeRange", okStatusCodeRange);
            return (HttpProducerBuilder) this;
        }
        /**
         * Refers to a custom org.apache.camel.component.http.UrlRewrite which
         * allows you to rewrite urls when you bridge/proxy endpoints. See more
         * details at http://camel.apache.org/urlrewrite.html.
         * The option is a <code>org.apache.camel.http.common.UrlRewrite</code>
         * type.
         * @group producer (advanced)
         */
        @Deprecated
        public HttpProducerBuilder urlRewrite(Object urlRewrite) {
            this.properties.put("urlRewrite", urlRewrite);
            return (HttpProducerBuilder) this;
        }
        /**
         * Refers to a custom org.apache.camel.component.http.UrlRewrite which
         * allows you to rewrite urls when you bridge/proxy endpoints. See more
         * details at http://camel.apache.org/urlrewrite.html.
         * The option will be converted to a
         * <code>org.apache.camel.http.common.UrlRewrite</code> type.
         * @group producer (advanced)
         */
        @Deprecated
        public HttpProducerBuilder urlRewrite(String urlRewrite) {
            this.properties.put("urlRewrite", urlRewrite);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy authentication domain to use with NTML.
         * The option is a <code>java.lang.String</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyAuthDomain(String proxyAuthDomain) {
            this.properties.put("proxyAuthDomain", proxyAuthDomain);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy authentication host.
         * The option is a <code>java.lang.String</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyAuthHost(String proxyAuthHost) {
            this.properties.put("proxyAuthHost", proxyAuthHost);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy authentication method to use.
         * The option is a <code>java.lang.String</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyAuthMethod(String proxyAuthMethod) {
            this.properties.put("proxyAuthMethod", proxyAuthMethod);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy authentication password.
         * The option is a <code>java.lang.String</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyAuthPassword(String proxyAuthPassword) {
            this.properties.put("proxyAuthPassword", proxyAuthPassword);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy authentication port.
         * The option is a <code>int</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyAuthPort(int proxyAuthPort) {
            this.properties.put("proxyAuthPort", proxyAuthPort);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy authentication port.
         * The option will be converted to a <code>int</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyAuthPort(String proxyAuthPort) {
            this.properties.put("proxyAuthPort", proxyAuthPort);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy authentication scheme to use.
         * The option is a <code>java.lang.String</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyAuthScheme(String proxyAuthScheme) {
            this.properties.put("proxyAuthScheme", proxyAuthScheme);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy authentication username.
         * The option is a <code>java.lang.String</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyAuthUsername(String proxyAuthUsername) {
            this.properties.put("proxyAuthUsername", proxyAuthUsername);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy hostname to use.
         * The option is a <code>java.lang.String</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyHost(String proxyHost) {
            this.properties.put("proxyHost", proxyHost);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy port to use.
         * The option is a <code>int</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyPort(int proxyPort) {
            this.properties.put("proxyPort", proxyPort);
            return (HttpProducerBuilder) this;
        }
        /**
         * Proxy port to use.
         * The option will be converted to a <code>int</code> type.
         * @group proxy
         */
        public HttpProducerBuilder proxyPort(String proxyPort) {
            this.properties.put("proxyPort", proxyPort);
            return (HttpProducerBuilder) this;
        }
        /**
         * Authentication domain to use with NTML.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        public HttpProducerBuilder authDomain(String authDomain) {
            this.properties.put("authDomain", authDomain);
            return (HttpProducerBuilder) this;
        }
        /**
         * Authentication host to use with NTML.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        public HttpProducerBuilder authHost(String authHost) {
            this.properties.put("authHost", authHost);
            return (HttpProducerBuilder) this;
        }
        /**
         * Authentication methods allowed to use as a comma separated list of
         * values Basic, Digest or NTLM.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        public HttpProducerBuilder authMethod(String authMethod) {
            this.properties.put("authMethod", authMethod);
            return (HttpProducerBuilder) this;
        }
        /**
         * Which authentication method to prioritize to use, either as Basic,
         * Digest or NTLM.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        public HttpProducerBuilder authMethodPriority(String authMethodPriority) {
            this.properties.put("authMethodPriority", authMethodPriority);
            return (HttpProducerBuilder) this;
        }
        /**
         * Authentication password.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        public HttpProducerBuilder authPassword(String authPassword) {
            this.properties.put("authPassword", authPassword);
            return (HttpProducerBuilder) this;
        }
        /**
         * Authentication username.
         * The option is a <code>java.lang.String</code> type.
         * @group security
         */
        public HttpProducerBuilder authUsername(String authUsername) {
            this.properties.put("authUsername", authUsername);
            return (HttpProducerBuilder) this;
        }
    }

    /**
     * Proxy enum for <code>org.apache.camel.http.common.HttpMethods</code>
     * enum.
     */
    public static enum HttpMethods {
        GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, PATCH;
    }
    /**
     * For calling out to external HTTP servers using Apache HTTP Client 4.x.
     * Creates a builder to build a producer endpoint for the HTTP4 component.
     */
    public default HttpProducerBuilder toHttp(String path) {
        return new HttpProducerBuilder(path);
    }
}