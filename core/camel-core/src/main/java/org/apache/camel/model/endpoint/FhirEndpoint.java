/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The fhir component is used for working with the FHIR protocol (health care).
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class FhirEndpoint {


    public static class FhirCommon extends EndpointConfiguration {
        /**
         * What kind of operation to perform. The option is a
         * org.apache.camel.component.fhir.internal.FhirApiName type.
         */
        private FhirApiName apiName;
        /**
         * What sub operation to use for the selected operation. The option is a
         * java.lang.String type.
         */
        private String methodName;
        /**
         * Encoding to use for all request. The option is a java.lang.String
         * type.
         */
        private EncodingEnum encoding;
        /**
         * The FHIR Version to use. The option is a java.lang.String type.
         */
        private FhirVersionEnum fhirVersion;
        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * The option is a java.lang.String type.
         */
        private String inBody;
        /**
         * Will log every requests and responses. The option is a boolean type.
         */
        private Boolean log;
        /**
         * Pretty print all request. The option is a boolean type.
         */
        private Boolean prettyPrint;
        /**
         * The FHIR server base URL. The option is a java.lang.String type.
         */
        private String serverUrl;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Compresses outgoing (POST/PUT) contents to the GZIP format. The
         * option is a boolean type.
         */
        private Boolean compress;
        /**
         * How long to try and establish the initial TCP connection (in ms). The
         * option is a java.lang.Integer type.
         */
        private Integer connectionTimeout;
        /**
         * When this option is set, model classes will not be scanned for
         * children until the child list for the given type is actually
         * accessed. The option is a boolean type.
         */
        private Boolean deferModelScanning;
        /**
         * FhirContext is an expensive object to create. To avoid creating
         * multiple instances, it can be set directly. The option is a
         * ca.uhn.fhir.context.FhirContext type.
         */
        private Object fhirContext;
        /**
         * Force conformance check. The option is a boolean type.
         */
        private Boolean forceConformanceCheck;
        /**
         * HTTP session cookie to add to every request. The option is a
         * java.lang.String type.
         */
        private String sessionCookie;
        /**
         * How long to block for individual read/write operations (in ms). The
         * option is a java.lang.Integer type.
         */
        private Integer socketTimeout;
        /**
         * Request that the server modify the response using the _summary param.
         * The option is a java.lang.String type.
         */
        private SummaryEnum summary;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;
        /**
         * When should Camel validate the FHIR Server's conformance statement.
         * The option is a java.lang.String type.
         */
        private ServerValidationModeEnum validationMode;
        /**
         * The proxy host. The option is a java.lang.String type.
         */
        private String proxyHost;
        /**
         * The proxy password. The option is a java.lang.String type.
         */
        private String proxyPassword;
        /**
         * The proxy port. The option is a java.lang.Integer type.
         */
        private Integer proxyPort;
        /**
         * The proxy username. The option is a java.lang.String type.
         */
        private String proxyUser;
        /**
         * OAuth access token. The option is a java.lang.String type.
         */
        private String accessToken;
        /**
         * Username to use for basic authentication. The option is a
         * java.lang.String type.
         */
        private String password;
        /**
         * Username to use for basic authentication. The option is a
         * java.lang.String type.
         */
        private String username;

        public FhirApiName getApiName() {
            return apiName;
        }

        public void setApiName(FhirApiName apiName) {
            this.apiName = apiName;
        }

        public String getMethodName() {
            return methodName;
        }

        public void setMethodName(String methodName) {
            this.methodName = methodName;
        }

        public EncodingEnum getEncoding() {
            return encoding;
        }

        public void setEncoding(EncodingEnum encoding) {
            this.encoding = encoding;
        }

        public FhirVersionEnum getFhirVersion() {
            return fhirVersion;
        }

        public void setFhirVersion(FhirVersionEnum fhirVersion) {
            this.fhirVersion = fhirVersion;
        }

        public String getInBody() {
            return inBody;
        }

        public void setInBody(String inBody) {
            this.inBody = inBody;
        }

        public Boolean getLog() {
            return log;
        }

        public void setLog(Boolean log) {
            this.log = log;
        }

        public Boolean getPrettyPrint() {
            return prettyPrint;
        }

        public void setPrettyPrint(Boolean prettyPrint) {
            this.prettyPrint = prettyPrint;
        }

        public String getServerUrl() {
            return serverUrl;
        }

        public void setServerUrl(String serverUrl) {
            this.serverUrl = serverUrl;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getCompress() {
            return compress;
        }

        public void setCompress(Boolean compress) {
            this.compress = compress;
        }

        public Integer getConnectionTimeout() {
            return connectionTimeout;
        }

        public void setConnectionTimeout(Integer connectionTimeout) {
            this.connectionTimeout = connectionTimeout;
        }

        public Boolean getDeferModelScanning() {
            return deferModelScanning;
        }

        public void setDeferModelScanning(Boolean deferModelScanning) {
            this.deferModelScanning = deferModelScanning;
        }

        public Object getFhirContext() {
            return fhirContext;
        }

        public void setFhirContext(Object fhirContext) {
            this.fhirContext = fhirContext;
        }

        public Boolean getForceConformanceCheck() {
            return forceConformanceCheck;
        }

        public void setForceConformanceCheck(Boolean forceConformanceCheck) {
            this.forceConformanceCheck = forceConformanceCheck;
        }

        public String getSessionCookie() {
            return sessionCookie;
        }

        public void setSessionCookie(String sessionCookie) {
            this.sessionCookie = sessionCookie;
        }

        public Integer getSocketTimeout() {
            return socketTimeout;
        }

        public void setSocketTimeout(Integer socketTimeout) {
            this.socketTimeout = socketTimeout;
        }

        public SummaryEnum getSummary() {
            return summary;
        }

        public void setSummary(SummaryEnum summary) {
            this.summary = summary;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public ServerValidationModeEnum getValidationMode() {
            return validationMode;
        }

        public void setValidationMode(ServerValidationModeEnum validationMode) {
            this.validationMode = validationMode;
        }

        public String getProxyHost() {
            return proxyHost;
        }

        public void setProxyHost(String proxyHost) {
            this.proxyHost = proxyHost;
        }

        public String getProxyPassword() {
            return proxyPassword;
        }

        public void setProxyPassword(String proxyPassword) {
            this.proxyPassword = proxyPassword;
        }

        public Integer getProxyPort() {
            return proxyPort;
        }

        public void setProxyPort(Integer proxyPort) {
            this.proxyPort = proxyPort;
        }

        public String getProxyUser() {
            return proxyUser;
        }

        public void setProxyUser(String proxyUser) {
            this.proxyUser = proxyUser;
        }

        public String getAccessToken() {
            return accessToken;
        }

        public void setAccessToken(String accessToken) {
            this.accessToken = accessToken;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }
    }

    public static class FhirConsumer extends FhirCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private Boolean bridgeErrorHandler;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class FhirProducer extends FhirCommon {
    }

    public static enum FhirApiName {
        CAPABILITIES, CREATE, DELETE, HISTORY, LOAD_PAGE, META, OPERATION, PATCH, READ, SEARCH, TRANSACTION, UPDATE, VALIDATE;
    }

    public static enum EncodingEnum {
        JSON,  XML;
    }

    public static enum FhirVersionEnum {
        DSTU2,  DSTU2_HL7ORG,  DSTU2_1,  DSTU3,  R4;
    }

    public static enum SummaryEnum {
        TRUE,  FALSE,  TEXT,  DATA,  COUNT;
    }

    public static enum ServerValidationModeEnum {
        NEVER,  ONCE;
    }
}