/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The cometd component is a transport for working with the Jetty implementation
 * of the cometd/bayeux protocol.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class CometdEndpoint {


    public static class CometdCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        CometdCommon(String path) {
            super("cometd", path);
        }
        /**
         * Hostname. The option is a java.lang.String type.
         */
        public T host(String host) {
            this.properties.put("host", host);
            return (T) this;
        }
        /**
         * Host port number. The option is a int type.
         */
        public T port(int port) {
            this.properties.put("port", port);
            return (T) this;
        }
        /**
         * The channelName represents a topic that can be subscribed to by the
         * Camel endpoints. The option is a java.lang.String type.
         */
        public T channelName(String channelName) {
            this.properties.put("channelName", channelName);
            return (T) this;
        }
        /**
         * The origins domain that support to cross, if the crosssOriginFilterOn
         * is true. The option is a java.lang.String type.
         */
        public T allowedOrigins(String allowedOrigins) {
            this.properties.put("allowedOrigins", allowedOrigins);
            return (T) this;
        }
        /**
         * The root directory for the web resources or classpath. Use the
         * protocol file: or classpath: depending if you want that the component
         * loads the resource from file system or classpath. Classpath is
         * required for OSGI deployment where the resources are packaged in the
         * jar. The option is a java.lang.String type.
         */
        public T baseResource(String baseResource) {
            this.properties.put("baseResource", baseResource);
            return (T) this;
        }
        /**
         * If true, the server will support for cross-domain filtering. The
         * option is a boolean type.
         */
        public T crossOriginFilterOn(boolean crossOriginFilterOn) {
            this.properties.put("crossOriginFilterOn", crossOriginFilterOn);
            return (T) this;
        }
        /**
         * The filterPath will be used by the CrossOriginFilter, if the
         * crosssOriginFilterOn is true. The option is a java.lang.String type.
         */
        public T filterPath(String filterPath) {
            this.properties.put("filterPath", filterPath);
            return (T) this;
        }
        /**
         * The client side poll timeout in milliseconds. How long a client will
         * wait between reconnects. The option is a int type.
         */
        public T interval(int interval) {
            this.properties.put("interval", interval);
            return (T) this;
        }
        /**
         * If true, the server will accept JSON wrapped in a comment and will
         * generate JSON wrapped in a comment. This is a defence against Ajax
         * Hijacking. The option is a boolean type.
         */
        public T jsonCommented(boolean jsonCommented) {
            this.properties.put("jsonCommented", jsonCommented);
            return (T) this;
        }
        /**
         * Logging level. 0=none, 1=info, 2=debug. The option is a int type.
         */
        public T logLevel(int logLevel) {
            this.properties.put("logLevel", logLevel);
            return (T) this;
        }
        /**
         * The max client side poll timeout in milliseconds. A client will be
         * removed if a connection is not received in this time. The option is a
         * int type.
         */
        public T maxInterval(int maxInterval) {
            this.properties.put("maxInterval", maxInterval);
            return (T) this;
        }
        /**
         * The client side poll timeout, if multiple connections are detected
         * from the same browser. The option is a int type.
         */
        public T multiFrameInterval(int multiFrameInterval) {
            this.properties.put("multiFrameInterval", multiFrameInterval);
            return (T) this;
        }
        /**
         * The server side poll timeout in milliseconds. This is how long the
         * server will hold a reconnect request before responding. The option is
         * a int type.
         */
        public T timeout(int timeout) {
            this.properties.put("timeout", timeout);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class CometdConsumer
            extends
                CometdCommon<CometdConsumer>
            implements
                EndpointDefinition.Consumer {
        public CometdConsumer(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public CometdConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (CometdConsumer) this;
        }
        /**
         * Whether to include the server session headers in the Camel message
         * when creating a Camel Message for incoming requests. The option is a
         * boolean type.
         */
        public CometdConsumer sessionHeadersEnabled(
                boolean sessionHeadersEnabled) {
            this.properties.put("sessionHeadersEnabled", sessionHeadersEnabled);
            return (CometdConsumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public CometdConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (CometdConsumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public CometdConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (CometdConsumer) this;
        }
    }

    public static class CometdProducer
            extends
                CometdCommon<CometdProducer>
            implements
                EndpointDefinition.Producer {
        public CometdProducer(String path) {
            super(path);
        }
        /**
         * Whether to disconnect local sessions after publishing a message to
         * its channel. Disconnecting local session is needed as they are not
         * swept by default by CometD, and therefore you can run out of memory.
         * The option is a boolean type.
         */
        public CometdProducer disconnectLocalSession(
                boolean disconnectLocalSession) {
            this.properties.put("disconnectLocalSession", disconnectLocalSession);
            return (CometdProducer) this;
        }
    }
}