/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;

/**
 * The DigitalOcean component allows you to manage Droplets and resources within
 * the DigitalOcean cloud.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface DigitalOceanEndpointBuilder {


    public static class DigitalOceanCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        DigitalOceanCommonBuilder(String path) {
            super("digitalocean", path);
        }
        /**
         * The operation to perform to the given resource. The option is a
         * org.apache.camel.component.digitalocean.constants.DigitalOceanOperations type.
         */
        public T operation(DigitalOceanOperations operation) {
            this.properties.put("operation", operation);
            return (T) this;
        }
        /**
         * The operation to perform to the given resource. The option will be
         * converted to a
         * org.apache.camel.component.digitalocean.constants.DigitalOceanOperations type.
         */
        public T operation(String operation) {
            this.properties.put("operation", operation);
            return (T) this;
        }
        /**
         * Use for pagination. Force the page number. The option is a
         * java.lang.Integer type.
         */
        public T page(Integer page) {
            this.properties.put("page", page);
            return (T) this;
        }
        /**
         * Use for pagination. Force the page number. The option will be
         * converted to a java.lang.Integer type.
         */
        public T page(String page) {
            this.properties.put("page", page);
            return (T) this;
        }
        /**
         * Use for pagination. Set the number of item per request. The maximum
         * number of results per page is 200. The option is a java.lang.Integer
         * type.
         */
        public T perPage(Integer perPage) {
            this.properties.put("perPage", perPage);
            return (T) this;
        }
        /**
         * Use for pagination. Set the number of item per request. The maximum
         * number of results per page is 200. The option will be converted to a
         * java.lang.Integer type.
         */
        public T perPage(String perPage) {
            this.properties.put("perPage", perPage);
            return (T) this;
        }
        /**
         * The DigitalOcean resource type on which perform the operation. The
         * option is a
         * org.apache.camel.component.digitalocean.constants.DigitalOceanResources type.
         */
        public T resource(DigitalOceanResources resource) {
            this.properties.put("resource", resource);
            return (T) this;
        }
        /**
         * The DigitalOcean resource type on which perform the operation. The
         * option will be converted to a
         * org.apache.camel.component.digitalocean.constants.DigitalOceanResources type.
         */
        public T resource(String resource) {
            this.properties.put("resource", resource);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a boolean type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * To use a existing configured DigitalOceanClient as client. The option
         * is a com.myjeeva.digitalocean.impl.DigitalOceanClient type.
         */
        public T digitalOceanClient(Object digitalOceanClient) {
            this.properties.put("digitalOceanClient", digitalOceanClient);
            return (T) this;
        }
        /**
         * To use a existing configured DigitalOceanClient as client. The option
         * will be converted to a
         * com.myjeeva.digitalocean.impl.DigitalOceanClient type.
         */
        public T digitalOceanClient(String digitalOceanClient) {
            this.properties.put("digitalOceanClient", digitalOceanClient);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a boolean type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Set a proxy host if needed. The option is a java.lang.String type.
         */
        public T httpProxyHost(String httpProxyHost) {
            this.properties.put("httpProxyHost", httpProxyHost);
            return (T) this;
        }
        /**
         * Set a proxy password if needed. The option is a java.lang.String
         * type.
         */
        public T httpProxyPassword(String httpProxyPassword) {
            this.properties.put("httpProxyPassword", httpProxyPassword);
            return (T) this;
        }
        /**
         * Set a proxy port if needed. The option is a java.lang.Integer type.
         */
        public T httpProxyPort(Integer httpProxyPort) {
            this.properties.put("httpProxyPort", httpProxyPort);
            return (T) this;
        }
        /**
         * Set a proxy port if needed. The option will be converted to a
         * java.lang.Integer type.
         */
        public T httpProxyPort(String httpProxyPort) {
            this.properties.put("httpProxyPort", httpProxyPort);
            return (T) this;
        }
        /**
         * Set a proxy host if needed. The option is a java.lang.String type.
         */
        public T httpProxyUser(String httpProxyUser) {
            this.properties.put("httpProxyUser", httpProxyUser);
            return (T) this;
        }
        /**
         * DigitalOcean OAuth Token. The option is a java.lang.String type.
         */
        public T oAuthToken(String oAuthToken) {
            this.properties.put("oAuthToken", oAuthToken);
            return (T) this;
        }
    }

    public static class DigitalOceanProducerBuilder
            extends
                DigitalOceanCommonBuilder<DigitalOceanProducerBuilder>
            implements
                EndpointProducerBuilder {
        public DigitalOceanProducerBuilder(String path) {
            super(path);
        }
    }

    public static enum DigitalOceanOperations {
        create, update, delete, list, ownList, get, listBackups, listActions, listNeighbors, listSnapshots, listKernels, listAllNeighbors, enableBackups, disableBackups, reboot, powerCycle, shutdown, powerOn, powerOff, restore, resetPassword, resize, rebuild, rename, changeKernel, enableIpv6, enablePrivateNetworking, takeSnapshot, transfer, convert, attach, detach, assign, unassign, tag, untag;
    }

    public static enum DigitalOceanResources {
        account, actions, blockStorages, droplets, mages, snapshots, keys, regions, sizes, floatingIPs, tags;
    }
    public default DigitalOceanProducerBuilder toDigitalOcean(String path) {
        return new DigitalOceanProducerBuilder(path);
    }
}