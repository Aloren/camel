/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URI;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.spi.HeaderFilterStrategy;

/**
 * For calling out to external HTTP servers using Apache HTTP Client 4.x.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class HttpEndpoint {


    public static class HttpCommon extends EndpointConfiguration {
        /**
         * Determines whether or not the raw input stream from Servlet is cached
         * or not (Camel will read the stream into a in memory/overflow to file,
         * Stream caching) cache. By default Camel will cache the Servlet input
         * stream to support reading it multiple times to ensure it Camel can
         * retrieve all data from the stream. However you can set this option to
         * true when you for example need to access the raw stream, such as
         * streaming it directly to a file or other persistent store.
         * DefaultHttpBinding will copy the request input stream into a stream
         * cache and put it into message body if this option is false to support
         * reading the stream multiple times. If you use Servlet to bridge/proxy
         * an endpoint then consider enabling this option to improve
         * performance, in case you do not need to read the message payload
         * multiple times. The http/http4 producer will by default cache the
         * response body stream. If setting this option to true, then the
         * producers will not cache the response body stream but use the
         * response stream as-is as the message body. The option is a boolean
         * type.
         */
        private boolean disableStreamCache;
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message. The option is a
         * org.apache.camel.spi.HeaderFilterStrategy type.
         */
        private HeaderFilterStrategy headerFilterStrategy;
        /**
         * To use a custom HttpBinding to control the mapping between Camel
         * message and HttpClient. The option is a
         * org.apache.camel.http.common.HttpBinding type.
         */
        private Object httpBinding;
        /**
         * If this option is false the Servlet will disable the HTTP streaming
         * and set the content-length header on the response. The option is a
         * boolean type.
         */
        private boolean chunked;
        /**
         * If enabled and an Exchange failed processing on the consumer side,
         * and if the caused Exception was send back serialized in the response
         * as a application/x-java-serialized-object content type. On the
         * producer side the exception will be deserialized and thrown as is,
         * instead of the HttpOperationFailedException. The caused exception is
         * required to be serialized. This is by default turned off. If you
         * enable this then be aware that Java will deserialize the incoming
         * data from the request to Java and that can be a potential security
         * risk. The option is a boolean type.
         */
        private boolean transferException;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Provide access to the http client request parameters used on new
         * RequestConfig instances used by producers or consumers of this
         * endpoint. The option is a
         * org.apache.http.impl.client.HttpClientBuilder type.
         */
        private Object clientBuilder;
        /**
         * To use a custom HttpClientConnectionManager to manage connections.
         * The option is a org.apache.http.conn.HttpClientConnectionManager
         * type.
         */
        private Object clientConnectionManager;
        /**
         * The maximum number of connections per route. The option is a int
         * type.
         */
        private int connectionsPerRoute;
        /**
         * Sets a custom HttpClient to be used by the producer. The option is a
         * org.apache.http.client.HttpClient type.
         */
        private Object httpClient;
        /**
         * Register a custom configuration strategy for new HttpClient instances
         * created by producers or consumers such as to configure authentication
         * mechanisms etc. The option is a
         * org.apache.camel.component.http4.HttpClientConfigurer type.
         */
        private Object httpClientConfigurer;
        /**
         * To configure the HttpClient using the key/values from the Map. The
         * option is a java.util.Map<java.lang.String,java.lang.Object> type.
         */
        private Map<String, Object> httpClientOptions;
        /**
         * To use a custom HttpContext instance. The option is a
         * org.apache.http.protocol.HttpContext type.
         */
        private Object httpContext;
        /**
         * If this option is true then IN exchange Body of the exchange will be
         * mapped to HTTP body. Setting this to false will avoid the HTTP
         * mapping. The option is a boolean type.
         */
        private boolean mapHttpMessageBody;
        /**
         * If this option is true then IN exchange Form Encoded body of the
         * exchange will be mapped to HTTP. Setting this to false will avoid the
         * HTTP Form Encoded body mapping. The option is a boolean type.
         */
        private boolean mapHttpMessageFormUrlEncodedBody;
        /**
         * If this option is true then IN exchange Headers of the exchange will
         * be mapped to HTTP headers. Setting this to false will avoid the HTTP
         * Headers mapping. The option is a boolean type.
         */
        private boolean mapHttpMessageHeaders;
        /**
         * The maximum number of connections. The option is a int type.
         */
        private int maxTotalConnections;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * To use System Properties as fallback for configuration. The option is
         * a boolean type.
         */
        private boolean useSystemProperties;
        /**
         * To configure security using SSLContextParameters. Important: Only one
         * instance of org.apache.camel.util.jsse.SSLContextParameters is
         * supported per HttpComponent. If you need to use 2 or more different
         * instances, you need to define a new HttpComponent per instance you
         * need. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        private Object sslContextParameters;
        /**
         * To use a custom X509HostnameVerifier such as DefaultHostnameVerifier
         * or org.apache.http.conn.ssl.NoopHostnameVerifier. The option is a
         * javax.net.ssl.HostnameVerifier type.
         */
        private Object x509HostnameVerifier;

        public boolean getDisableStreamCache() {
            return disableStreamCache;
        }

        public void setDisableStreamCache(boolean disableStreamCache) {
            this.disableStreamCache = disableStreamCache;
        }

        public HeaderFilterStrategy getHeaderFilterStrategy() {
            return headerFilterStrategy;
        }

        public void setHeaderFilterStrategy(
                HeaderFilterStrategy headerFilterStrategy) {
            this.headerFilterStrategy = headerFilterStrategy;
        }

        public Object getHttpBinding() {
            return httpBinding;
        }

        public void setHttpBinding(Object httpBinding) {
            this.httpBinding = httpBinding;
        }

        public boolean getChunked() {
            return chunked;
        }

        public void setChunked(boolean chunked) {
            this.chunked = chunked;
        }

        public boolean getTransferException() {
            return transferException;
        }

        public void setTransferException(boolean transferException) {
            this.transferException = transferException;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Object getClientBuilder() {
            return clientBuilder;
        }

        public void setClientBuilder(Object clientBuilder) {
            this.clientBuilder = clientBuilder;
        }

        public Object getClientConnectionManager() {
            return clientConnectionManager;
        }

        public void setClientConnectionManager(Object clientConnectionManager) {
            this.clientConnectionManager = clientConnectionManager;
        }

        public int getConnectionsPerRoute() {
            return connectionsPerRoute;
        }

        public void setConnectionsPerRoute(int connectionsPerRoute) {
            this.connectionsPerRoute = connectionsPerRoute;
        }

        public Object getHttpClient() {
            return httpClient;
        }

        public void setHttpClient(Object httpClient) {
            this.httpClient = httpClient;
        }

        public Object getHttpClientConfigurer() {
            return httpClientConfigurer;
        }

        public void setHttpClientConfigurer(Object httpClientConfigurer) {
            this.httpClientConfigurer = httpClientConfigurer;
        }

        public Map<String, Object> getHttpClientOptions() {
            return httpClientOptions;
        }

        public void setHttpClientOptions(Map<String, Object> httpClientOptions) {
            this.httpClientOptions = httpClientOptions;
        }

        public Object getHttpContext() {
            return httpContext;
        }

        public void setHttpContext(Object httpContext) {
            this.httpContext = httpContext;
        }

        public boolean getMapHttpMessageBody() {
            return mapHttpMessageBody;
        }

        public void setMapHttpMessageBody(boolean mapHttpMessageBody) {
            this.mapHttpMessageBody = mapHttpMessageBody;
        }

        public boolean getMapHttpMessageFormUrlEncodedBody() {
            return mapHttpMessageFormUrlEncodedBody;
        }

        public void setMapHttpMessageFormUrlEncodedBody(
                boolean mapHttpMessageFormUrlEncodedBody) {
            this.mapHttpMessageFormUrlEncodedBody = mapHttpMessageFormUrlEncodedBody;
        }

        public boolean getMapHttpMessageHeaders() {
            return mapHttpMessageHeaders;
        }

        public void setMapHttpMessageHeaders(boolean mapHttpMessageHeaders) {
            this.mapHttpMessageHeaders = mapHttpMessageHeaders;
        }

        public int getMaxTotalConnections() {
            return maxTotalConnections;
        }

        public void setMaxTotalConnections(int maxTotalConnections) {
            this.maxTotalConnections = maxTotalConnections;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public boolean getUseSystemProperties() {
            return useSystemProperties;
        }

        public void setUseSystemProperties(boolean useSystemProperties) {
            this.useSystemProperties = useSystemProperties;
        }

        public Object getSslContextParameters() {
            return sslContextParameters;
        }

        public void setSslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
        }

        public Object getX509HostnameVerifier() {
            return x509HostnameVerifier;
        }

        public void setX509HostnameVerifier(Object x509HostnameVerifier) {
            this.x509HostnameVerifier = x509HostnameVerifier;
        }
    }

    public static class HttpConsumer extends HttpCommon {
    }

    public static class HttpProducer extends HttpCommon {
        /**
         * The url of the HTTP endpoint to call. The option is a java.net.URI
         * type.
         */
        private URI httpUri;
        /**
         * If this option is true, camel-http4 sends preemptive basic
         * authentication to the server. The option is a boolean type.
         */
        private boolean authenticationPreemptive;
        /**
         * If the option is true, HttpProducer will ignore the Exchange.HTTP_URI
         * header, and use the endpoint's URI for request. You may also set the
         * option throwExceptionOnFailure to be false to let the HttpProducer
         * send all the fault response back. The option is a boolean type.
         */
        private boolean bridgeEndpoint;
        /**
         * Whether to clear expired cookies before sending the HTTP request.
         * This ensures the cookies store does not keep growing by adding new
         * cookies which is newer removed when they are expired. The option is a
         * boolean type.
         */
        private boolean clearExpiredCookies;
        /**
         * Specifies whether a Connection Close header must be added to HTTP
         * Request. By default connectionClose is false. The option is a boolean
         * type.
         */
        private boolean connectionClose;
        /**
         * To use a custom CookieStore. By default the BasicCookieStore is used
         * which is an in-memory only cookie store. Notice if
         * bridgeEndpoint=true then the cookie store is forced to be a noop
         * cookie store as cookie shouldn't be stored as we are just bridging
         * (eg acting as a proxy). If a cookieHandler is set then the cookie
         * store is also forced to be a noop cookie store as cookie handling is
         * then performed by the cookieHandler. The option is a
         * org.apache.http.client.CookieStore type.
         */
        private Object cookieStore;
        /**
         * If this option is true then IN exchange headers will be copied to OUT
         * exchange headers according to copy strategy. Setting this to false,
         * allows to only include the headers from the HTTP response (not
         * propagating IN headers). The option is a boolean type.
         */
        private boolean copyHeaders;
        /**
         * Whether the HTTP DELETE should include the message body or not. By
         * default HTTP DELETE do not include any HTTP message. However in some
         * rare cases users may need to be able to include the message body. The
         * option is a boolean type.
         */
        private boolean deleteWithBody;
        /**
         * Configure the HTTP method to use. The HttpMethod header cannot
         * override this option if set. The option is a
         * org.apache.camel.http.common.HttpMethods type.
         */
        private HttpMethods httpMethod;
        /**
         * If this option is true, The http producer won't read response body
         * and cache the input stream. The option is a boolean type.
         */
        private boolean ignoreResponseBody;
        /**
         * If the option is true, HttpProducer will set the Host header to the
         * value contained in the current exchange Host header, useful in
         * reverse proxy applications where you want the Host header received by
         * the downstream server to reflect the URL called by the upstream
         * client, this allows applications which use the Host header to
         * generate accurate URL's for a proxied service. The option is a
         * boolean type.
         */
        private boolean preserveHostHeader;
        /**
         * Option to disable throwing the HttpOperationFailedException in case
         * of failed responses from the remote server. This allows you to get
         * all responses regardless of the HTTP status code. The option is a
         * boolean type.
         */
        private boolean throwExceptionOnFailure;
        /**
         * Configure a cookie handler to maintain a HTTP session. The option is
         * a org.apache.camel.http.common.cookie.CookieHandler type.
         */
        private Object cookieHandler;
        /**
         * The status codes which are considered a success response. The values
         * are inclusive. Multiple ranges can be defined, separated by comma,
         * e.g. 200-204,209,301-304. Each range must be a single number or
         * from-to with the dash included. The option is a java.lang.String
         * type.
         */
        private String okStatusCodeRange;
        /**
         * Refers to a custom org.apache.camel.component.http.UrlRewrite which
         * allows you to rewrite urls when you bridge/proxy endpoints. See more
         * details at http://camel.apache.org/urlrewrite.html. The option is a
         * org.apache.camel.http.common.UrlRewrite type.
         */
        @Deprecated
        private Object urlRewrite;
        /**
         * Proxy authentication domain to use with NTML. The option is a
         * java.lang.String type.
         */
        private String proxyAuthDomain;
        /**
         * Proxy authentication host. The option is a java.lang.String type.
         */
        private String proxyAuthHost;
        /**
         * Proxy authentication method to use. The option is a java.lang.String
         * type.
         */
        private String proxyAuthMethod;
        /**
         * Proxy authentication password. The option is a java.lang.String type.
         */
        private String proxyAuthPassword;
        /**
         * Proxy authentication port. The option is a int type.
         */
        private int proxyAuthPort;
        /**
         * Proxy authentication scheme to use. The option is a java.lang.String
         * type.
         */
        private String proxyAuthScheme;
        /**
         * Proxy authentication username. The option is a java.lang.String type.
         */
        private String proxyAuthUsername;
        /**
         * Proxy hostname to use. The option is a java.lang.String type.
         */
        private String proxyHost;
        /**
         * Proxy port to use. The option is a int type.
         */
        private int proxyPort;
        /**
         * Authentication domain to use with NTML. The option is a
         * java.lang.String type.
         */
        private String authDomain;
        /**
         * Authentication host to use with NTML. The option is a
         * java.lang.String type.
         */
        private String authHost;
        /**
         * Authentication methods allowed to use as a comma separated list of
         * values Basic, Digest or NTLM. The option is a java.lang.String type.
         */
        private String authMethod;
        /**
         * Which authentication method to prioritize to use, either as Basic,
         * Digest or NTLM. The option is a java.lang.String type.
         */
        private String authMethodPriority;
        /**
         * Authentication password. The option is a java.lang.String type.
         */
        private String authPassword;
        /**
         * Authentication username. The option is a java.lang.String type.
         */
        private String authUsername;

        public URI getHttpUri() {
            return httpUri;
        }

        public void setHttpUri(URI httpUri) {
            this.httpUri = httpUri;
        }

        public boolean getAuthenticationPreemptive() {
            return authenticationPreemptive;
        }

        public void setAuthenticationPreemptive(boolean authenticationPreemptive) {
            this.authenticationPreemptive = authenticationPreemptive;
        }

        public boolean getBridgeEndpoint() {
            return bridgeEndpoint;
        }

        public void setBridgeEndpoint(boolean bridgeEndpoint) {
            this.bridgeEndpoint = bridgeEndpoint;
        }

        public boolean getClearExpiredCookies() {
            return clearExpiredCookies;
        }

        public void setClearExpiredCookies(boolean clearExpiredCookies) {
            this.clearExpiredCookies = clearExpiredCookies;
        }

        public boolean getConnectionClose() {
            return connectionClose;
        }

        public void setConnectionClose(boolean connectionClose) {
            this.connectionClose = connectionClose;
        }

        public Object getCookieStore() {
            return cookieStore;
        }

        public void setCookieStore(Object cookieStore) {
            this.cookieStore = cookieStore;
        }

        public boolean getCopyHeaders() {
            return copyHeaders;
        }

        public void setCopyHeaders(boolean copyHeaders) {
            this.copyHeaders = copyHeaders;
        }

        public boolean getDeleteWithBody() {
            return deleteWithBody;
        }

        public void setDeleteWithBody(boolean deleteWithBody) {
            this.deleteWithBody = deleteWithBody;
        }

        public HttpMethods getHttpMethod() {
            return httpMethod;
        }

        public void setHttpMethod(HttpMethods httpMethod) {
            this.httpMethod = httpMethod;
        }

        public boolean getIgnoreResponseBody() {
            return ignoreResponseBody;
        }

        public void setIgnoreResponseBody(boolean ignoreResponseBody) {
            this.ignoreResponseBody = ignoreResponseBody;
        }

        public boolean getPreserveHostHeader() {
            return preserveHostHeader;
        }

        public void setPreserveHostHeader(boolean preserveHostHeader) {
            this.preserveHostHeader = preserveHostHeader;
        }

        public boolean getThrowExceptionOnFailure() {
            return throwExceptionOnFailure;
        }

        public void setThrowExceptionOnFailure(boolean throwExceptionOnFailure) {
            this.throwExceptionOnFailure = throwExceptionOnFailure;
        }

        public Object getCookieHandler() {
            return cookieHandler;
        }

        public void setCookieHandler(Object cookieHandler) {
            this.cookieHandler = cookieHandler;
        }

        public String getOkStatusCodeRange() {
            return okStatusCodeRange;
        }

        public void setOkStatusCodeRange(String okStatusCodeRange) {
            this.okStatusCodeRange = okStatusCodeRange;
        }

        @Deprecated
        public Object getUrlRewrite() {
            return urlRewrite;
        }

        @Deprecated
        public void setUrlRewrite(Object urlRewrite) {
            this.urlRewrite = urlRewrite;
        }

        public String getProxyAuthDomain() {
            return proxyAuthDomain;
        }

        public void setProxyAuthDomain(String proxyAuthDomain) {
            this.proxyAuthDomain = proxyAuthDomain;
        }

        public String getProxyAuthHost() {
            return proxyAuthHost;
        }

        public void setProxyAuthHost(String proxyAuthHost) {
            this.proxyAuthHost = proxyAuthHost;
        }

        public String getProxyAuthMethod() {
            return proxyAuthMethod;
        }

        public void setProxyAuthMethod(String proxyAuthMethod) {
            this.proxyAuthMethod = proxyAuthMethod;
        }

        public String getProxyAuthPassword() {
            return proxyAuthPassword;
        }

        public void setProxyAuthPassword(String proxyAuthPassword) {
            this.proxyAuthPassword = proxyAuthPassword;
        }

        public int getProxyAuthPort() {
            return proxyAuthPort;
        }

        public void setProxyAuthPort(int proxyAuthPort) {
            this.proxyAuthPort = proxyAuthPort;
        }

        public String getProxyAuthScheme() {
            return proxyAuthScheme;
        }

        public void setProxyAuthScheme(String proxyAuthScheme) {
            this.proxyAuthScheme = proxyAuthScheme;
        }

        public String getProxyAuthUsername() {
            return proxyAuthUsername;
        }

        public void setProxyAuthUsername(String proxyAuthUsername) {
            this.proxyAuthUsername = proxyAuthUsername;
        }

        public String getProxyHost() {
            return proxyHost;
        }

        public void setProxyHost(String proxyHost) {
            this.proxyHost = proxyHost;
        }

        public int getProxyPort() {
            return proxyPort;
        }

        public void setProxyPort(int proxyPort) {
            this.proxyPort = proxyPort;
        }

        public String getAuthDomain() {
            return authDomain;
        }

        public void setAuthDomain(String authDomain) {
            this.authDomain = authDomain;
        }

        public String getAuthHost() {
            return authHost;
        }

        public void setAuthHost(String authHost) {
            this.authHost = authHost;
        }

        public String getAuthMethod() {
            return authMethod;
        }

        public void setAuthMethod(String authMethod) {
            this.authMethod = authMethod;
        }

        public String getAuthMethodPriority() {
            return authMethodPriority;
        }

        public void setAuthMethodPriority(String authMethodPriority) {
            this.authMethodPriority = authMethodPriority;
        }

        public String getAuthPassword() {
            return authPassword;
        }

        public void setAuthPassword(String authPassword) {
            this.authPassword = authPassword;
        }

        public String getAuthUsername() {
            return authUsername;
        }

        public void setAuthUsername(String authUsername) {
            this.authUsername = authUsername;
        }
    }

    public static enum HttpMethods {
        GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, PATCH;
    }
}