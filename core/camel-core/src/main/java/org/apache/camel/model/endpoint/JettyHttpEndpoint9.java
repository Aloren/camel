/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URI;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.HeaderFilterStrategy;

/**
 * The jetty component provides HTTP-based endpoints for consuming and producing
 * HTTP requests.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class JettyHttpEndpoint9 {


    public static class JettyHttpCommon9 extends EndpointConfiguration {
        /**
         * If this option is false the Servlet will disable the HTTP streaming
         * and set the content-length header on the response. The option is a
         * boolean type.
         */
        private boolean chunked;
        /**
         * Determines whether or not the raw input stream from Servlet is cached
         * or not (Camel will read the stream into a in memory/overflow to file,
         * Stream caching) cache. By default Camel will cache the Servlet input
         * stream to support reading it multiple times to ensure it Camel can
         * retrieve all data from the stream. However you can set this option to
         * true when you for example need to access the raw stream, such as
         * streaming it directly to a file or other persistent store.
         * DefaultHttpBinding will copy the request input stream into a stream
         * cache and put it into message body if this option is false to support
         * reading the stream multiple times. If you use Servlet to bridge/proxy
         * an endpoint then consider enabling this option to improve
         * performance, in case you do not need to read the message payload
         * multiple times. The http/http4 producer will by default cache the
         * response body stream. If setting this option to true, then the
         * producers will not cache the response body stream but use the
         * response stream as-is as the message body. The option is a boolean
         * type.
         */
        private boolean disableStreamCache;
        /**
         * Whether Jetty org.eclipse.jetty.servlets.MultiPartFilter is enabled
         * or not. You should set this value to false when bridging endpoints,
         * to ensure multipart requests is proxied/bridged as well. The option
         * is a boolean type.
         */
        private boolean enableMultipartFilter;
        /**
         * To use a custom HeaderFilterStrategy to filter header to and from
         * Camel message. The option is a
         * org.apache.camel.spi.HeaderFilterStrategy type.
         */
        private HeaderFilterStrategy headerFilterStrategy;
        /**
         * If enabled and an Exchange failed processing on the consumer side,
         * and if the caused Exception was send back serialized in the response
         * as a application/x-java-serialized-object content type. On the
         * producer side the exception will be deserialized and thrown as is,
         * instead of the HttpOperationFailedException. The caused exception is
         * required to be serialized. This is by default turned off. If you
         * enable this then be aware that Java will deserialize the incoming
         * data from the request to Java and that can be a potential security
         * risk. The option is a boolean type.
         */
        private boolean transferException;
        /**
         * To use a custom HttpBinding to control the mapping between Camel
         * message and HttpClient. The option is a
         * org.apache.camel.http.common.HttpBinding type.
         */
        private Object httpBinding;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * If this option is true then IN exchange Body of the exchange will be
         * mapped to HTTP body. Setting this to false will avoid the HTTP
         * mapping. The option is a boolean type.
         */
        private boolean mapHttpMessageBody;
        /**
         * If this option is true then IN exchange Form Encoded body of the
         * exchange will be mapped to HTTP. Setting this to false will avoid the
         * HTTP Form Encoded body mapping. The option is a boolean type.
         */
        private boolean mapHttpMessageFormUrlEncodedBody;
        /**
         * If this option is true then IN exchange Headers of the exchange will
         * be mapped to HTTP headers. Setting this to false will avoid the HTTP
         * Headers mapping. The option is a boolean type.
         */
        private boolean mapHttpMessageHeaders;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * To configure security using SSLContextParameters. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        private Object sslContextParameters;

        public boolean getChunked() {
            return chunked;
        }

        public void setChunked(boolean chunked) {
            this.chunked = chunked;
        }

        public boolean getDisableStreamCache() {
            return disableStreamCache;
        }

        public void setDisableStreamCache(boolean disableStreamCache) {
            this.disableStreamCache = disableStreamCache;
        }

        public boolean getEnableMultipartFilter() {
            return enableMultipartFilter;
        }

        public void setEnableMultipartFilter(boolean enableMultipartFilter) {
            this.enableMultipartFilter = enableMultipartFilter;
        }

        public HeaderFilterStrategy getHeaderFilterStrategy() {
            return headerFilterStrategy;
        }

        public void setHeaderFilterStrategy(
                HeaderFilterStrategy headerFilterStrategy) {
            this.headerFilterStrategy = headerFilterStrategy;
        }

        public boolean getTransferException() {
            return transferException;
        }

        public void setTransferException(boolean transferException) {
            this.transferException = transferException;
        }

        public Object getHttpBinding() {
            return httpBinding;
        }

        public void setHttpBinding(Object httpBinding) {
            this.httpBinding = httpBinding;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getMapHttpMessageBody() {
            return mapHttpMessageBody;
        }

        public void setMapHttpMessageBody(boolean mapHttpMessageBody) {
            this.mapHttpMessageBody = mapHttpMessageBody;
        }

        public boolean getMapHttpMessageFormUrlEncodedBody() {
            return mapHttpMessageFormUrlEncodedBody;
        }

        public void setMapHttpMessageFormUrlEncodedBody(
                boolean mapHttpMessageFormUrlEncodedBody) {
            this.mapHttpMessageFormUrlEncodedBody = mapHttpMessageFormUrlEncodedBody;
        }

        public boolean getMapHttpMessageHeaders() {
            return mapHttpMessageHeaders;
        }

        public void setMapHttpMessageHeaders(boolean mapHttpMessageHeaders) {
            this.mapHttpMessageHeaders = mapHttpMessageHeaders;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Object getSslContextParameters() {
            return sslContextParameters;
        }

        public void setSslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
        }
    }

    public static class JettyHttpConsumer9 extends JettyHttpCommon9 {
        /**
         * Configure the consumer to work in async mode. The option is a boolean
         * type.
         */
        private boolean async;
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * Allows to set a timeout in millis when using Jetty as consumer
         * (server). By default Jetty uses 30000. You can use a value of = 0 to
         * never expire. If a timeout occurs then the request will be expired
         * and Jetty will return back a http error 503 to the client. This
         * option is only in use when using Jetty with the Asynchronous Routing
         * Engine. The option is a java.lang.Long type.
         */
        private Long continuationTimeout;
        /**
         * If the option is true, Jetty server will setup the CrossOriginFilter
         * which supports the CORS out of box. The option is a boolean type.
         */
        private boolean enableCORS;
        /**
         * If this option is true, Jetty JMX support will be enabled for this
         * endpoint. See Jetty JMX support for more details. The option is a
         * boolean type.
         */
        private boolean enableJmx;
        /**
         * Used to only allow consuming if the HttpMethod matches, such as
         * GET/POST/PUT etc. Multiple methods can be specified separated by
         * comma. The option is a java.lang.String type.
         */
        private String httpMethodRestrict;
        /**
         * Whether or not the consumer should try to find a target consumer by
         * matching the URI prefix if no exact match is found. The option is a
         * boolean type.
         */
        private boolean matchOnUriPrefix;
        /**
         * To use a custom buffer size on the javax.servlet.ServletResponse. The
         * option is a java.lang.Integer type.
         */
        private Integer responseBufferSize;
        /**
         * If the option is true, jetty server will send the date header to the
         * client which sends the request. NOTE please make sure there is no any
         * other camel-jetty endpoint is share the same port, otherwise this
         * option may not work as expected. The option is a boolean type.
         */
        private boolean sendDateHeader;
        /**
         * If the option is true, jetty will send the server header with the
         * jetty version information to the client which sends the request. NOTE
         * please make sure there is no any other camel-jetty endpoint is share
         * the same port, otherwise this option may not work as expected. The
         * option is a boolean type.
         */
        private boolean sendServerVersion;
        /**
         * Specifies whether to enable the session manager on the server side of
         * Jetty. The option is a boolean type.
         */
        private boolean sessionSupport;
        /**
         * Whether or not to use Jetty continuations for the Jetty Server. The
         * option is a java.lang.Boolean type.
         */
        private boolean useContinuation;
        /**
         * Whether to eager check whether the HTTP requests has content if the
         * content-length header is 0 or not present. This can be turned on in
         * case HTTP clients do not send streamed data. The option is a boolean
         * type.
         */
        private boolean eagerCheckContentAvailable;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;
        /**
         * Configuration of the filter init parameters. These parameters will be
         * applied to the filter list before starting the jetty server. The
         * option is a java.util.Map<java.lang.String,java.lang.String> type.
         */
        private Map<String, String> filterInitParameters;
        /**
         * Allows using a custom filters which is putted into a list and can be
         * find in the Registry. Multiple values can be separated by comma. The
         * option is a java.lang.String type.
         */
        private List<Object> filtersRef;
        /**
         * Specifies a comma-delimited set of Handler instances to lookup in
         * your Registry. These handlers are added to the Jetty servlet context
         * (for example, to add security). Important: You can not use different
         * handlers with different Jetty endpoints using the same port number.
         * The handlers is associated to the port number. If you need different
         * handlers, then use different port numbers. The option is a
         * java.lang.String type.
         */
        private List<Object> handlers;
        /**
         * Option to disable throwing the HttpOperationFailedException in case
         * of failed responses from the remote server. This allows you to get
         * all responses regardless of the HTTP status code. The option is a
         * java.lang.String type.
         */
        @Deprecated
        private String httpBindingRef;
        /**
         * Allows using a custom multipart filter. Note: setting
         * multipartFilterRef forces the value of enableMultipartFilter to true.
         * The option is a javax.servlet.Filter type.
         */
        private Object multipartFilter;
        /**
         * Allows using a custom multipart filter. Note: setting
         * multipartFilterRef forces the value of enableMultipartFilter to true.
         * The option is a java.lang.String type.
         */
        @Deprecated
        private String multipartFilterRef;
        /**
         * Specifies whether to enable HTTP OPTIONS for this Servlet consumer.
         * By default OPTIONS is turned off. The option is a boolean type.
         */
        private boolean optionsEnabled;
        /**
         * Specifies whether to enable HTTP TRACE for this Servlet consumer. By
         * default TRACE is turned off. The option is a boolean type.
         */
        private boolean traceEnabled;

        public boolean getAsync() {
            return async;
        }

        public void setAsync(boolean async) {
            this.async = async;
        }

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public Long getContinuationTimeout() {
            return continuationTimeout;
        }

        public void setContinuationTimeout(Long continuationTimeout) {
            this.continuationTimeout = continuationTimeout;
        }

        public boolean getEnableCORS() {
            return enableCORS;
        }

        public void setEnableCORS(boolean enableCORS) {
            this.enableCORS = enableCORS;
        }

        public boolean getEnableJmx() {
            return enableJmx;
        }

        public void setEnableJmx(boolean enableJmx) {
            this.enableJmx = enableJmx;
        }

        public String getHttpMethodRestrict() {
            return httpMethodRestrict;
        }

        public void setHttpMethodRestrict(String httpMethodRestrict) {
            this.httpMethodRestrict = httpMethodRestrict;
        }

        public boolean getMatchOnUriPrefix() {
            return matchOnUriPrefix;
        }

        public void setMatchOnUriPrefix(boolean matchOnUriPrefix) {
            this.matchOnUriPrefix = matchOnUriPrefix;
        }

        public Integer getResponseBufferSize() {
            return responseBufferSize;
        }

        public void setResponseBufferSize(Integer responseBufferSize) {
            this.responseBufferSize = responseBufferSize;
        }

        public boolean getSendDateHeader() {
            return sendDateHeader;
        }

        public void setSendDateHeader(boolean sendDateHeader) {
            this.sendDateHeader = sendDateHeader;
        }

        public boolean getSendServerVersion() {
            return sendServerVersion;
        }

        public void setSendServerVersion(boolean sendServerVersion) {
            this.sendServerVersion = sendServerVersion;
        }

        public boolean getSessionSupport() {
            return sessionSupport;
        }

        public void setSessionSupport(boolean sessionSupport) {
            this.sessionSupport = sessionSupport;
        }

        public boolean getUseContinuation() {
            return useContinuation;
        }

        public void setUseContinuation(boolean useContinuation) {
            this.useContinuation = useContinuation;
        }

        public boolean getEagerCheckContentAvailable() {
            return eagerCheckContentAvailable;
        }

        public void setEagerCheckContentAvailable(
                boolean eagerCheckContentAvailable) {
            this.eagerCheckContentAvailable = eagerCheckContentAvailable;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }

        public Map<String, String> getFilterInitParameters() {
            return filterInitParameters;
        }

        public void setFilterInitParameters(
                Map<String, String> filterInitParameters) {
            this.filterInitParameters = filterInitParameters;
        }

        public List<Object> getFiltersRef() {
            return filtersRef;
        }

        public void setFiltersRef(List<Object> filtersRef) {
            this.filtersRef = filtersRef;
        }

        public List<Object> getHandlers() {
            return handlers;
        }

        public void setHandlers(List<Object> handlers) {
            this.handlers = handlers;
        }

        @Deprecated
        public String getHttpBindingRef() {
            return httpBindingRef;
        }

        @Deprecated
        public void setHttpBindingRef(String httpBindingRef) {
            this.httpBindingRef = httpBindingRef;
        }

        public Object getMultipartFilter() {
            return multipartFilter;
        }

        public void setMultipartFilter(Object multipartFilter) {
            this.multipartFilter = multipartFilter;
        }

        @Deprecated
        public String getMultipartFilterRef() {
            return multipartFilterRef;
        }

        @Deprecated
        public void setMultipartFilterRef(String multipartFilterRef) {
            this.multipartFilterRef = multipartFilterRef;
        }

        public boolean getOptionsEnabled() {
            return optionsEnabled;
        }

        public void setOptionsEnabled(boolean optionsEnabled) {
            this.optionsEnabled = optionsEnabled;
        }

        public boolean getTraceEnabled() {
            return traceEnabled;
        }

        public void setTraceEnabled(boolean traceEnabled) {
            this.traceEnabled = traceEnabled;
        }
    }

    public static class JettyHttpProducer9 extends JettyHttpCommon9 {
        /**
         * The url of the HTTP endpoint to call. The option is a java.net.URI
         * type.
         */
        private URI httpUri;
        /**
         * If the option is true, HttpProducer will ignore the Exchange.HTTP_URI
         * header, and use the endpoint's URI for request. You may also set the
         * option throwExceptionOnFailure to be false to let the HttpProducer
         * send all the fault response back. The option is a boolean type.
         */
        private boolean bridgeEndpoint;
        /**
         * Specifies whether a Connection Close header must be added to HTTP
         * Request. By default connectionClose is false. The option is a boolean
         * type.
         */
        private boolean connectionClose;
        /**
         * Configure a cookie handler to maintain a HTTP session. The option is
         * a org.apache.camel.http.common.cookie.CookieHandler type.
         */
        private Object cookieHandler;
        /**
         * If this option is true then IN exchange headers will be copied to OUT
         * exchange headers according to copy strategy. Setting this to false,
         * allows to only include the headers from the HTTP response (not
         * propagating IN headers). The option is a boolean type.
         */
        private boolean copyHeaders;
        /**
         * To set a value for maximum number of threads in HttpClient thread
         * pool. This setting override any setting configured on component
         * level. Notice that both a min and max size must be configured. If not
         * set it default to max 254 threads used in Jettys thread pool. The
         * option is a java.lang.Integer type.
         */
        private Integer httpClientMaxThreads;
        /**
         * To set a value for minimum number of threads in HttpClient thread
         * pool. This setting override any setting configured on component
         * level. Notice that both a min and max size must be configured. If not
         * set it default to min 8 threads used in Jettys thread pool. The
         * option is a java.lang.Integer type.
         */
        private Integer httpClientMinThreads;
        /**
         * Configure the HTTP method to use. The HttpMethod header cannot
         * override this option if set. The option is a
         * org.apache.camel.http.common.HttpMethods type.
         */
        private HttpMethods httpMethod;
        /**
         * If this option is true, The http producer won't read response body
         * and cache the input stream. The option is a boolean type.
         */
        private boolean ignoreResponseBody;
        /**
         * If the option is true, HttpProducer will set the Host header to the
         * value contained in the current exchange Host header, useful in
         * reverse proxy applications where you want the Host header received by
         * the downstream server to reflect the URL called by the upstream
         * client, this allows applications which use the Host header to
         * generate accurate URL's for a proxied service. The option is a
         * boolean type.
         */
        private boolean preserveHostHeader;
        /**
         * Option to disable throwing the HttpOperationFailedException in case
         * of failed responses from the remote server. This allows you to get
         * all responses regardless of the HTTP status code. The option is a
         * boolean type.
         */
        private boolean throwExceptionOnFailure;
        /**
         * Sets a shared HttpClient to use for all producers created by this
         * endpoint. By default each producer will use a new http client, and
         * not share. Important: Make sure to handle the lifecycle of the shared
         * client, such as stopping the client, when it is no longer in use.
         * Camel will call the start method on the client to ensure its started
         * when this endpoint creates a producer. This options should only be
         * used in special circumstances. The option is a
         * org.eclipse.jetty.client.HttpClient type.
         */
        private Object httpClient;
        /**
         * Configuration of Jetty's HttpClient. For example, setting
         * httpClient.idleTimeout=30000 sets the idle timeout to 30 seconds. And
         * httpClient.timeout=30000 sets the request timeout to 30 seconds, in
         * case you want to timeout sooner if you have long running
         * request/response calls. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        private Map<String, Object> httpClientParameters;
        /**
         * To use a custom JettyHttpBinding which be used to customize how a
         * response should be written for the producer. The option is a
         * org.apache.camel.component.jetty.JettyHttpBinding type.
         */
        private Object jettyBinding;
        /**
         * To use a custom JettyHttpBinding which be used to customize how a
         * response should be written for the producer. The option is a
         * java.lang.String type.
         */
        @Deprecated
        private String jettyBindingRef;
        /**
         * The status codes which are considered a success response. The values
         * are inclusive. Multiple ranges can be defined, separated by comma,
         * e.g. 200-204,209,301-304. Each range must be a single number or
         * from-to with the dash included. The option is a java.lang.String
         * type.
         */
        private String okStatusCodeRange;
        /**
         * Refers to a custom org.apache.camel.component.http.UrlRewrite which
         * allows you to rewrite urls when you bridge/proxy endpoints. See more
         * details at http://camel.apache.org/urlrewrite.html. The option is a
         * org.apache.camel.http.common.UrlRewrite type.
         */
        @Deprecated
        private Object urlRewrite;
        /**
         * Proxy authentication scheme to use. The option is a java.lang.String
         * type.
         */
        private String proxyAuthScheme;
        /**
         * Proxy hostname to use. The option is a java.lang.String type.
         */
        private String proxyHost;
        /**
         * Proxy port to use. The option is a int type.
         */
        private Integer proxyPort;
        /**
         * Authentication host to use with NTML. The option is a
         * java.lang.String type.
         */
        private String authHost;

        public URI getHttpUri() {
            return httpUri;
        }

        public void setHttpUri(URI httpUri) {
            this.httpUri = httpUri;
        }

        public boolean getBridgeEndpoint() {
            return bridgeEndpoint;
        }

        public void setBridgeEndpoint(boolean bridgeEndpoint) {
            this.bridgeEndpoint = bridgeEndpoint;
        }

        public boolean getConnectionClose() {
            return connectionClose;
        }

        public void setConnectionClose(boolean connectionClose) {
            this.connectionClose = connectionClose;
        }

        public Object getCookieHandler() {
            return cookieHandler;
        }

        public void setCookieHandler(Object cookieHandler) {
            this.cookieHandler = cookieHandler;
        }

        public boolean getCopyHeaders() {
            return copyHeaders;
        }

        public void setCopyHeaders(boolean copyHeaders) {
            this.copyHeaders = copyHeaders;
        }

        public Integer getHttpClientMaxThreads() {
            return httpClientMaxThreads;
        }

        public void setHttpClientMaxThreads(Integer httpClientMaxThreads) {
            this.httpClientMaxThreads = httpClientMaxThreads;
        }

        public Integer getHttpClientMinThreads() {
            return httpClientMinThreads;
        }

        public void setHttpClientMinThreads(Integer httpClientMinThreads) {
            this.httpClientMinThreads = httpClientMinThreads;
        }

        public HttpMethods getHttpMethod() {
            return httpMethod;
        }

        public void setHttpMethod(HttpMethods httpMethod) {
            this.httpMethod = httpMethod;
        }

        public boolean getIgnoreResponseBody() {
            return ignoreResponseBody;
        }

        public void setIgnoreResponseBody(boolean ignoreResponseBody) {
            this.ignoreResponseBody = ignoreResponseBody;
        }

        public boolean getPreserveHostHeader() {
            return preserveHostHeader;
        }

        public void setPreserveHostHeader(boolean preserveHostHeader) {
            this.preserveHostHeader = preserveHostHeader;
        }

        public boolean getThrowExceptionOnFailure() {
            return throwExceptionOnFailure;
        }

        public void setThrowExceptionOnFailure(boolean throwExceptionOnFailure) {
            this.throwExceptionOnFailure = throwExceptionOnFailure;
        }

        public Object getHttpClient() {
            return httpClient;
        }

        public void setHttpClient(Object httpClient) {
            this.httpClient = httpClient;
        }

        public Map<String, Object> getHttpClientParameters() {
            return httpClientParameters;
        }

        public void setHttpClientParameters(
                Map<String, Object> httpClientParameters) {
            this.httpClientParameters = httpClientParameters;
        }

        public Object getJettyBinding() {
            return jettyBinding;
        }

        public void setJettyBinding(Object jettyBinding) {
            this.jettyBinding = jettyBinding;
        }

        @Deprecated
        public String getJettyBindingRef() {
            return jettyBindingRef;
        }

        @Deprecated
        public void setJettyBindingRef(String jettyBindingRef) {
            this.jettyBindingRef = jettyBindingRef;
        }

        public String getOkStatusCodeRange() {
            return okStatusCodeRange;
        }

        public void setOkStatusCodeRange(String okStatusCodeRange) {
            this.okStatusCodeRange = okStatusCodeRange;
        }

        @Deprecated
        public Object getUrlRewrite() {
            return urlRewrite;
        }

        @Deprecated
        public void setUrlRewrite(Object urlRewrite) {
            this.urlRewrite = urlRewrite;
        }

        public String getProxyAuthScheme() {
            return proxyAuthScheme;
        }

        public void setProxyAuthScheme(String proxyAuthScheme) {
            this.proxyAuthScheme = proxyAuthScheme;
        }

        public String getProxyHost() {
            return proxyHost;
        }

        public void setProxyHost(String proxyHost) {
            this.proxyHost = proxyHost;
        }

        public Integer getProxyPort() {
            return proxyPort;
        }

        public void setProxyPort(Integer proxyPort) {
            this.proxyPort = proxyPort;
        }

        public String getAuthHost() {
            return authHost;
        }

        public void setAuthHost(String authHost) {
            this.authHost = authHost;
        }
    }

    public static enum HttpMethods {
        GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE, PATCH;
    }
}