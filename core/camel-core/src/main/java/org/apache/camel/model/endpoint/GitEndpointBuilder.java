/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The git component is used for working with git repositories.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface GitEndpointBuilder {


    public static class GitCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        GitCommonBuilder(String path) {
            super("git", path);
        }
        /**
         * Local repository path. The option is a java.lang.String type.
         */
        public T localPath(String localPath) {
            this.properties.put("localPath", localPath);
            return (T) this;
        }
        /**
         * The branch name to work on. The option is a java.lang.String type.
         */
        public T branchName(String branchName) {
            this.properties.put("branchName", branchName);
            return (T) this;
        }
        /**
         * Remote repository password. The option is a java.lang.String type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * The remote repository name to use in particular operation like pull.
         * The option is a java.lang.String type.
         */
        public T remoteName(String remoteName) {
            this.properties.put("remoteName", remoteName);
            return (T) this;
        }
        /**
         * The remote repository path. The option is a java.lang.String type.
         */
        public T remotePath(String remotePath) {
            this.properties.put("remotePath", remotePath);
            return (T) this;
        }
        /**
         * The tag name to work on. The option is a java.lang.String type.
         */
        public T tagName(String tagName) {
            this.properties.put("tagName", tagName);
            return (T) this;
        }
        /**
         * Remote repository username. The option is a java.lang.String type.
         */
        public T username(String username) {
            this.properties.put("username", username);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a boolean type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a boolean type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class GitConsumerBuilder
            extends
                GitCommonBuilder<GitConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public GitConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public GitConsumerBuilder bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (GitConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a boolean type.
         */
        public GitConsumerBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (GitConsumerBuilder) this;
        }
        /**
         * The consumer type. The option is a
         * org.apache.camel.component.git.consumer.GitType type.
         */
        public GitConsumerBuilder type(GitType type) {
            this.properties.put("type", type);
            return (GitConsumerBuilder) this;
        }
        /**
         * The consumer type. The option will be converted to a
         * org.apache.camel.component.git.consumer.GitType type.
         */
        public GitConsumerBuilder type(String type) {
            this.properties.put("type", type);
            return (GitConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public GitConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (GitConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a org.apache.camel.spi.ExceptionHandler type.
         */
        public GitConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (GitConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public GitConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (GitConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a org.apache.camel.ExchangePattern type.
         */
        public GitConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (GitConsumerBuilder) this;
        }
    }

    public static class GitProducerBuilder
            extends
                GitCommonBuilder<GitProducerBuilder>
            implements
                EndpointProducerBuilder {
        public GitProducerBuilder(String path) {
            super(path);
        }
        /**
         * The flag to manage empty git commits. The option is a boolean type.
         */
        public GitProducerBuilder allowEmpty(boolean allowEmpty) {
            this.properties.put("allowEmpty", allowEmpty);
            return (GitProducerBuilder) this;
        }
        /**
         * The flag to manage empty git commits. The option will be converted to
         * a boolean type.
         */
        public GitProducerBuilder allowEmpty(String allowEmpty) {
            this.properties.put("allowEmpty", allowEmpty);
            return (GitProducerBuilder) this;
        }
        /**
         * The operation to do on the repository. The option is a
         * java.lang.String type.
         */
        public GitProducerBuilder operation(String operation) {
            this.properties.put("operation", operation);
            return (GitProducerBuilder) this;
        }
    }

    public static enum GitType {
        commit, tag, branch;
    }
    public default GitConsumerBuilder fromGit(String path) {
        return new GitConsumerBuilder(path);
    }
    public default GitProducerBuilder toGit(String path) {
        return new GitProducerBuilder(path);
    }
}