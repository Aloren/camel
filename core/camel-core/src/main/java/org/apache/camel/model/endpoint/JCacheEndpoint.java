/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.List;
import java.util.Properties;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The jcache component enables you to perform caching operations using
 * JSR107/JCache as cache implementation.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class JCacheEndpoint {


    public static class JCacheCommon extends EndpointConfiguration {
        /**
         * The name of the cache. The option is a java.lang.String type.
         */
        private String cacheName;
        /**
         * A Configuration for the Cache. The option is a
         * javax.cache.configuration.Configuration type.
         */
        private Object cacheConfiguration;
        /**
         * The Properties for the javax.cache.spi.CachingProvider to create the
         * CacheManager. The option is a java.util.Properties type.
         */
        private Properties cacheConfigurationProperties;
        /**
         * The fully qualified class name of the
         * javax.cache.spi.CachingProvider. The option is a java.lang.String
         * type.
         */
        private String cachingProvider;
        /**
         * An implementation specific URI for the CacheManager. The option is a
         * java.lang.String type.
         */
        private String configurationUri;
        /**
         * Whether management gathering is enabled. The option is a boolean
         * type.
         */
        private boolean managementEnabled;
        /**
         * If read-through caching should be used. The option is a boolean type.
         */
        private boolean readThrough;
        /**
         * Whether statistics gathering is enabled. The option is a boolean
         * type.
         */
        private boolean statisticsEnabled;
        /**
         * If cache should use store-by-value or store-by-reference semantics.
         * The option is a boolean type.
         */
        private boolean storeByValue;
        /**
         * If write-through caching should be used. The option is a boolean
         * type.
         */
        private boolean writeThrough;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * The CacheLoader factory. The option is a
         * javax.cache.configuration.Factory<javax.cache.integration.CacheLoader> type.
         */
        private Object cacheLoaderFactory;
        /**
         * The CacheWriter factory. The option is a
         * javax.cache.configuration.Factory<javax.cache.integration.CacheWriter> type.
         */
        private Object cacheWriterFactory;
        /**
         * Configure if a cache need to be created if it does exist or can't be
         * pre-configured. The option is a boolean type.
         */
        private boolean createCacheIfNotExists;
        /**
         * The ExpiryPolicy factory. The option is a
         * javax.cache.configuration.Factory<javax.cache.expiry.ExpiryPolicy>
         * type.
         */
        private Object expiryPolicyFactory;
        /**
         * Configure if a camel-cache should try to find implementations of
         * jcache api in runtimes like OSGi. The option is a boolean type.
         */
        private boolean lookupProviders;

        public String getCacheName() {
            return cacheName;
        }

        public void setCacheName(String cacheName) {
            this.cacheName = cacheName;
        }

        public Object getCacheConfiguration() {
            return cacheConfiguration;
        }

        public void setCacheConfiguration(Object cacheConfiguration) {
            this.cacheConfiguration = cacheConfiguration;
        }

        public Properties getCacheConfigurationProperties() {
            return cacheConfigurationProperties;
        }

        public void setCacheConfigurationProperties(
                Properties cacheConfigurationProperties) {
            this.cacheConfigurationProperties = cacheConfigurationProperties;
        }

        public String getCachingProvider() {
            return cachingProvider;
        }

        public void setCachingProvider(String cachingProvider) {
            this.cachingProvider = cachingProvider;
        }

        public String getConfigurationUri() {
            return configurationUri;
        }

        public void setConfigurationUri(String configurationUri) {
            this.configurationUri = configurationUri;
        }

        public boolean getManagementEnabled() {
            return managementEnabled;
        }

        public void setManagementEnabled(boolean managementEnabled) {
            this.managementEnabled = managementEnabled;
        }

        public boolean getReadThrough() {
            return readThrough;
        }

        public void setReadThrough(boolean readThrough) {
            this.readThrough = readThrough;
        }

        public boolean getStatisticsEnabled() {
            return statisticsEnabled;
        }

        public void setStatisticsEnabled(boolean statisticsEnabled) {
            this.statisticsEnabled = statisticsEnabled;
        }

        public boolean getStoreByValue() {
            return storeByValue;
        }

        public void setStoreByValue(boolean storeByValue) {
            this.storeByValue = storeByValue;
        }

        public boolean getWriteThrough() {
            return writeThrough;
        }

        public void setWriteThrough(boolean writeThrough) {
            this.writeThrough = writeThrough;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Object getCacheLoaderFactory() {
            return cacheLoaderFactory;
        }

        public void setCacheLoaderFactory(Object cacheLoaderFactory) {
            this.cacheLoaderFactory = cacheLoaderFactory;
        }

        public Object getCacheWriterFactory() {
            return cacheWriterFactory;
        }

        public void setCacheWriterFactory(Object cacheWriterFactory) {
            this.cacheWriterFactory = cacheWriterFactory;
        }

        public boolean getCreateCacheIfNotExists() {
            return createCacheIfNotExists;
        }

        public void setCreateCacheIfNotExists(boolean createCacheIfNotExists) {
            this.createCacheIfNotExists = createCacheIfNotExists;
        }

        public Object getExpiryPolicyFactory() {
            return expiryPolicyFactory;
        }

        public void setExpiryPolicyFactory(Object expiryPolicyFactory) {
            this.expiryPolicyFactory = expiryPolicyFactory;
        }

        public boolean getLookupProviders() {
            return lookupProviders;
        }

        public void setLookupProviders(boolean lookupProviders) {
            this.lookupProviders = lookupProviders;
        }
    }

    public static class JCacheConsumer extends JCacheCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * Events a consumer should filter. If using filteredEvents option, then
         * eventFilters one will be ignored. The option is a
         * java.util.List<javax.cache.event.EventType> type.
         */
        private List<EventType> filteredEvents;
        /**
         * if the old value is required for events. The option is a boolean
         * type.
         */
        private boolean oldValueRequired;
        /**
         * if the event listener should block the thread causing the event. The
         * option is a boolean type.
         */
        private boolean synchronous;
        /**
         * The CacheEntryEventFilter. If using eventFilters option, then
         * filteredEvents one will be ignored. The option is a
         * java.util.List<javax.cache.event.CacheEntryEventFilter> type.
         */
        private List<Object> eventFilters;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public List<EventType> getFilteredEvents() {
            return filteredEvents;
        }

        public void setFilteredEvents(List<EventType> filteredEvents) {
            this.filteredEvents = filteredEvents;
        }

        public boolean getOldValueRequired() {
            return oldValueRequired;
        }

        public void setOldValueRequired(boolean oldValueRequired) {
            this.oldValueRequired = oldValueRequired;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public List<Object> getEventFilters() {
            return eventFilters;
        }

        public void setEventFilters(List<Object> eventFilters) {
            this.eventFilters = eventFilters;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class JCacheProducer extends JCacheCommon {
        /**
         * To configure using a cache operation by default. If an operation in
         * the message header, then the operation from the header takes
         * precedence. The option is a java.lang.String type.
         */
        private String action;

        public String getAction() {
            return action;
        }

        public void setAction(String action) {
            this.action = action;
        }
    }

    public static enum EventType {
        CREATED, UPDATED, REMOVED, EXPIRED;
    }
}