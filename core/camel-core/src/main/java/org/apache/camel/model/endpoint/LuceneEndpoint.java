/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.io.File;
import javax.annotation.Generated;

/**
 * To insert or query from Apache Lucene databases.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class LuceneEndpoint {


    public static class LuceneCommon extends EndpointConfiguration {
        /**
         * The URL to the lucene server. The option is a java.lang.String type.
         */
        private String host;
        /**
         * Operation to do such as insert or query. The option is a
         * org.apache.camel.component.lucene.LuceneOperation type.
         */
        private LuceneOperation operation;
        /**
         * An Analyzer builds TokenStreams, which analyze text. It thus
         * represents a policy for extracting index terms from text. The value
         * for analyzer can be any class that extends the abstract class
         * org.apache.lucene.analysis.Analyzer. Lucene also offers a rich set of
         * analyzers out of the box. The option is a
         * org.apache.lucene.analysis.Analyzer type.
         */
        private Object analyzer;
        /**
         * A file system directory in which index files are created upon
         * analysis of the document by the specified analyzer. The option is a
         * java.io.File type.
         */
        private File indexDir;
        /**
         * An integer value that limits the result set of the search operation.
         * The option is a int type.
         */
        private int maxHits;
        /**
         * An optional directory containing files to be used to be analyzed and
         * added to the index at producer startup. The option is a java.io.File
         * type.
         */
        private File srcDir;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;

        public String getHost() {
            return host;
        }

        public void setHost(String host) {
            this.host = host;
        }

        public LuceneOperation getOperation() {
            return operation;
        }

        public void setOperation(LuceneOperation operation) {
            this.operation = operation;
        }

        public Object getAnalyzer() {
            return analyzer;
        }

        public void setAnalyzer(Object analyzer) {
            this.analyzer = analyzer;
        }

        public File getIndexDir() {
            return indexDir;
        }

        public void setIndexDir(File indexDir) {
            this.indexDir = indexDir;
        }

        public int getMaxHits() {
            return maxHits;
        }

        public void setMaxHits(int maxHits) {
            this.maxHits = maxHits;
        }

        public File getSrcDir() {
            return srcDir;
        }

        public void setSrcDir(File srcDir) {
            this.srcDir = srcDir;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class LuceneConsumer extends LuceneCommon {
    }

    public static class LuceneProducer extends LuceneCommon {
    }

    public static enum LuceneOperation {
        insert, query;
    }
}