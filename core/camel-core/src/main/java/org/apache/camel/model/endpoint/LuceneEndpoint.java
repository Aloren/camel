/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.io.File;
import javax.annotation.Generated;
import org.apache.camel.model.EndpointDefinition;

/**
 * To insert or query from Apache Lucene databases.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class LuceneEndpoint {


    public static class LuceneCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        LuceneCommon(String path) {
            super("lucene", path);
        }
        /**
         * The URL to the lucene server. The option is a java.lang.String type.
         */
        public T host(String host) {
            this.properties.put("host", host);
            return (T) this;
        }
        /**
         * Operation to do such as insert or query. The option is a
         * org.apache.camel.component.lucene.LuceneOperation type.
         */
        public T operation(LuceneOperation operation) {
            this.properties.put("operation", operation);
            return (T) this;
        }
        /**
         * An Analyzer builds TokenStreams, which analyze text. It thus
         * represents a policy for extracting index terms from text. The value
         * for analyzer can be any class that extends the abstract class
         * org.apache.lucene.analysis.Analyzer. Lucene also offers a rich set of
         * analyzers out of the box. The option is a
         * org.apache.lucene.analysis.Analyzer type.
         */
        public T analyzer(Object analyzer) {
            this.properties.put("analyzer", analyzer);
            return (T) this;
        }
        /**
         * A file system directory in which index files are created upon
         * analysis of the document by the specified analyzer. The option is a
         * java.io.File type.
         */
        public T indexDir(File indexDir) {
            this.properties.put("indexDir", indexDir);
            return (T) this;
        }
        /**
         * An integer value that limits the result set of the search operation.
         * The option is a int type.
         */
        public T maxHits(int maxHits) {
            this.properties.put("maxHits", maxHits);
            return (T) this;
        }
        /**
         * An optional directory containing files to be used to be analyzed and
         * added to the index at producer startup. The option is a java.io.File
         * type.
         */
        public T srcDir(File srcDir) {
            this.properties.put("srcDir", srcDir);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class LuceneProducer
            extends
                LuceneCommon<LuceneProducer>
            implements
                EndpointDefinition.Producer {
        public LuceneProducer(String path) {
            super(path);
        }
    }

    public static enum LuceneOperation {
        insert, query;
    }
}