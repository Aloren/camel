/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.security.PrivateKey;
import java.security.cert.Certificate;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Component used for transferring data secure and reliable over the internet
 * using the AS2 protocol.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class AS2Endpoint {


    public static class AS2Common<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private AS2ApiName apiName;
        private String methodName;
        private String as2From;
        private AS2MessageStructure as2MessageStructure;
        private String as2To;
        private String as2Version;
        private String clientFqdn;
        private AS2CompressionAlgorithm compressionAlgorithm;
        private PrivateKey decryptingPrivateKey;
        private String dispositionNotificationTo;
        private String ediMessageTransferEncoding;
        private Object ediMessageType;
        private AS2EncryptionAlgorithm encryptingAlgorithm;
        private Certificate[] encryptingCertificateChain;
        private String from;
        private String inBody;
        private String mdnMessageTemplate;
        private String requestUri;
        private String server;
        private String serverFqdn;
        private Integer serverPortNumber;
        private String[] signedReceiptMicAlgorithms;
        private AS2SignatureAlgorithm signingAlgorithm;
        private Certificate[] signingCertificateChain;
        private PrivateKey signingPrivateKey;
        private String subject;
        private String targetHostname;
        private Integer targetPortNumber;
        private String userAgent;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;

        /**
         * What kind of operation to perform. The option is a
         * org.apache.camel.component.as2.internal.AS2ApiName type.
         */
        public T apiName(AS2ApiName apiName) {
            this.apiName = apiName;
            return (T) this;
        }

        /**
         * What sub operation to use for the selected operation. The option is a
         * java.lang.String type.
         */
        public T methodName(String methodName) {
            this.methodName = methodName;
            return (T) this;
        }

        /**
         * The value of the AS2From header of AS2 message. The option is a
         * java.lang.String type.
         */
        public T as2From(String as2From) {
            this.as2From = as2From;
            return (T) this;
        }

        /**
         * The structure of AS2 Message. One of: PLAIN - No encryption, no
         * signature, SIGNED - No encryption, signature, ENCRYPTED - Encryption,
         * no signature, ENCRYPTED_SIGNED - Encryption, signature. The option is
         * a org.apache.camel.component.as2.api.AS2MessageStructure type.
         */
        public T as2MessageStructure(AS2MessageStructure as2MessageStructure) {
            this.as2MessageStructure = as2MessageStructure;
            return (T) this;
        }

        /**
         * The value of the AS2To header of AS2 message. The option is a
         * java.lang.String type.
         */
        public T as2To(String as2To) {
            this.as2To = as2To;
            return (T) this;
        }

        /**
         * The version of the AS2 protocol. The option is a java.lang.String
         * type.
         */
        public T as2Version(String as2Version) {
            this.as2Version = as2Version;
            return (T) this;
        }

        /**
         * The Client Fully Qualified Domain Name (FQDN). Used in message ids
         * sent by endpoint. The option is a java.lang.String type.
         */
        public T clientFqdn(String clientFqdn) {
            this.clientFqdn = clientFqdn;
            return (T) this;
        }

        /**
         * The algorithm used to compress EDI message. The option is a
         * org.apache.camel.component.as2.api.AS2CompressionAlgorithm type.
         */
        public T compressionAlgorithm(
                AS2CompressionAlgorithm compressionAlgorithm) {
            this.compressionAlgorithm = compressionAlgorithm;
            return (T) this;
        }

        /**
         * The key used to encrypt the EDI message. The option is a
         * java.security.PrivateKey type.
         */
        public T decryptingPrivateKey(PrivateKey decryptingPrivateKey) {
            this.decryptingPrivateKey = decryptingPrivateKey;
            return (T) this;
        }

        /**
         * The value of the Disposition-Notification-To header. Assigning a
         * value to this parameter requests a message disposition notification
         * (MDN) for the AS2 message. The option is a java.lang.String type.
         */
        public T dispositionNotificationTo(String dispositionNotificationTo) {
            this.dispositionNotificationTo = dispositionNotificationTo;
            return (T) this;
        }

        /**
         * The transfer encoding of EDI message. The option is a
         * java.lang.String type.
         */
        public T ediMessageTransferEncoding(String ediMessageTransferEncoding) {
            this.ediMessageTransferEncoding = ediMessageTransferEncoding;
            return (T) this;
        }

        /**
         * The content type of EDI message. One of application/edifact,
         * application/edi-x12, application/edi-consent. The option is a
         * org.apache.http.entity.ContentType type.
         */
        public T ediMessageType(Object ediMessageType) {
            this.ediMessageType = ediMessageType;
            return (T) this;
        }

        /**
         * The algorithm used to encrypt EDI message. The option is a
         * org.apache.camel.component.as2.api.AS2EncryptionAlgorithm type.
         */
        public T encryptingAlgorithm(AS2EncryptionAlgorithm encryptingAlgorithm) {
            this.encryptingAlgorithm = encryptingAlgorithm;
            return (T) this;
        }

        /**
         * The chain of certificates used to encrypt EDI message. The option is
         * a java.security.cert.Certificate[] type.
         */
        public T encryptingCertificateChain(
                Certificate[] encryptingCertificateChain) {
            this.encryptingCertificateChain = encryptingCertificateChain;
            return (T) this;
        }

        /**
         * The value of the From header of AS2 message. The option is a
         * java.lang.String type.
         */
        public T from(String from) {
            this.from = from;
            return (T) this;
        }

        /**
         * Sets the name of a parameter to be passed in the exchange In Body.
         * The option is a java.lang.String type.
         */
        public T inBody(String inBody) {
            this.inBody = inBody;
            return (T) this;
        }

        /**
         * The template used to format MDN message. The option is a
         * java.lang.String type.
         */
        public T mdnMessageTemplate(String mdnMessageTemplate) {
            this.mdnMessageTemplate = mdnMessageTemplate;
            return (T) this;
        }

        /**
         * The request URI of EDI message. The option is a java.lang.String
         * type.
         */
        public T requestUri(String requestUri) {
            this.requestUri = requestUri;
            return (T) this;
        }

        /**
         * The value included in the Server message header identifying the AS2
         * Server. The option is a java.lang.String type.
         */
        public T server(String server) {
            this.server = server;
            return (T) this;
        }

        /**
         * The Server Fully Qualified Domain Name (FQDN). Used in message ids
         * sent by endpoint. The option is a java.lang.String type.
         */
        public T serverFqdn(String serverFqdn) {
            this.serverFqdn = serverFqdn;
            return (T) this;
        }

        /**
         * The port number of server. The option is a java.lang.Integer type.
         */
        public T serverPortNumber(Integer serverPortNumber) {
            this.serverPortNumber = serverPortNumber;
            return (T) this;
        }

        /**
         * The list of algorithms, in order of preference, requested to generate
         * a message integrity check (MIC) returned in message dispostion
         * notification (MDN). The option is a java.lang.String[] type.
         */
        public T signedReceiptMicAlgorithms(String[] signedReceiptMicAlgorithms) {
            this.signedReceiptMicAlgorithms = signedReceiptMicAlgorithms;
            return (T) this;
        }

        /**
         * The algorithm used to sign EDI message. The option is a
         * org.apache.camel.component.as2.api.AS2SignatureAlgorithm type.
         */
        public T signingAlgorithm(AS2SignatureAlgorithm signingAlgorithm) {
            this.signingAlgorithm = signingAlgorithm;
            return (T) this;
        }

        /**
         * The chain of certificates used to sign EDI message. The option is a
         * java.security.cert.Certificate[] type.
         */
        public T signingCertificateChain(Certificate[] signingCertificateChain) {
            this.signingCertificateChain = signingCertificateChain;
            return (T) this;
        }

        /**
         * The key used to sign the EDI message. The option is a
         * java.security.PrivateKey type.
         */
        public T signingPrivateKey(PrivateKey signingPrivateKey) {
            this.signingPrivateKey = signingPrivateKey;
            return (T) this;
        }

        /**
         * The value of Subject header of AS2 message. The option is a
         * java.lang.String type.
         */
        public T subject(String subject) {
            this.subject = subject;
            return (T) this;
        }

        /**
         * The host name (IP or DNS name) of target host. The option is a
         * java.lang.String type.
         */
        public T targetHostname(String targetHostname) {
            this.targetHostname = targetHostname;
            return (T) this;
        }

        /**
         * The port number of target host. -1 indicates the scheme default port.
         * The option is a java.lang.Integer type.
         */
        public T targetPortNumber(Integer targetPortNumber) {
            this.targetPortNumber = targetPortNumber;
            return (T) this;
        }

        /**
         * The value included in the User-Agent message header identifying the
         * AS2 user agent. The option is a java.lang.String type.
         */
        public T userAgent(String userAgent) {
            this.userAgent = userAgent;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public AS2ApiName getApiName() {
            return apiName;
        }

        public void setApiName(AS2ApiName apiName) {
            this.apiName = apiName;
        }

        public String getMethodName() {
            return methodName;
        }

        public void setMethodName(String methodName) {
            this.methodName = methodName;
        }

        public String getAs2From() {
            return as2From;
        }

        public void setAs2From(String as2From) {
            this.as2From = as2From;
        }

        public AS2MessageStructure getAs2MessageStructure() {
            return as2MessageStructure;
        }

        public void setAs2MessageStructure(
                AS2MessageStructure as2MessageStructure) {
            this.as2MessageStructure = as2MessageStructure;
        }

        public String getAs2To() {
            return as2To;
        }

        public void setAs2To(String as2To) {
            this.as2To = as2To;
        }

        public String getAs2Version() {
            return as2Version;
        }

        public void setAs2Version(String as2Version) {
            this.as2Version = as2Version;
        }

        public String getClientFqdn() {
            return clientFqdn;
        }

        public void setClientFqdn(String clientFqdn) {
            this.clientFqdn = clientFqdn;
        }

        public AS2CompressionAlgorithm getCompressionAlgorithm() {
            return compressionAlgorithm;
        }

        public void setCompressionAlgorithm(
                AS2CompressionAlgorithm compressionAlgorithm) {
            this.compressionAlgorithm = compressionAlgorithm;
        }

        public PrivateKey getDecryptingPrivateKey() {
            return decryptingPrivateKey;
        }

        public void setDecryptingPrivateKey(PrivateKey decryptingPrivateKey) {
            this.decryptingPrivateKey = decryptingPrivateKey;
        }

        public String getDispositionNotificationTo() {
            return dispositionNotificationTo;
        }

        public void setDispositionNotificationTo(
                String dispositionNotificationTo) {
            this.dispositionNotificationTo = dispositionNotificationTo;
        }

        public String getEdiMessageTransferEncoding() {
            return ediMessageTransferEncoding;
        }

        public void setEdiMessageTransferEncoding(
                String ediMessageTransferEncoding) {
            this.ediMessageTransferEncoding = ediMessageTransferEncoding;
        }

        public Object getEdiMessageType() {
            return ediMessageType;
        }

        public void setEdiMessageType(Object ediMessageType) {
            this.ediMessageType = ediMessageType;
        }

        public AS2EncryptionAlgorithm getEncryptingAlgorithm() {
            return encryptingAlgorithm;
        }

        public void setEncryptingAlgorithm(
                AS2EncryptionAlgorithm encryptingAlgorithm) {
            this.encryptingAlgorithm = encryptingAlgorithm;
        }

        public Certificate[] getEncryptingCertificateChain() {
            return encryptingCertificateChain;
        }

        public void setEncryptingCertificateChain(
                Certificate[] encryptingCertificateChain) {
            this.encryptingCertificateChain = encryptingCertificateChain;
        }

        public String getFrom() {
            return from;
        }

        public void setFrom(String from) {
            this.from = from;
        }

        public String getInBody() {
            return inBody;
        }

        public void setInBody(String inBody) {
            this.inBody = inBody;
        }

        public String getMdnMessageTemplate() {
            return mdnMessageTemplate;
        }

        public void setMdnMessageTemplate(String mdnMessageTemplate) {
            this.mdnMessageTemplate = mdnMessageTemplate;
        }

        public String getRequestUri() {
            return requestUri;
        }

        public void setRequestUri(String requestUri) {
            this.requestUri = requestUri;
        }

        public String getServer() {
            return server;
        }

        public void setServer(String server) {
            this.server = server;
        }

        public String getServerFqdn() {
            return serverFqdn;
        }

        public void setServerFqdn(String serverFqdn) {
            this.serverFqdn = serverFqdn;
        }

        public Integer getServerPortNumber() {
            return serverPortNumber;
        }

        public void setServerPortNumber(Integer serverPortNumber) {
            this.serverPortNumber = serverPortNumber;
        }

        public String[] getSignedReceiptMicAlgorithms() {
            return signedReceiptMicAlgorithms;
        }

        public void setSignedReceiptMicAlgorithms(
                String[] signedReceiptMicAlgorithms) {
            this.signedReceiptMicAlgorithms = signedReceiptMicAlgorithms;
        }

        public AS2SignatureAlgorithm getSigningAlgorithm() {
            return signingAlgorithm;
        }

        public void setSigningAlgorithm(AS2SignatureAlgorithm signingAlgorithm) {
            this.signingAlgorithm = signingAlgorithm;
        }

        public Certificate[] getSigningCertificateChain() {
            return signingCertificateChain;
        }

        public void setSigningCertificateChain(
                Certificate[] signingCertificateChain) {
            this.signingCertificateChain = signingCertificateChain;
        }

        public PrivateKey getSigningPrivateKey() {
            return signingPrivateKey;
        }

        public void setSigningPrivateKey(PrivateKey signingPrivateKey) {
            this.signingPrivateKey = signingPrivateKey;
        }

        public String getSubject() {
            return subject;
        }

        public void setSubject(String subject) {
            this.subject = subject;
        }

        public String getTargetHostname() {
            return targetHostname;
        }

        public void setTargetHostname(String targetHostname) {
            this.targetHostname = targetHostname;
        }

        public Integer getTargetPortNumber() {
            return targetPortNumber;
        }

        public void setTargetPortNumber(Integer targetPortNumber) {
            this.targetPortNumber = targetPortNumber;
        }

        public String getUserAgent() {
            return userAgent;
        }

        public void setUserAgent(String userAgent) {
            this.userAgent = userAgent;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class AS2Consumer extends AS2Common<AS2Consumer> {
        private Boolean bridgeErrorHandler;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public AS2Consumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (AS2Consumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public AS2Consumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (AS2Consumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public AS2Consumer exchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (AS2Consumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class AS2Producer extends AS2Common<AS2Producer> {
    }

    public static enum AS2ApiName {
        CLIENT, SERVER;
    }

    public static enum AS2MessageStructure {
        PLAIN, SIGNED, ENCRYPTED, SIGNED_ENCRYPTED, PLAIN_COMPRESSED, SIGNED_COMPRESSED, ENCRYPTED_COMPRESSED, ENCRYPTED_COMPRESSED_SIGNED;
    }

    public static enum AS2CompressionAlgorithm {
        ZLIB;
    }

    public static enum AS2EncryptionAlgorithm {
        AES128_CBC, AES192_CBC, AES256_CBC, AES128_CCM, AES192_CCM, AES256_CCM, AES128_GCM, AES192_GCM, AES256_GCM, CAMELLIA128_CBC, CAMELLIA192_CBC, CAMELLIA256_CBC, CAST5_CBC, DES_CBC, DES_EDE3_CBC, GOST28147_GCFB, IDEA_CBC, RC2_CBC, RC4, SEED_CBC;
    }

    public static enum AS2SignatureAlgorithm {
        SHA3_224WITHRSA, SHA3_256WITHRSA, SHA3_384withRSA, SHA3_512WITHRSA, MD5WITHRSA, SHA1WITHRSA, MD2WITHRSA, SHA224WITHRSA, SHA256WITHRSA, SHA384WITHRSA, SHA512WITHRSA, RIPEMD128WITHRSA, RIPEMD160WITHRSA, RIPEMD256WITHRSA, SHA224WITHDSA, SHA256WITHDSA, SHA384WITHDSA, SHA512WITHDSA, SHA3_224WITHDSA, SHA3_256WITHDSA, SHA3_384WITHDSA, SHA3_512WITHDSA, SHA1WITHDSA, SHA3_224WITHECDSA, SHA3_256WITHECDSA, SHA3_384WITHECDSA, SHA3_512WITHECDSA, SHA1WITHECDSA, SHA224WITHECDSA, SHA256WITHECDSA, SHA384WITHECDSA, SHA512WITHECDSA, SHA1WITHPLAIN_ECDSA, SHA224WITHPLAIN_ECDSA, SHA256WITHPLAIN_ECDSA, SHA384WITHPLAIN_ECDSA, SHA512WITHPLAIN_ECDSA, RIPEMD160WITHPLAIN_ECDSA, SHA1WITHRSAANDMGF1, SHA224WITHRSAANDMGF1, SHA256WITHRSAANDMGF1, SHA384WITHRSAANDMGF1, SHA512WITHRSAANDMGF1, SHA3_224WITHRSAANDMGF1, SHA3_256WITHRSAANDMGF1, SHA3_384WITHRSAANDMGF1, SHA3_512WITHRSAANDMGF1;
    }
}