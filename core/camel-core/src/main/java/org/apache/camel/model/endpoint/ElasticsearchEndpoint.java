/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;

/**
 * The elasticsearch component is used for interfacing with ElasticSearch server
 * using REST API.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class ElasticsearchEndpoint {


    public static class ElasticsearchCommon extends EndpointConfiguration {
        /**
         * Name of the cluster. The option is a java.lang.String type.
         */
        private String clusterName;
        /**
         * The time in ms to wait before connection will timeout. The option is
         * a int type.
         */
        private int connectionTimeout;
        /**
         * Disconnect after it finish calling the producer. The option is a
         * boolean type.
         */
        private boolean disconnect;
        /**
         * Enable SSL. The option is a boolean type.
         */
        private boolean enableSSL;
        /**
         * Comma separated list with ip:port formatted remote transport
         * addresses to use. The option is a java.lang.String type.
         */
        private String hostAddresses;
        /**
         * The name of the index to act against. The option is a
         * java.lang.String type.
         */
        private String indexName;
        /**
         * The type of the index to act against. The option is a
         * java.lang.String type.
         */
        private String indexType;
        /**
         * The time in ms before retry. The option is a int type.
         */
        private int maxRetryTimeout;
        /**
         * What operation to perform. The option is a
         * org.apache.camel.component.elasticsearch.ElasticsearchOperation type.
         */
        private ElasticsearchOperation operation;
        /**
         * Time in ms during which elasticsearch will keep search context alive.
         * The option is a int type.
         */
        private int scrollKeepAliveMs;
        /**
         * The timeout in ms to wait before the socket will timeout. The option
         * is a int type.
         */
        private int socketTimeout;
        /**
         * Enable scroll usage. The option is a boolean type.
         */
        private boolean useScroll;
        /**
         * Index creation waits for the write consistency number of shards to be
         * available. The option is a int type.
         */
        private int waitForActiveShards;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;

        public String getClusterName() {
            return clusterName;
        }

        public void setClusterName(String clusterName) {
            this.clusterName = clusterName;
        }

        public int getConnectionTimeout() {
            return connectionTimeout;
        }

        public void setConnectionTimeout(int connectionTimeout) {
            this.connectionTimeout = connectionTimeout;
        }

        public boolean getDisconnect() {
            return disconnect;
        }

        public void setDisconnect(boolean disconnect) {
            this.disconnect = disconnect;
        }

        public boolean getEnableSSL() {
            return enableSSL;
        }

        public void setEnableSSL(boolean enableSSL) {
            this.enableSSL = enableSSL;
        }

        public String getHostAddresses() {
            return hostAddresses;
        }

        public void setHostAddresses(String hostAddresses) {
            this.hostAddresses = hostAddresses;
        }

        public String getIndexName() {
            return indexName;
        }

        public void setIndexName(String indexName) {
            this.indexName = indexName;
        }

        public String getIndexType() {
            return indexType;
        }

        public void setIndexType(String indexType) {
            this.indexType = indexType;
        }

        public int getMaxRetryTimeout() {
            return maxRetryTimeout;
        }

        public void setMaxRetryTimeout(int maxRetryTimeout) {
            this.maxRetryTimeout = maxRetryTimeout;
        }

        public ElasticsearchOperation getOperation() {
            return operation;
        }

        public void setOperation(ElasticsearchOperation operation) {
            this.operation = operation;
        }

        public int getScrollKeepAliveMs() {
            return scrollKeepAliveMs;
        }

        public void setScrollKeepAliveMs(int scrollKeepAliveMs) {
            this.scrollKeepAliveMs = scrollKeepAliveMs;
        }

        public int getSocketTimeout() {
            return socketTimeout;
        }

        public void setSocketTimeout(int socketTimeout) {
            this.socketTimeout = socketTimeout;
        }

        public boolean getUseScroll() {
            return useScroll;
        }

        public void setUseScroll(boolean useScroll) {
            this.useScroll = useScroll;
        }

        public int getWaitForActiveShards() {
            return waitForActiveShards;
        }

        public void setWaitForActiveShards(int waitForActiveShards) {
            this.waitForActiveShards = waitForActiveShards;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class ElasticsearchConsumer extends ElasticsearchCommon {
    }

    public static class ElasticsearchProducer extends ElasticsearchCommon {
    }

    public static enum ElasticsearchOperation {
        Index, Update, Bulk, BulkIndex, GetById, MultiGet, MultiSearch, Delete, DeleteIndex, Search, Exists, Ping, Info;
    }
}