/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.cert.Certificate;
import javax.annotation.Generated;

/**
 * The crypto component is used for signing and verifying exchanges using the
 * Signature Service of the Java Cryptographic Extension (JCE).
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class DigitalSignatureEndpoint {


    public static class DigitalSignatureCommon extends EndpointConfiguration {
        /**
         * Set the Crypto operation from that supplied after the crypto scheme
         * in the endpoint uri e.g. crypto:sign sets sign as the operation. The
         * option is a org.apache.camel.component.crypto.CryptoOperation type.
         */
        private CryptoOperation cryptoOperation;
        /**
         * The logical name of this operation. The option is a java.lang.String
         * type.
         */
        private String name;
        /**
         * Sets the JCE name of the Algorithm that should be used for the
         * signer. The option is a java.lang.String type.
         */
        private String algorithm;
        /**
         * Sets the alias used to query the KeyStore for keys and {link
         * java.security.cert.Certificate Certificates} to be used in signing
         * and verifying exchanges. This value can be provided at runtime via
         * the message header
         * org.apache.camel.component.crypto.DigitalSignatureConstants#KEYSTORE_ALIAS. The option is a java.lang.String type.
         */
        private String alias;
        /**
         * Sets the reference name for a PrivateKey that can be found in the
         * registry. The option is a java.lang.String type.
         */
        private String certificateName;
        /**
         * Sets the KeyStore that can contain keys and Certficates for use in
         * signing and verifying exchanges. A KeyStore is typically used with an
         * alias, either one supplied in the Route definition or dynamically via
         * the message header CamelSignatureKeyStoreAlias. If no alias is
         * supplied and there is only a single entry in the Keystore, then this
         * single entry will be used. The option is a java.security.KeyStore
         * type.
         */
        private KeyStore keystore;
        /**
         * Sets the reference name for a Keystore that can be found in the
         * registry. The option is a java.lang.String type.
         */
        private String keystoreName;
        /**
         * Set the PrivateKey that should be used to sign the exchange. The
         * option is a java.security.PrivateKey type.
         */
        private PrivateKey privateKey;
        /**
         * Sets the reference name for a PrivateKey that can be found in the
         * registry. The option is a java.lang.String type.
         */
        private String privateKeyName;
        /**
         * Set the id of the security provider that provides the configured
         * Signature algorithm. The option is a java.lang.String type.
         */
        private String provider;
        /**
         * references that should be resolved when the context changes. The
         * option is a java.lang.String type.
         */
        private String publicKeyName;
        /**
         * Sets the reference name for a SecureRandom that can be found in the
         * registry. The option is a java.lang.String type.
         */
        private String secureRandomName;
        /**
         * Set the name of the message header that should be used to store the
         * base64 encoded signature. This defaults to 'CamelDigitalSignature'.
         * The option is a java.lang.String type.
         */
        private String signatureHeaderName;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Set the size of the buffer used to read in the Exchange payload data.
         * The option is a java.lang.Integer type.
         */
        private Integer bufferSize;
        /**
         * Set the Certificate that should be used to verify the signature in
         * the exchange based on its payload. The option is a
         * java.security.cert.Certificate type.
         */
        private Certificate certificate;
        /**
         * Determines if the Signature specific headers be cleared after signing
         * and verification. Defaults to true, and should only be made otherwise
         * at your extreme peril as vital private information such as Keys and
         * passwords may escape if unset. The option is a boolean type.
         */
        private Boolean clearHeaders;
        /**
         * Sets the KeyStore that can contain keys and Certficates for use in
         * signing and verifying exchanges based on the given
         * KeyStoreParameters. A KeyStore is typically used with an alias,
         * either one supplied in the Route definition or dynamically via the
         * message header CamelSignatureKeyStoreAlias. If no alias is supplied
         * and there is only a single entry in the Keystore, then this single
         * entry will be used. The option is a
         * org.apache.camel.support.jsse.KeyStoreParameters type.
         */
        private Object keyStoreParameters;
        /**
         * Set the PublicKey that should be used to verify the signature in the
         * exchange. The option is a java.security.PublicKey type.
         */
        private PublicKey publicKey;
        /**
         * Set the SecureRandom used to initialize the Signature service. The
         * option is a java.security.SecureRandom type.
         */
        private SecureRandom secureRandom;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;
        /**
         * Sets the password used to access an aliased PrivateKey in the
         * KeyStore. The option is a java.lang.String type.
         */
        private Character[] password;

        public CryptoOperation getCryptoOperation() {
            return cryptoOperation;
        }

        public void setCryptoOperation(CryptoOperation cryptoOperation) {
            this.cryptoOperation = cryptoOperation;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getAlgorithm() {
            return algorithm;
        }

        public void setAlgorithm(String algorithm) {
            this.algorithm = algorithm;
        }

        public String getAlias() {
            return alias;
        }

        public void setAlias(String alias) {
            this.alias = alias;
        }

        public String getCertificateName() {
            return certificateName;
        }

        public void setCertificateName(String certificateName) {
            this.certificateName = certificateName;
        }

        public KeyStore getKeystore() {
            return keystore;
        }

        public void setKeystore(KeyStore keystore) {
            this.keystore = keystore;
        }

        public String getKeystoreName() {
            return keystoreName;
        }

        public void setKeystoreName(String keystoreName) {
            this.keystoreName = keystoreName;
        }

        public PrivateKey getPrivateKey() {
            return privateKey;
        }

        public void setPrivateKey(PrivateKey privateKey) {
            this.privateKey = privateKey;
        }

        public String getPrivateKeyName() {
            return privateKeyName;
        }

        public void setPrivateKeyName(String privateKeyName) {
            this.privateKeyName = privateKeyName;
        }

        public String getProvider() {
            return provider;
        }

        public void setProvider(String provider) {
            this.provider = provider;
        }

        public String getPublicKeyName() {
            return publicKeyName;
        }

        public void setPublicKeyName(String publicKeyName) {
            this.publicKeyName = publicKeyName;
        }

        public String getSecureRandomName() {
            return secureRandomName;
        }

        public void setSecureRandomName(String secureRandomName) {
            this.secureRandomName = secureRandomName;
        }

        public String getSignatureHeaderName() {
            return signatureHeaderName;
        }

        public void setSignatureHeaderName(String signatureHeaderName) {
            this.signatureHeaderName = signatureHeaderName;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Integer getBufferSize() {
            return bufferSize;
        }

        public void setBufferSize(Integer bufferSize) {
            this.bufferSize = bufferSize;
        }

        public Certificate getCertificate() {
            return certificate;
        }

        public void setCertificate(Certificate certificate) {
            this.certificate = certificate;
        }

        public Boolean getClearHeaders() {
            return clearHeaders;
        }

        public void setClearHeaders(Boolean clearHeaders) {
            this.clearHeaders = clearHeaders;
        }

        public Object getKeyStoreParameters() {
            return keyStoreParameters;
        }

        public void setKeyStoreParameters(Object keyStoreParameters) {
            this.keyStoreParameters = keyStoreParameters;
        }

        public PublicKey getPublicKey() {
            return publicKey;
        }

        public void setPublicKey(PublicKey publicKey) {
            this.publicKey = publicKey;
        }

        public SecureRandom getSecureRandom() {
            return secureRandom;
        }

        public void setSecureRandom(SecureRandom secureRandom) {
            this.secureRandom = secureRandom;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Character[] getPassword() {
            return password;
        }

        public void setPassword(Character[] password) {
            this.password = password;
        }
    }

    public static class DigitalSignatureConsumer
            extends
                DigitalSignatureCommon {
    }

    public static class DigitalSignatureProducer
            extends
                DigitalSignatureCommon {
    }

    public static enum CryptoOperation {
        sign, verify;
    }
}