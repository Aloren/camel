/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * To integrate with the Soroush chat bot.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface SoroushBotEndpointBuilder {


    public static class SoroushBotCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        SoroushBotCommonBuilder(String path) {
            super("soroush", path);
        }
        /**
         * The endpoint type. Support getMessage as consumer and
         * sendMessage,uploadFile,downloadFile as producer. The option is a
         * org.apache.camel.component.soroushbot.models.Endpoint type.
         */
        public T endpoint(Endpoint endpoint) {
            this.properties.put("endpoint", endpoint);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Automatically download SoroushMessage.fileUrl and
         * SoroushMessage.thumbnailUrl if exists for the message and store them
         * in SoroushMessage.file and SoroushMessage.thumbnail field. The option
         * is a java.lang.Boolean type.
         */
        public T autoDownload(Boolean autoDownload) {
            this.properties.put("autoDownload", autoDownload);
            return (T) this;
        }
        /**
         * The timeout in millisecond to reconnect the existing getMessage
         * connection to ensure that the connection is always live and does not
         * dead without notifying the bot. this value should not be changed. The
         * option is a long type.
         */
        public T reconnectIdleConnectionTimeout(
                long reconnectIdleConnectionTimeout) {
            this.properties.put("reconnectIdleConnectionTimeout", reconnectIdleConnectionTimeout);
            return (T) this;
        }
        /**
         * If true, when downloading an attached file, thumbnail will be
         * downloaded if provided in the message. Otherwise, only the file will
         * be downloaded. The option is a java.lang.Boolean type.
         */
        public T downloadThumbnail(Boolean downloadThumbnail) {
            this.properties.put("downloadThumbnail", downloadThumbnail);
            return (T) this;
        }
        /**
         * Force to download SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl)
         * if exists, even if the SoroushMessage.file(SoroushMessage.thumbnail)
         * was not null in that message. The option is a java.lang.Boolean type.
         */
        public T forceDownload(Boolean forceDownload) {
            this.properties.put("forceDownload", forceDownload);
            return (T) this;
        }
        /**
         * The strategy to backoff in case of connection failure. Currently 3
         * strategies are supported: 1. Exponential (default): It multiply
         * retryWaitingTime by retryExponentialCoefficient after each connection
         * failure. 2. Linear: It increase retryWaitingTime by
         * retryLinearIncrement after each connection failure. 3. Fixed: Always
         * use retryWaitingTime as the time between retries. The option is a
         * java.lang.String type.
         */
        public T backOffStrategy(String backOffStrategy) {
            this.properties.put("backOffStrategy", backOffStrategy);
            return (T) this;
        }
        /**
         * Connection timeout in ms when connecting to soroush API. The option
         * is a java.lang.Integer type.
         */
        public T connectionTimeout(Integer connectionTimeout) {
            this.properties.put("connectionTimeout", connectionTimeout);
            return (T) this;
        }
        /**
         * Maximum connection retry when fail to connect to soroush API, if the
         * quota is reached, MaximumConnectionRetryReachedException is thrown
         * for that message. The option is a java.lang.Integer type.
         */
        public T maxConnectionRetry(Integer maxConnectionRetry) {
            this.properties.put("maxConnectionRetry", maxConnectionRetry);
            return (T) this;
        }
        /**
         * Maximum amount of time (in millisecond) a thread wait before retrying
         * failed request. The option is a java.lang.Long type.
         */
        public T maxRetryWaitingTime(Long maxRetryWaitingTime) {
            this.properties.put("maxRetryWaitingTime", maxRetryWaitingTime);
            return (T) this;
        }
        /**
         * Coefficient to compute back off time when using Exponential Back Off
         * strategy. The option is a java.lang.Long type.
         */
        public T retryExponentialCoefficient(Long retryExponentialCoefficient) {
            this.properties.put("retryExponentialCoefficient", retryExponentialCoefficient);
            return (T) this;
        }
        /**
         * The amount of time (in millisecond) which adds to waiting time when
         * using Linear back off strategy. The option is a java.lang.Long type.
         */
        public T retryLinearIncrement(Long retryLinearIncrement) {
            this.properties.put("retryLinearIncrement", retryLinearIncrement);
            return (T) this;
        }
        /**
         * Waiting time before retry failed request (Millisecond). If
         * backOffStrategy is not Fixed this is the based value for computing
         * back off waiting time. the first retry is always happen immediately
         * after failure and retryWaitingTime do not apply to the first retry.
         * The option is a java.lang.Long type.
         */
        public T retryWaitingTime(Long retryWaitingTime) {
            this.properties.put("retryWaitingTime", retryWaitingTime);
            return (T) this;
        }
        /**
         * The authorization token for using the bot. if uri path does not
         * contain authorization token, this token will be used. The option is a
         * java.lang.String type.
         */
        public T authorizationToken(String authorizationToken) {
            this.properties.put("authorizationToken", authorizationToken);
            return (T) this;
        }
        /**
         * Automatically upload attachments when a message goes to the
         * sendMessage endpoint and the SoroushMessage.file
         * (SoroushMessage.thumbnail) has been set and
         * SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl) is null. The
         * option is a java.lang.Boolean type.
         */
        public T autoUploadFile(Boolean autoUploadFile) {
            this.properties.put("autoUploadFile", autoUploadFile);
            return (T) this;
        }
        /**
         * Force to upload SoroushMessage.file(SoroushMessage.thumbnail) if
         * exists, even if the
         * SoroushMessage.fileUrl(SoroushMessage.thumbnailUrl) is not null in
         * the message. The option is a java.lang.Boolean type.
         */
        public T forceUpload(Boolean forceUpload) {
            this.properties.put("forceUpload", forceUpload);
            return (T) this;
        }
    }

    public static class SoroushBotConsumerBuilder
            extends
                SoroushBotCommonBuilder<SoroushBotConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public SoroushBotConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public SoroushBotConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (SoroushBotConsumerBuilder) this;
        }
        /**
         * Number of Thread created by consumer in the route. if you use this
         * method for parallelism, it is guaranteed that messages from same user
         * always execute in the same thread and therefore messages from the
         * same user are processed sequentially. Default value notice: using
         * SoroushBotSingleThreadConsumer. The option is a java.lang.Integer
         * type.
         */
        public SoroushBotConsumerBuilder concurrentConsumers(
                Integer concurrentConsumers) {
            this.properties.put("concurrentConsumers", concurrentConsumers);
            return (SoroushBotConsumerBuilder) this;
        }
        /**
         * Maximum capacity of each queue when concurrentConsumers is greater
         * than 1. if a queue become full, every message that should go to that
         * queue will be dropped. If bridgeErrorHandler is set to true, an
         * exchange with CongestionException is directed to ErrorHandler. You
         * can then processed the error using
         * onException(CongestionException.class) route. Default value notice:
         * infinite capacity. The option is a java.lang.Integer type.
         */
        public SoroushBotConsumerBuilder queueCapacityPerThread(
                Integer queueCapacityPerThread) {
            this.properties.put("queueCapacityPerThread", queueCapacityPerThread);
            return (SoroushBotConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public SoroushBotConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (SoroushBotConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public SoroushBotConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (SoroushBotConsumerBuilder) this;
        }
    }

    public static class SoroushBotProducerBuilder
            extends
                SoroushBotCommonBuilder<SoroushBotProducerBuilder>
            implements
                EndpointProducerBuilder {
        public SoroushBotProducerBuilder(String path) {
            super(path);
        }
    }

    public static enum Endpoint {
        sendMessage, getMessage, uploadFile, downloadFile;
    }
    public default SoroushBotConsumerBuilder fromSoroushBot(String path) {
        return new SoroushBotConsumerBuilder(path);
    }
    public default SoroushBotProducerBuilder toSoroushBot(String path) {
        return new SoroushBotProducerBuilder(path);
    }
}