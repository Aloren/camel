/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The Ignite Cache endpoint is one of camel-ignite endpoints which allows you
 * to interact with an Ignite Cache.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface IgniteCacheEndpointBuilder {


    public static class IgniteCacheCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        IgniteCacheCommonBuilder(String path) {
            super("ignite-cache", path);
        }
        /**
         * The cache name. The option is a <code>java.lang.String</code> type.
         */
        public T cacheName(String cacheName) {
            this.properties.put("cacheName", cacheName);
            return (T) this;
        }
        /**
         * Sets whether to propagate the incoming body if the return type of the
         * underlying Ignite operation is void. The option is a
         * <code>boolean</code> type.
         */
        public T propagateIncomingBodyIfNoReturnValue(
                boolean propagateIncomingBodyIfNoReturnValue) {
            this.properties.put("propagateIncomingBodyIfNoReturnValue", propagateIncomingBodyIfNoReturnValue);
            return (T) this;
        }
        /**
         * Sets whether to propagate the incoming body if the return type of the
         * underlying Ignite operation is void. The option will be converted to
         * a <code>boolean</code> type.
         */
        public T propagateIncomingBodyIfNoReturnValue(
                String propagateIncomingBodyIfNoReturnValue) {
            this.properties.put("propagateIncomingBodyIfNoReturnValue", propagateIncomingBodyIfNoReturnValue);
            return (T) this;
        }
        /**
         * Sets whether to treat Collections as cache objects or as Collections
         * of items to insert/update/compute, etc. The option is a
         * <code>boolean</code> type.
         */
        public T treatCollectionsAsCacheObjects(
                boolean treatCollectionsAsCacheObjects) {
            this.properties.put("treatCollectionsAsCacheObjects", treatCollectionsAsCacheObjects);
            return (T) this;
        }
        /**
         * Sets whether to treat Collections as cache objects or as Collections
         * of items to insert/update/compute, etc. The option will be converted
         * to a <code>boolean</code> type.
         */
        public T treatCollectionsAsCacheObjects(
                String treatCollectionsAsCacheObjects) {
            this.properties.put("treatCollectionsAsCacheObjects", treatCollectionsAsCacheObjects);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class IgniteCacheConsumerBuilder
            extends
                IgniteCacheCommonBuilder<IgniteCacheConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public IgniteCacheConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Whether auto unsubscribe is enabled in the Continuous Query Consumer.
         * The option is a <code>boolean</code> type.
         */
        public IgniteCacheConsumerBuilder autoUnsubscribe(
                boolean autoUnsubscribe) {
            this.properties.put("autoUnsubscribe", autoUnsubscribe);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * Whether auto unsubscribe is enabled in the Continuous Query Consumer.
         * The option will be converted to a <code>boolean</code> type.
         */
        public IgniteCacheConsumerBuilder autoUnsubscribe(String autoUnsubscribe) {
            this.properties.put("autoUnsubscribe", autoUnsubscribe);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public IgniteCacheConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public IgniteCacheConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * Whether to process existing results that match the query. Used on
         * initialization of the Continuous Query Consumer. The option is a
         * <code>boolean</code> type.
         */
        public IgniteCacheConsumerBuilder fireExistingQueryResults(
                boolean fireExistingQueryResults) {
            this.properties.put("fireExistingQueryResults", fireExistingQueryResults);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * Whether to process existing results that match the query. Used on
         * initialization of the Continuous Query Consumer. The option will be
         * converted to a <code>boolean</code> type.
         */
        public IgniteCacheConsumerBuilder fireExistingQueryResults(
                String fireExistingQueryResults) {
            this.properties.put("fireExistingQueryResults", fireExistingQueryResults);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * Whether to pack each update in an individual Exchange, even if
         * multiple updates are received in one batch. Only used by the
         * Continuous Query Consumer. The option is a <code>boolean</code> type.
         */
        public IgniteCacheConsumerBuilder oneExchangePerUpdate(
                boolean oneExchangePerUpdate) {
            this.properties.put("oneExchangePerUpdate", oneExchangePerUpdate);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * Whether to pack each update in an individual Exchange, even if
         * multiple updates are received in one batch. Only used by the
         * Continuous Query Consumer. The option will be converted to a
         * <code>boolean</code> type.
         */
        public IgniteCacheConsumerBuilder oneExchangePerUpdate(
                String oneExchangePerUpdate) {
            this.properties.put("oneExchangePerUpdate", oneExchangePerUpdate);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * The page size. Only used by the Continuous Query Consumer. The option
         * is a <code>int</code> type.
         */
        public IgniteCacheConsumerBuilder pageSize(int pageSize) {
            this.properties.put("pageSize", pageSize);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * The page size. Only used by the Continuous Query Consumer. The option
         * will be converted to a <code>int</code> type.
         */
        public IgniteCacheConsumerBuilder pageSize(String pageSize) {
            this.properties.put("pageSize", pageSize);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * The remote filter, only used by the Continuous Query Consumer. The
         * option is a
         * <code>org.apache.ignite.cache.CacheEntryEventSerializableFilter&lt;java.lang.Object, java.lang.Object&gt;</code> type.
         */
        public IgniteCacheConsumerBuilder remoteFilter(Object remoteFilter) {
            this.properties.put("remoteFilter", remoteFilter);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * The remote filter, only used by the Continuous Query Consumer. The
         * option will be converted to a
         * <code>org.apache.ignite.cache.CacheEntryEventSerializableFilter&lt;java.lang.Object, java.lang.Object&gt;</code> type.
         */
        public IgniteCacheConsumerBuilder remoteFilter(String remoteFilter) {
            this.properties.put("remoteFilter", remoteFilter);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * The time interval for the Continuous Query Consumer. The option is a
         * <code>long</code> type.
         */
        public IgniteCacheConsumerBuilder timeInterval(long timeInterval) {
            this.properties.put("timeInterval", timeInterval);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * The time interval for the Continuous Query Consumer. The option will
         * be converted to a <code>long</code> type.
         */
        public IgniteCacheConsumerBuilder timeInterval(String timeInterval) {
            this.properties.put("timeInterval", timeInterval);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public IgniteCacheConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public IgniteCacheConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public IgniteCacheConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (IgniteCacheConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public IgniteCacheConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (IgniteCacheConsumerBuilder) this;
        }
    }

    public static class IgniteCacheProducerBuilder
            extends
                IgniteCacheCommonBuilder<IgniteCacheProducerBuilder>
            implements
                EndpointProducerBuilder {
        public IgniteCacheProducerBuilder(String path) {
            super(path);
        }
        /**
         * The Query to execute, only needed for operations that require it, and
         * for the Continuous Query Consumer. The option is a
         * <code>org.apache.ignite.cache.query.Query&lt;javax.cache.Cache$Entry&lt;java.lang.Object, java.lang.Object&gt;&gt;</code> type.
         */
        public IgniteCacheProducerBuilder query(Object query) {
            this.properties.put("query", query);
            return (IgniteCacheProducerBuilder) this;
        }
        /**
         * The Query to execute, only needed for operations that require it, and
         * for the Continuous Query Consumer. The option will be converted to a
         * <code>org.apache.ignite.cache.query.Query&lt;javax.cache.Cache$Entry&lt;java.lang.Object, java.lang.Object&gt;&gt;</code> type.
         */
        public IgniteCacheProducerBuilder query(String query) {
            this.properties.put("query", query);
            return (IgniteCacheProducerBuilder) this;
        }
        /**
         * The CachePeekMode, only needed for operations that require it
         * (IgniteCacheOperation#SIZE). The option is a
         * <code>org.apache.ignite.cache.CachePeekMode</code> type.
         */
        public IgniteCacheProducerBuilder cachePeekMode(
                CachePeekMode cachePeekMode) {
            this.properties.put("cachePeekMode", cachePeekMode);
            return (IgniteCacheProducerBuilder) this;
        }
        /**
         * The CachePeekMode, only needed for operations that require it
         * (IgniteCacheOperation#SIZE). The option will be converted to a
         * <code>org.apache.ignite.cache.CachePeekMode</code> type.
         */
        public IgniteCacheProducerBuilder cachePeekMode(String cachePeekMode) {
            this.properties.put("cachePeekMode", cachePeekMode);
            return (IgniteCacheProducerBuilder) this;
        }
        /**
         * Whether to fail the initialization if the cache doesn't exist. The
         * option is a <code>boolean</code> type.
         */
        public IgniteCacheProducerBuilder failIfInexistentCache(
                boolean failIfInexistentCache) {
            this.properties.put("failIfInexistentCache", failIfInexistentCache);
            return (IgniteCacheProducerBuilder) this;
        }
        /**
         * Whether to fail the initialization if the cache doesn't exist. The
         * option will be converted to a <code>boolean</code> type.
         */
        public IgniteCacheProducerBuilder failIfInexistentCache(
                String failIfInexistentCache) {
            this.properties.put("failIfInexistentCache", failIfInexistentCache);
            return (IgniteCacheProducerBuilder) this;
        }
        /**
         * The cache operation to invoke. Possible values: GET, PUT, REMOVE,
         * SIZE, REBALANCE, QUERY, CLEAR. The option is a
         * <code>org.apache.camel.component.ignite.cache.IgniteCacheOperation</code> type.
         */
        public IgniteCacheProducerBuilder operation(
                IgniteCacheOperation operation) {
            this.properties.put("operation", operation);
            return (IgniteCacheProducerBuilder) this;
        }
        /**
         * The cache operation to invoke. Possible values: GET, PUT, REMOVE,
         * SIZE, REBALANCE, QUERY, CLEAR. The option will be converted to a
         * <code>org.apache.camel.component.ignite.cache.IgniteCacheOperation</code> type.
         */
        public IgniteCacheProducerBuilder operation(String operation) {
            this.properties.put("operation", operation);
            return (IgniteCacheProducerBuilder) this;
        }
    }

    public static enum CachePeekMode {
        ALL, NEAR, PRIMARY, BACKUP, ONHEAP, OFFHEAP;
    }

    public static enum IgniteCacheOperation {
        GET, PUT, REMOVE, SIZE, REBALANCE, QUERY, CLEAR;
    }
    public default IgniteCacheConsumerBuilder fromIgniteCache(String path) {
        return new IgniteCacheConsumerBuilder(path);
    }
    public default IgniteCacheProducerBuilder toIgniteCache(String path) {
        return new IgniteCacheProducerBuilder(path);
    }
}