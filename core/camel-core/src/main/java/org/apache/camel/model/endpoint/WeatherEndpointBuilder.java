/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * Polls the weather information from Open Weather Map.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface WeatherEndpointBuilder {


    public static class WeatherCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        WeatherCommonBuilder(String path) {
            super("weather", path);
        }
        /**
         * The name value is not used. The option is a java.lang.String type.
         */
        public T name(String name) {
            this.properties.put("name", name);
            return (T) this;
        }
        /**
         * APPID ID used to authenticate the user connected to the API Server.
         * The option is a java.lang.String type.
         */
        public T appid(String appid) {
            this.properties.put("appid", appid);
            return (T) this;
        }
        /**
         * To store the weather result in this header instead of the message
         * body. This is useable if you want to keep current message body as-is.
         * The option is a java.lang.String type.
         */
        public T headerName(String headerName) {
            this.properties.put("headerName", headerName);
            return (T) this;
        }
        /**
         * Language of the response. The option is a
         * org.apache.camel.component.weather.WeatherLanguage type.
         */
        public T language(WeatherLanguage language) {
            this.properties.put("language", language);
            return (T) this;
        }
        /**
         * Language of the response. The option will be converted to a
         * org.apache.camel.component.weather.WeatherLanguage type.
         */
        public T language(String language) {
            this.properties.put("language", language);
            return (T) this;
        }
        /**
         * The output format of the weather data. The option is a
         * org.apache.camel.component.weather.WeatherMode type.
         */
        public T mode(WeatherMode mode) {
            this.properties.put("mode", mode);
            return (T) this;
        }
        /**
         * The output format of the weather data. The option will be converted
         * to a org.apache.camel.component.weather.WeatherMode type.
         */
        public T mode(String mode) {
            this.properties.put("mode", mode);
            return (T) this;
        }
        /**
         * If null, the current weather will be returned, else use values of 5,
         * 7, 14 days. Only the numeric value for the forecast period is
         * actually parsed, so spelling, capitalisation of the time period is up
         * to you (its ignored). The option is a java.lang.String type.
         */
        public T period(String period) {
            this.properties.put("period", period);
            return (T) this;
        }
        /**
         * The units for temperature measurement. The option is a
         * org.apache.camel.component.weather.WeatherUnits type.
         */
        public T units(WeatherUnits units) {
            this.properties.put("units", units);
            return (T) this;
        }
        /**
         * The units for temperature measurement. The option will be converted
         * to a org.apache.camel.component.weather.WeatherUnits type.
         */
        public T units(String units) {
            this.properties.put("units", units);
            return (T) this;
        }
        /**
         * The API to be use (current, forecast/3 hour, forecast daily,
         * station). The option is a
         * org.apache.camel.component.weather.WeatherApi type.
         */
        public T weatherApi(WeatherApi weatherApi) {
            this.properties.put("weatherApi", weatherApi);
            return (T) this;
        }
        /**
         * The API to be use (current, forecast/3 hour, forecast daily,
         * station). The option will be converted to a
         * org.apache.camel.component.weather.WeatherApi type.
         */
        public T weatherApi(String weatherApi) {
            this.properties.put("weatherApi", weatherApi);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a boolean type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * To use a custom HttpConnectionManager to manage connections. The
         * option is a org.apache.commons.httpclient.HttpConnectionManager type.
         */
        public T httpConnectionManager(Object httpConnectionManager) {
            this.properties.put("httpConnectionManager", httpConnectionManager);
            return (T) this;
        }
        /**
         * To use a custom HttpConnectionManager to manage connections. The
         * option will be converted to a
         * org.apache.commons.httpclient.HttpConnectionManager type.
         */
        public T httpConnectionManager(String httpConnectionManager) {
            this.properties.put("httpConnectionManager", httpConnectionManager);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a boolean type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Number of results to be found. The option is a java.lang.Integer
         * type.
         */
        public T cnt(Integer cnt) {
            this.properties.put("cnt", cnt);
            return (T) this;
        }
        /**
         * Number of results to be found. The option will be converted to a
         * java.lang.Integer type.
         */
        public T cnt(String cnt) {
            this.properties.put("cnt", cnt);
            return (T) this;
        }
        /**
         * List of id's of city/stations. You can separate multiple ids by
         * comma. The option is a java.lang.String type.
         */
        public T ids(List<String> ids) {
            this.properties.put("ids", ids);
            return (T) this;
        }
        /**
         * List of id's of city/stations. You can separate multiple ids by
         * comma. The option will be converted to a java.lang.String type.
         */
        public T ids(String ids) {
            this.properties.put("ids", ids);
            return (T) this;
        }
        /**
         * Latitude of location. You can use lat and lon options instead of
         * location. For boxed queries this is the bottom latitude. The option
         * is a java.lang.String type.
         */
        public T lat(String lat) {
            this.properties.put("lat", lat);
            return (T) this;
        }
        /**
         * If null Camel will try and determine your current location using the
         * geolocation of your ip address, else specify the city,country. For
         * well known city names, Open Weather Map will determine the best fit,
         * but multiple results may be returned. Hence specifying and country as
         * well will return more accurate data. If you specify current as the
         * location then the component will try to get the current latitude and
         * longitude and use that to get the weather details. You can use lat
         * and lon options instead of location. The option is a java.lang.String
         * type.
         */
        public T location(String location) {
            this.properties.put("location", location);
            return (T) this;
        }
        /**
         * Longitude of location. You can use lat and lon options instead of
         * location. For boxed queries this is the left longtitude. The option
         * is a java.lang.String type.
         */
        public T lon(String lon) {
            this.properties.put("lon", lon);
            return (T) this;
        }
        /**
         * For boxed queries this is the right longtitude. Needs to be used in
         * combination with topLat and zoom. The option is a java.lang.String
         * type.
         */
        public T rightLon(String rightLon) {
            this.properties.put("rightLon", rightLon);
            return (T) this;
        }
        /**
         * For boxed queries this is the top latitude. Needs to be used in
         * combination with rightLon and zoom. The option is a java.lang.String
         * type.
         */
        public T topLat(String topLat) {
            this.properties.put("topLat", topLat);
            return (T) this;
        }
        /**
         * Zip-code, e.g. 94040,us. The option is a java.lang.String type.
         */
        public T zip(String zip) {
            this.properties.put("zip", zip);
            return (T) this;
        }
        /**
         * For boxed queries this is the zoom. Needs to be used in combination
         * with rightLon and topLat. The option is a java.lang.Integer type.
         */
        public T zoom(Integer zoom) {
            this.properties.put("zoom", zoom);
            return (T) this;
        }
        /**
         * For boxed queries this is the zoom. Needs to be used in combination
         * with rightLon and topLat. The option will be converted to a
         * java.lang.Integer type.
         */
        public T zoom(String zoom) {
            this.properties.put("zoom", zoom);
            return (T) this;
        }
        /**
         * Domain for proxy NTLM authentication. The option is a
         * java.lang.String type.
         */
        public T proxyAuthDomain(String proxyAuthDomain) {
            this.properties.put("proxyAuthDomain", proxyAuthDomain);
            return (T) this;
        }
        /**
         * Optional host for proxy NTLM authentication. The option is a
         * java.lang.String type.
         */
        public T proxyAuthHost(String proxyAuthHost) {
            this.properties.put("proxyAuthHost", proxyAuthHost);
            return (T) this;
        }
        /**
         * Authentication method for proxy, either as Basic, Digest or NTLM. The
         * option is a java.lang.String type.
         */
        public T proxyAuthMethod(String proxyAuthMethod) {
            this.properties.put("proxyAuthMethod", proxyAuthMethod);
            return (T) this;
        }
        /**
         * Password for proxy authentication. The option is a java.lang.String
         * type.
         */
        public T proxyAuthPassword(String proxyAuthPassword) {
            this.properties.put("proxyAuthPassword", proxyAuthPassword);
            return (T) this;
        }
        /**
         * Username for proxy authentication. The option is a java.lang.String
         * type.
         */
        public T proxyAuthUsername(String proxyAuthUsername) {
            this.properties.put("proxyAuthUsername", proxyAuthUsername);
            return (T) this;
        }
        /**
         * The proxy host name. The option is a java.lang.String type.
         */
        public T proxyHost(String proxyHost) {
            this.properties.put("proxyHost", proxyHost);
            return (T) this;
        }
        /**
         * The proxy port number. The option is a java.lang.Integer type.
         */
        public T proxyPort(Integer proxyPort) {
            this.properties.put("proxyPort", proxyPort);
            return (T) this;
        }
        /**
         * The proxy port number. The option will be converted to a
         * java.lang.Integer type.
         */
        public T proxyPort(String proxyPort) {
            this.properties.put("proxyPort", proxyPort);
            return (T) this;
        }
        /**
         * The geolocation service now needs an accessKey to be used. The option
         * is a java.lang.String type.
         */
        public T geolocationAccessKey(String geolocationAccessKey) {
            this.properties.put("geolocationAccessKey", geolocationAccessKey);
            return (T) this;
        }
        /**
         * The geolocation service now needs to specify the IP associated to the
         * accessKey you're using. The option is a java.lang.String type.
         */
        public T geolocationRequestHostIP(String geolocationRequestHostIP) {
            this.properties.put("geolocationRequestHostIP", geolocationRequestHostIP);
            return (T) this;
        }
    }

    public static class WeatherConsumerBuilder
            extends
                WeatherCommonBuilder<WeatherConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public WeatherConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public WeatherConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a boolean type.
         */
        public WeatherConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option is a
         * boolean type.
         */
        public WeatherConsumerBuilder sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option will be
         * converted to a boolean type.
         */
        public WeatherConsumerBuilder sendEmptyMessageWhenIdle(
                String sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public WeatherConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a org.apache.camel.spi.ExceptionHandler type.
         */
        public WeatherConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public WeatherConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a org.apache.camel.ExchangePattern type.
         */
        public WeatherConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option is a
         * org.apache.camel.spi.PollingConsumerPollStrategy type.
         */
        public WeatherConsumerBuilder pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option will be converted
         * to a org.apache.camel.spi.PollingConsumerPollStrategy type.
         */
        public WeatherConsumerBuilder pollStrategy(String pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * is a int type.
         */
        public WeatherConsumerBuilder backoffErrorThreshold(
                int backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * will be converted to a int type.
         */
        public WeatherConsumerBuilder backoffErrorThreshold(
                String backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option is a int type.
         */
        public WeatherConsumerBuilder backoffIdleThreshold(
                int backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option will be converted to a
         * int type.
         */
        public WeatherConsumerBuilder backoffIdleThreshold(
                String backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option is a int type.
         */
        public WeatherConsumerBuilder backoffMultiplier(int backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option will be converted to a int type.
         */
        public WeatherConsumerBuilder backoffMultiplier(String backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public WeatherConsumerBuilder delay(long delay) {
            this.properties.put("delay", delay);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option will be converted to a long
         * type.
         */
        public WeatherConsumerBuilder delay(String delay) {
            this.properties.put("delay", delay);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option is a boolean type.
         */
        public WeatherConsumerBuilder greedy(boolean greedy) {
            this.properties.put("greedy", greedy);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option will be converted to a boolean type.
         */
        public WeatherConsumerBuilder greedy(String greedy) {
            this.properties.put("greedy", greedy);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public WeatherConsumerBuilder initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option will be converted to a long
         * type.
         */
        public WeatherConsumerBuilder initialDelay(String initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * is a org.apache.camel.LoggingLevel type.
         */
        public WeatherConsumerBuilder runLoggingLevel(
                LoggingLevel runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * will be converted to a org.apache.camel.LoggingLevel type.
         */
        public WeatherConsumerBuilder runLoggingLevel(String runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option is a java.util.concurrent.ScheduledExecutorService
         * type.
         */
        public WeatherConsumerBuilder scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option will be converted to a
         * java.util.concurrent.ScheduledExecutorService type.
         */
        public WeatherConsumerBuilder scheduledExecutorService(
                String scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option is a
         * org.apache.camel.spi.ScheduledPollConsumerScheduler type.
         */
        public WeatherConsumerBuilder scheduler(
                ScheduledPollConsumerScheduler scheduler) {
            this.properties.put("scheduler", scheduler);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option will be converted to a
         * org.apache.camel.spi.ScheduledPollConsumerScheduler type.
         */
        public WeatherConsumerBuilder scheduler(String scheduler) {
            this.properties.put("scheduler", scheduler);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public WeatherConsumerBuilder schedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option will be
         * converted to a java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public WeatherConsumerBuilder schedulerProperties(
                String schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started. The option is a boolean
         * type.
         */
        public WeatherConsumerBuilder startScheduler(boolean startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started. The option will be
         * converted to a boolean type.
         */
        public WeatherConsumerBuilder startScheduler(String startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option is a
         * java.util.concurrent.TimeUnit type.
         */
        public WeatherConsumerBuilder timeUnit(TimeUnit timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option will be
         * converted to a java.util.concurrent.TimeUnit type.
         */
        public WeatherConsumerBuilder timeUnit(String timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option is a boolean
         * type.
         */
        public WeatherConsumerBuilder useFixedDelay(boolean useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (WeatherConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option will be
         * converted to a boolean type.
         */
        public WeatherConsumerBuilder useFixedDelay(String useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (WeatherConsumerBuilder) this;
        }
    }

    public static class WeatherProducerBuilder
            extends
                WeatherCommonBuilder<WeatherProducerBuilder>
            implements
                EndpointProducerBuilder {
        public WeatherProducerBuilder(String path) {
            super(path);
        }
    }

    public static enum WeatherLanguage {
        en, ru, it, es, sp, uk, ua, de, pt, ro, pl, fi, nl, fr, bg, sv, se, zh_tw, zh, zh_cn, tr, hr, ca;
    }

    public static enum WeatherMode {
        HTML, JSON, XML;
    }

    public static enum WeatherUnits {
        IMPERIAL, METRIC;
    }

    public static enum WeatherApi {
        Current, Station, Hourly, Daily;
    }
    public default WeatherConsumerBuilder fromWeather(String path) {
        return new WeatherConsumerBuilder(path);
    }
    public default WeatherProducerBuilder toWeather(String path) {
        return new WeatherProducerBuilder(path);
    }
}