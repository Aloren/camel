/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;

/**
 * To collect various metrics directly from Camel routes using the DropWizard
 * metrics library.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface MetricsEndpointBuilder {


    public static class MetricsCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        MetricsCommonBuilder(String path) {
            super("metrics", path);
        }
        /**
         * Type of metrics. The option is a
         * <code>org.apache.camel.component.metrics.MetricsType</code> type.
         */
        public T metricsType(MetricsType metricsType) {
            this.properties.put("metricsType", metricsType);
            return (T) this;
        }
        /**
         * Type of metrics. The option will be converted to a
         * <code>org.apache.camel.component.metrics.MetricsType</code> type.
         */
        public T metricsType(String metricsType) {
            this.properties.put("metricsType", metricsType);
            return (T) this;
        }
        /**
         * Name of metrics. The option is a <code>java.lang.String</code> type.
         */
        public T metricsName(String metricsName) {
            this.properties.put("metricsName", metricsName);
            return (T) this;
        }
        /**
         * Action when using timer type. The option is a
         * <code>org.apache.camel.component.metrics.MetricsTimerAction</code>
         * type.
         */
        public T action(MetricsTimerAction action) {
            this.properties.put("action", action);
            return (T) this;
        }
        /**
         * Action when using timer type. The option will be converted to a
         * <code>org.apache.camel.component.metrics.MetricsTimerAction</code>
         * type.
         */
        public T action(String action) {
            this.properties.put("action", action);
            return (T) this;
        }
        /**
         * Decrement value when using counter type. The option is a
         * <code>java.lang.Long</code> type.
         */
        public T decrement(Long decrement) {
            this.properties.put("decrement", decrement);
            return (T) this;
        }
        /**
         * Decrement value when using counter type. The option will be converted
         * to a <code>java.lang.Long</code> type.
         */
        public T decrement(String decrement) {
            this.properties.put("decrement", decrement);
            return (T) this;
        }
        /**
         * Increment value when using counter type. The option is a
         * <code>java.lang.Long</code> type.
         */
        public T increment(Long increment) {
            this.properties.put("increment", increment);
            return (T) this;
        }
        /**
         * Increment value when using counter type. The option will be converted
         * to a <code>java.lang.Long</code> type.
         */
        public T increment(String increment) {
            this.properties.put("increment", increment);
            return (T) this;
        }
        /**
         * Mark when using meter type. The option is a
         * <code>java.lang.Long</code> type.
         */
        public T mark(Long mark) {
            this.properties.put("mark", mark);
            return (T) this;
        }
        /**
         * Mark when using meter type. The option will be converted to a
         * <code>java.lang.Long</code> type.
         */
        public T mark(String mark) {
            this.properties.put("mark", mark);
            return (T) this;
        }
        /**
         * Subject value when using gauge type. The option is a
         * <code>java.lang.Object</code> type.
         */
        public T subject(Object subject) {
            this.properties.put("subject", subject);
            return (T) this;
        }
        /**
         * Subject value when using gauge type. The option will be converted to
         * a <code>java.lang.Object</code> type.
         */
        public T subject(String subject) {
            this.properties.put("subject", subject);
            return (T) this;
        }
        /**
         * Value value when using histogram type. The option is a
         * <code>java.lang.Long</code> type.
         */
        public T value(Long value) {
            this.properties.put("value", value);
            return (T) this;
        }
        /**
         * Value value when using histogram type. The option will be converted
         * to a <code>java.lang.Long</code> type.
         */
        public T value(String value) {
            this.properties.put("value", value);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class MetricsProducerBuilder
            extends
                MetricsCommonBuilder<MetricsProducerBuilder>
            implements
                EndpointProducerBuilder {
        public MetricsProducerBuilder(String path) {
            super(path);
        }
    }

    public static enum MetricsType {
        gauge, counter, histogram, meter, timer;
    }

    public static enum MetricsTimerAction {
        start, stop;
    }
    public default MetricsProducerBuilder toMetrics(String path) {
        return new MetricsProducerBuilder(path);
    }
}