/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;

/**
 * The mock component is used for testing routes and mediation rules using
 * mocks.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class MockEndpoint {


    public static class MockCommon extends EndpointConfiguration {
        /**
         * Name of mock endpoint. The option is a java.lang.String type.
         */
        private String name;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class MockConsumer extends MockCommon {
    }

    public static class MockProducer extends MockCommon {
        /**
         * Sets a grace period after which the mock endpoint will re-assert to
         * ensure the preliminary assertion is still valid. This is used for
         * example to assert that exactly a number of messages arrives. For
         * example if expectedMessageCount(int) was set to 5, then the assertion
         * is satisfied when 5 or more message arrives. To ensure that exactly 5
         * messages arrives, then you would need to wait a little period to
         * ensure no further message arrives. This is what you can use this
         * method for. By default this period is disabled. The option is a long
         * type.
         */
        private Long assertPeriod;
        /**
         * Specifies the expected number of message exchanges that should be
         * received by this endpoint. Beware: If you want to expect that 0
         * messages, then take extra care, as 0 matches when the tests starts,
         * so you need to set a assert period time to let the test run for a
         * while to make sure there are still no messages arrived; for that use
         * setAssertPeriod(long). An alternative is to use NotifyBuilder, and
         * use the notifier to know when Camel is done routing some messages,
         * before you call the assertIsSatisfied() method on the mocks. This
         * allows you to not use a fixed assert period, to speedup testing
         * times. If you want to assert that exactly n'th message arrives to
         * this mock endpoint, then see also the setAssertPeriod(long) method
         * for further details. The option is a int type.
         */
        private Integer expectedCount;
        /**
         * A number that is used to turn on throughput logging based on groups
         * of the size. The option is a int type.
         */
        private Integer reportGroup;
        /**
         * Sets the minimum expected amount of time (in millis) the
         * assertIsSatisfied() will wait on a latch until it is satisfied. The
         * option is a long type.
         */
        private Long resultMinimumWaitTime;
        /**
         * Sets the maximum amount of time (in millis) the assertIsSatisfied()
         * will wait on a latch until it is satisfied. The option is a long
         * type.
         */
        private Long resultWaitTime;
        /**
         * Specifies to only retain the first n'th number of received Exchanges.
         * This is used when testing with big data, to reduce memory consumption
         * by not storing copies of every Exchange this mock endpoint receives.
         * Important: When using this limitation, then the getReceivedCounter()
         * will still return the actual number of received Exchanges. For
         * example if we have received 5000 Exchanges, and have configured to
         * only retain the first 10 Exchanges, then the getReceivedCounter()
         * will still return 5000 but there is only the first 10 Exchanges in
         * the getExchanges() and getReceivedExchanges() methods. When using
         * this method, then some of the other expectation methods is not
         * supported, for example the expectedBodiesReceived(Object...) sets a
         * expectation on the first number of bodies received. You can configure
         * both setRetainFirst(int) and setRetainLast(int) methods, to limit
         * both the first and last received. The option is a int type.
         */
        private Integer retainFirst;
        /**
         * Specifies to only retain the last n'th number of received Exchanges.
         * This is used when testing with big data, to reduce memory consumption
         * by not storing copies of every Exchange this mock endpoint receives.
         * Important: When using this limitation, then the getReceivedCounter()
         * will still return the actual number of received Exchanges. For
         * example if we have received 5000 Exchanges, and have configured to
         * only retain the last 20 Exchanges, then the getReceivedCounter() will
         * still return 5000 but there is only the last 20 Exchanges in the
         * getExchanges() and getReceivedExchanges() methods. When using this
         * method, then some of the other expectation methods is not supported,
         * for example the expectedBodiesReceived(Object...) sets a expectation
         * on the first number of bodies received. You can configure both
         * setRetainFirst(int) and setRetainLast(int) methods, to limit both the
         * first and last received. The option is a int type.
         */
        private Integer retainLast;
        /**
         * Allows a sleep to be specified to wait to check that this endpoint
         * really is empty when expectedMessageCount(int) is called with zero.
         * The option is a long type.
         */
        private Long sleepForEmptyTest;
        /**
         * Sets whether to make a deep copy of the incoming Exchange when
         * received at this mock endpoint. Is by default true. The option is a
         * boolean type.
         */
        private Boolean copyOnExchange;

        public Long getAssertPeriod() {
            return assertPeriod;
        }

        public void setAssertPeriod(Long assertPeriod) {
            this.assertPeriod = assertPeriod;
        }

        public Integer getExpectedCount() {
            return expectedCount;
        }

        public void setExpectedCount(Integer expectedCount) {
            this.expectedCount = expectedCount;
        }

        public Integer getReportGroup() {
            return reportGroup;
        }

        public void setReportGroup(Integer reportGroup) {
            this.reportGroup = reportGroup;
        }

        public Long getResultMinimumWaitTime() {
            return resultMinimumWaitTime;
        }

        public void setResultMinimumWaitTime(Long resultMinimumWaitTime) {
            this.resultMinimumWaitTime = resultMinimumWaitTime;
        }

        public Long getResultWaitTime() {
            return resultWaitTime;
        }

        public void setResultWaitTime(Long resultWaitTime) {
            this.resultWaitTime = resultWaitTime;
        }

        public Integer getRetainFirst() {
            return retainFirst;
        }

        public void setRetainFirst(Integer retainFirst) {
            this.retainFirst = retainFirst;
        }

        public Integer getRetainLast() {
            return retainLast;
        }

        public void setRetainLast(Integer retainLast) {
            this.retainLast = retainLast;
        }

        public Long getSleepForEmptyTest() {
            return sleepForEmptyTest;
        }

        public void setSleepForEmptyTest(Long sleepForEmptyTest) {
            this.sleepForEmptyTest = sleepForEmptyTest;
        }

        public Boolean getCopyOnExchange() {
            return copyOnExchange;
        }

        public void setCopyOnExchange(Boolean copyOnExchange) {
            this.copyOnExchange = copyOnExchange;
        }
    }
}