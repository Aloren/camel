/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;

/**
 * The log component logs message exchanges to the underlying logging mechanism.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class LogEndpoint {


    public static class LogCommon extends EndpointConfiguration {
        /**
         * The logger name to use. The option is a java.lang.String type.
         */
        private String loggerName;
        /**
         * If true, will hide stats when no new messages have been received for
         * a time interval, if false, show stats regardless of message traffic.
         * The option is a java.lang.Boolean type.
         */
        private Boolean groupActiveOnly;
        /**
         * Set the initial delay for stats (in millis). The option is a
         * java.lang.Long type.
         */
        private Long groupDelay;
        /**
         * If specified will group message stats by this time interval (in
         * millis). The option is a java.lang.Long type.
         */
        private Long groupInterval;
        /**
         * An integer that specifies a group size for throughput logging. The
         * option is a java.lang.Integer type.
         */
        private Integer groupSize;
        /**
         * Logging level to use. The default value is INFO. The option is a
         * java.lang.String type.
         */
        private String level;
        /**
         * If true, mask sensitive information like password or passphrase in
         * the log. The option is a java.lang.Boolean type.
         */
        private Boolean logMask;
        /**
         * An optional Marker name to use. The option is a java.lang.String
         * type.
         */
        private String marker;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;
        /**
         * Limits the number of characters logged per line. The option is a int
         * type.
         */
        private Integer maxChars;
        /**
         * If enabled then each information is outputted on a newline. The
         * option is a boolean type.
         */
        private Boolean multiline;
        /**
         * Quick option for turning all options on. (multiline, maxChars has to
         * be manually set if to be used). The option is a boolean type.
         */
        private Boolean showAll;
        /**
         * Show the message body. The option is a boolean type.
         */
        private Boolean showBody;
        /**
         * Show the body Java type. The option is a boolean type.
         */
        private Boolean showBodyType;
        /**
         * f the exchange has a caught exception, show the exception message (no
         * stack trace).A caught exception is stored as a property on the
         * exchange (using the key org.apache.camel.Exchange#EXCEPTION_CAUGHT
         * and for instance a doCatch can catch exceptions. The option is a
         * boolean type.
         */
        private Boolean showCaughtException;
        /**
         * If the exchange has an exception, show the exception message (no
         * stacktrace). The option is a boolean type.
         */
        private Boolean showException;
        /**
         * Show the unique exchange ID. The option is a boolean type.
         */
        private Boolean showExchangeId;
        /**
         * Shows the Message Exchange Pattern (or MEP for short). The option is
         * a boolean type.
         */
        private Boolean showExchangePattern;
        /**
         * If enabled Camel will output files. The option is a boolean type.
         */
        private Boolean showFiles;
        /**
         * If enabled Camel will on Future objects wait for it to complete to
         * obtain the payload to be logged. The option is a boolean type.
         */
        private Boolean showFuture;
        /**
         * Show the message headers. The option is a boolean type.
         */
        private Boolean showHeaders;
        /**
         * If the exchange has an out message, show the out message. The option
         * is a boolean type.
         */
        private Boolean showOut;
        /**
         * Show the exchange properties. The option is a boolean type.
         */
        private Boolean showProperties;
        /**
         * Show the stack trace, if an exchange has an exception. Only effective
         * if one of showAll, showException or showCaughtException are enabled.
         * The option is a boolean type.
         */
        private Boolean showStackTrace;
        /**
         * Whether Camel should show stream bodies or not (eg such as
         * java.io.InputStream). Beware if you enable this option then you may
         * not be able later to access the message body as the stream have
         * already been read by this logger. To remedy this you will have to use
         * Stream Caching. The option is a boolean type.
         */
        private Boolean showStreams;
        /**
         * Whether to skip line separators when logging the message body.This
         * allows to log the message body in one line, setting this option to
         * false will preserve any line separators from the body, which then
         * will log the body as is. The option is a boolean type.
         */
        private Boolean skipBodyLineSeparator;
        /**
         * Sets the outputs style to use. The option is a
         * org.apache.camel.support.processor.DefaultExchangeFormatter.OutputStyle type.
         */
        private OutputStyle style;

        public String getLoggerName() {
            return loggerName;
        }

        public void setLoggerName(String loggerName) {
            this.loggerName = loggerName;
        }

        public Boolean getGroupActiveOnly() {
            return groupActiveOnly;
        }

        public void setGroupActiveOnly(Boolean groupActiveOnly) {
            this.groupActiveOnly = groupActiveOnly;
        }

        public Long getGroupDelay() {
            return groupDelay;
        }

        public void setGroupDelay(Long groupDelay) {
            this.groupDelay = groupDelay;
        }

        public Long getGroupInterval() {
            return groupInterval;
        }

        public void setGroupInterval(Long groupInterval) {
            this.groupInterval = groupInterval;
        }

        public Integer getGroupSize() {
            return groupSize;
        }

        public void setGroupSize(Integer groupSize) {
            this.groupSize = groupSize;
        }

        public String getLevel() {
            return level;
        }

        public void setLevel(String level) {
            this.level = level;
        }

        public Boolean getLogMask() {
            return logMask;
        }

        public void setLogMask(Boolean logMask) {
            this.logMask = logMask;
        }

        public String getMarker() {
            return marker;
        }

        public void setMarker(String marker) {
            this.marker = marker;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }

        public Integer getMaxChars() {
            return maxChars;
        }

        public void setMaxChars(Integer maxChars) {
            this.maxChars = maxChars;
        }

        public Boolean getMultiline() {
            return multiline;
        }

        public void setMultiline(Boolean multiline) {
            this.multiline = multiline;
        }

        public Boolean getShowAll() {
            return showAll;
        }

        public void setShowAll(Boolean showAll) {
            this.showAll = showAll;
        }

        public Boolean getShowBody() {
            return showBody;
        }

        public void setShowBody(Boolean showBody) {
            this.showBody = showBody;
        }

        public Boolean getShowBodyType() {
            return showBodyType;
        }

        public void setShowBodyType(Boolean showBodyType) {
            this.showBodyType = showBodyType;
        }

        public Boolean getShowCaughtException() {
            return showCaughtException;
        }

        public void setShowCaughtException(Boolean showCaughtException) {
            this.showCaughtException = showCaughtException;
        }

        public Boolean getShowException() {
            return showException;
        }

        public void setShowException(Boolean showException) {
            this.showException = showException;
        }

        public Boolean getShowExchangeId() {
            return showExchangeId;
        }

        public void setShowExchangeId(Boolean showExchangeId) {
            this.showExchangeId = showExchangeId;
        }

        public Boolean getShowExchangePattern() {
            return showExchangePattern;
        }

        public void setShowExchangePattern(Boolean showExchangePattern) {
            this.showExchangePattern = showExchangePattern;
        }

        public Boolean getShowFiles() {
            return showFiles;
        }

        public void setShowFiles(Boolean showFiles) {
            this.showFiles = showFiles;
        }

        public Boolean getShowFuture() {
            return showFuture;
        }

        public void setShowFuture(Boolean showFuture) {
            this.showFuture = showFuture;
        }

        public Boolean getShowHeaders() {
            return showHeaders;
        }

        public void setShowHeaders(Boolean showHeaders) {
            this.showHeaders = showHeaders;
        }

        public Boolean getShowOut() {
            return showOut;
        }

        public void setShowOut(Boolean showOut) {
            this.showOut = showOut;
        }

        public Boolean getShowProperties() {
            return showProperties;
        }

        public void setShowProperties(Boolean showProperties) {
            this.showProperties = showProperties;
        }

        public Boolean getShowStackTrace() {
            return showStackTrace;
        }

        public void setShowStackTrace(Boolean showStackTrace) {
            this.showStackTrace = showStackTrace;
        }

        public Boolean getShowStreams() {
            return showStreams;
        }

        public void setShowStreams(Boolean showStreams) {
            this.showStreams = showStreams;
        }

        public Boolean getSkipBodyLineSeparator() {
            return skipBodyLineSeparator;
        }

        public void setSkipBodyLineSeparator(Boolean skipBodyLineSeparator) {
            this.skipBodyLineSeparator = skipBodyLineSeparator;
        }

        public OutputStyle getStyle() {
            return style;
        }

        public void setStyle(OutputStyle style) {
            this.style = style;
        }
    }

    public static class LogConsumer extends LogCommon {
    }

    public static class LogProducer extends LogCommon {
    }

    public static enum OutputStyle {
        Default, Tab, Fixed;
    }
}