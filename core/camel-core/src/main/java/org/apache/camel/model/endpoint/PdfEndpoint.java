/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;

/**
 * The pdf components provides the ability to create, modify or extract content
 * from PDF documents.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class PdfEndpoint {


    public static class PdfCommon extends EndpointConfiguration {
        /**
         * Operation type. The option is a
         * org.apache.camel.component.pdf.PdfOperation type.
         */
        private PdfOperation operation;
        /**
         * Font. The option is a org.apache.pdfbox.pdmodel.font.PDFont type.
         */
        private Object font;
        /**
         * Font size in pixels. The option is a float type.
         */
        private Float fontSize;
        /**
         * Margin bottom in pixels. The option is a int type.
         */
        private Integer marginBottom;
        /**
         * Margin left in pixels. The option is a int type.
         */
        private Integer marginLeft;
        /**
         * Margin right in pixels. The option is a int type.
         */
        private Integer marginRight;
        /**
         * Margin top in pixels. The option is a int type.
         */
        private Integer marginTop;
        /**
         * Page size. The option is a
         * org.apache.pdfbox.pdmodel.common.PDRectangle type.
         */
        private Object pageSize;
        /**
         * Text processing to use. autoFormatting: Text is getting sliced by
         * words, then max amount of words that fits in the line will be written
         * into pdf document. With this strategy all words that doesn't fit in
         * the line will be moved to the new line. lineTermination: Builds set
         * of classes for line-termination writing strategy. Text getting sliced
         * by line termination symbol and then it will be written regardless it
         * fits in the line or not. The option is a
         * org.apache.camel.component.pdf.TextProcessingFactory type.
         */
        private TextProcessingFactory textProcessingFactory;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private Boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private Boolean synchronous;

        public PdfOperation getOperation() {
            return operation;
        }

        public void setOperation(PdfOperation operation) {
            this.operation = operation;
        }

        public Object getFont() {
            return font;
        }

        public void setFont(Object font) {
            this.font = font;
        }

        public Float getFontSize() {
            return fontSize;
        }

        public void setFontSize(Float fontSize) {
            this.fontSize = fontSize;
        }

        public Integer getMarginBottom() {
            return marginBottom;
        }

        public void setMarginBottom(Integer marginBottom) {
            this.marginBottom = marginBottom;
        }

        public Integer getMarginLeft() {
            return marginLeft;
        }

        public void setMarginLeft(Integer marginLeft) {
            this.marginLeft = marginLeft;
        }

        public Integer getMarginRight() {
            return marginRight;
        }

        public void setMarginRight(Integer marginRight) {
            this.marginRight = marginRight;
        }

        public Integer getMarginTop() {
            return marginTop;
        }

        public void setMarginTop(Integer marginTop) {
            this.marginTop = marginTop;
        }

        public Object getPageSize() {
            return pageSize;
        }

        public void setPageSize(Object pageSize) {
            this.pageSize = pageSize;
        }

        public TextProcessingFactory getTextProcessingFactory() {
            return textProcessingFactory;
        }

        public void setTextProcessingFactory(
                TextProcessingFactory textProcessingFactory) {
            this.textProcessingFactory = textProcessingFactory;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class PdfConsumer extends PdfCommon {
    }

    public static class PdfProducer extends PdfCommon {
    }

    public static enum PdfOperation {
        create, append, extractText;
    }

    public static enum TextProcessingFactory {
        autoFormatting, lineTermination;
    }
}