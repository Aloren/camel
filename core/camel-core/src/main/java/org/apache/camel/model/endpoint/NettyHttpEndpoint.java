/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.io.File;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.HeaderFilterStrategy;

/**
 * Netty HTTP server and client using the Netty 4.x library.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class NettyHttpEndpoint {


    public static class NettyHttpCommon extends EndpointConfiguration {
        /**
         * The protocol to use which is either http, https or proxy - a consumer
         * only option. The option is a java.lang.String type.
         */
        private String protocol;
        /**
         * The local hostname such as localhost, or 0.0.0.0 when being a
         * consumer. The remote HTTP server hostname when using producer. The
         * option is a java.lang.String type.
         */
        private String host;
        /**
         * The host port number. The option is a int type.
         */
        private int port;
        /**
         * Resource path. The option is a java.lang.String type.
         */
        private String path;
        /**
         * If the option is true, the producer will ignore the Exchange.HTTP_URI
         * header, and use the endpoint's URI for request. You may also set the
         * throwExceptionOnFailure to be false to let the producer send all the
         * fault response back. The consumer working in the bridge mode will
         * skip the gzip compression and WWW URL form encoding (by adding the
         * Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED
         * headers to the consumed exchange). The option is a boolean type.
         */
        private boolean bridgeEndpoint;
        /**
         * Whether or not to disconnect(close) from Netty Channel right after
         * use. Can be used for both consumer and producer. The option is a
         * boolean type.
         */
        private boolean disconnect;
        /**
         * Setting to ensure socket is not closed due to inactivity. The option
         * is a boolean type.
         */
        private boolean keepAlive;
        /**
         * Setting to facilitate socket multiplexing. The option is a boolean
         * type.
         */
        private boolean reuseAddress;
        /**
         * This option allows producers and consumers (in client mode) to reuse
         * the same Netty Channel for the lifecycle of processing the Exchange.
         * This is useful if you need to call a server multiple times in a Camel
         * route and want to use the same network connection. When using this,
         * the channel is not returned to the connection pool until the Exchange
         * is done; or disconnected if the disconnect option is set to true. The
         * reused Channel is stored on the Exchange as an exchange property with
         * the key NettyConstants#NETTY_CHANNEL which allows you to obtain the
         * channel during routing and use it as well. The option is a boolean
         * type.
         */
        private boolean reuseChannel;
        /**
         * Setting to set endpoint as one-way or request-response. The option is
         * a boolean type.
         */
        private boolean sync;
        /**
         * Setting to improve TCP protocol performance. The option is a boolean
         * type.
         */
        private boolean tcpNoDelay;
        /**
         * Only used for TCP when transferExchange is true. When set to true,
         * serializable objects in headers and properties will be added to the
         * exchange. Otherwise Camel will exclude any non-serializable objects
         * and log it at WARN level. The option is a boolean type.
         */
        private boolean allowSerializedHeaders;
        /**
         * To use a explicit ChannelGroup. The option is a
         * io.netty.channel.group.ChannelGroup type.
         */
        private Object channelGroup;
        /**
         * To use a custom configured NettyHttpConfiguration for configuring
         * this endpoint. The option is a
         * org.apache.camel.component.netty4.http.NettyHttpConfiguration type.
         */
        private Object configuration;
        /**
         * Determines whether or not the raw input stream from Netty
         * HttpRequest#getContent() or HttpResponset#getContent() is cached or
         * not (Camel will read the stream into a in light-weight memory based
         * Stream caching) cache. By default Camel will cache the Netty input
         * stream to support reading it multiple times to ensure it Camel can
         * retrieve all data from the stream. However you can set this option to
         * true when you for example need to access the raw stream, such as
         * streaming it directly to a file or other persistent store. Mind that
         * if you enable this option, then you cannot read the Netty stream
         * multiple times out of the box, and you would need manually to reset
         * the reader index on the Netty raw stream. Also Netty will auto-close
         * the Netty stream when the Netty HTTP server/HTTP client is done
         * processing, which means that if the asynchronous routing engine is in
         * use then any asynchronous thread that may continue routing the
         * org.apache.camel.Exchange may not be able to read the Netty stream,
         * because Netty has closed it. The option is a boolean type.
         */
        private boolean disableStreamCache;
        /**
         * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter
         * headers. The option is a org.apache.camel.spi.HeaderFilterStrategy
         * type.
         */
        private HeaderFilterStrategy headerFilterStrategy;
        /**
         * Whether to use native transport instead of NIO. Native transport
         * takes advantage of the host operating system and is only supported on
         * some platforms. You need to add the netty JAR for the host operating
         * system you are using. See more details at:
         * http://netty.io/wiki/native-transports.html. The option is a boolean
         * type.
         */
        private boolean nativeTransport;
        /**
         * To use a custom
         * org.apache.camel.component.netty4.http.NettyHttpBinding for binding
         * to/from Netty and Camel Message API. The option is a
         * org.apache.camel.component.netty4.http.NettyHttpBinding type.
         */
        private Object nettyHttpBinding;
        /**
         * Allows to configure additional netty options using option. as prefix.
         * For example option.child.keepAlive=false to set the netty option
         * child.keepAlive=false. See the Netty documentation for possible
         * options that can be used. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        private Map<String, Object> options;
        /**
         * The TCP/UDP buffer sizes to be used during inbound communication.
         * Size is bytes. The option is a int type.
         */
        private int receiveBufferSize;
        /**
         * Configures the buffer size predictor. See details at Jetty
         * documentation and this mail thread. The option is a int type.
         */
        private int receiveBufferSizePredictor;
        /**
         * The TCP/UDP buffer sizes to be used during outbound communication.
         * Size is bytes. The option is a int type.
         */
        private int sendBufferSize;
        /**
         * If enabled and an Exchange failed processing on the consumer side,
         * and if the caused Exception was send back serialized in the response
         * as a application/x-java-serialized-object content type. On the
         * producer side the exception will be deserialized and thrown as is,
         * instead of the HttpOperationFailedException. The caused exception is
         * required to be serialized. This is by default turned off. If you
         * enable this then be aware that Java will deserialize the incoming
         * data from the request to Java and that can be a potential security
         * risk. The option is a boolean type.
         */
        private boolean transferException;
        /**
         * Only used for TCP. You can transfer the exchange over the wire
         * instead of just the body. The following fields are transferred: In
         * body, Out body, fault body, In headers, Out headers, fault headers,
         * exchange properties, exchange exception. This requires that the
         * objects are serializable. Camel will exclude any non-serializable
         * objects and log it at WARN level. The option is a boolean type.
         */
        private boolean transferExchange;
        /**
         * When netty works on nio mode, it uses default workerCount parameter
         * from Netty, which is cpu_core_threads x 2. User can use this
         * operation to override the default workerCount from Netty. The option
         * is a int type.
         */
        private int workerCount;
        /**
         * To use a explicit EventLoopGroup as the boss thread pool. For example
         * to share a thread pool with multiple consumers or producers. By
         * default each consumer or producer has their own worker pool with 2 x
         * cpu count core threads. The option is a
         * io.netty.channel.EventLoopGroup type.
         */
        private Object workerGroup;
        /**
         * To use a single decoder. This options is deprecated use encoders
         * instead. The option is a io.netty.channel.ChannelHandler type.
         */
        @Deprecated
        private Object decoder;
        /**
         * A list of decoders to be used. You can use a String which have values
         * separated by comma, and have the values be looked up in the Registry.
         * Just remember to prefix the value with # so Camel knows it should
         * lookup. The option is a java.lang.String type.
         */
        private List<Object> decoders;
        /**
         * To use a single encoder. This options is deprecated use encoders
         * instead. The option is a io.netty.channel.ChannelHandler type.
         */
        @Deprecated
        private Object encoder;
        /**
         * A list of encoders to be used. You can use a String which have values
         * separated by comma, and have the values be looked up in the Registry.
         * Just remember to prefix the value with # so Camel knows it should
         * lookup. The option is a java.lang.String type.
         */
        private List<Object> encoders;
        /**
         * Which protocols to enable when using SSL. The option is a
         * java.lang.String type.
         */
        private String enabledProtocols;
        /**
         * Client side certificate keystore to be used for encryption. The
         * option is a java.io.File type.
         */
        private File keyStoreFile;
        /**
         * Keystore format to be used for payload encryption. Defaults to JKS if
         * not set. The option is a java.lang.String type.
         */
        private String keyStoreFormat;
        /**
         * Client side certificate keystore to be used for encryption. Is loaded
         * by default from classpath, but you can prefix with classpath:, file:,
         * or http: to load the resource from different systems. The option is a
         * java.lang.String type.
         */
        private String keyStoreResource;
        /**
         * Password setting to use in order to encrypt/decrypt payloads sent
         * using SSH. The option is a java.lang.String type.
         */
        private String passphrase;
        /**
         * Security provider to be used for payload encryption. Defaults to
         * SunX509 if not set. The option is a java.lang.String type.
         */
        private String securityProvider;
        /**
         * Setting to specify whether SSL encryption is applied to this
         * endpoint. The option is a boolean type.
         */
        private boolean ssl;
        /**
         * When enabled and in SSL mode, then the Netty consumer will enrich the
         * Camel Message with headers having information about the client
         * certificate such as subject name, issuer name, serial number, and the
         * valid date range. The option is a boolean type.
         */
        private boolean sslClientCertHeaders;
        /**
         * To configure security using SSLContextParameters. The option is a
         * org.apache.camel.support.jsse.SSLContextParameters type.
         */
        private Object sslContextParameters;
        /**
         * Reference to a class that could be used to return an SSL Handler. The
         * option is a io.netty.handler.ssl.SslHandler type.
         */
        private Object sslHandler;
        /**
         * Server side certificate keystore to be used for encryption. The
         * option is a java.io.File type.
         */
        private File trustStoreFile;
        /**
         * Server side certificate keystore to be used for encryption. Is loaded
         * by default from classpath, but you can prefix with classpath:, file:,
         * or http: to load the resource from different systems. The option is a
         * java.lang.String type.
         */
        private String trustStoreResource;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * To use a custom configured NettyServerBootstrapConfiguration for
         * configuring this endpoint. The option is a
         * org.apache.camel.component.netty4.NettyServerBootstrapConfiguration
         * type.
         */
        private Object bootstrapConfiguration;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;

        public String getProtocol() {
            return protocol;
        }

        public void setProtocol(String protocol) {
            this.protocol = protocol;
        }

        public String getHost() {
            return host;
        }

        public void setHost(String host) {
            this.host = host;
        }

        public int getPort() {
            return port;
        }

        public void setPort(int port) {
            this.port = port;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }

        public boolean getBridgeEndpoint() {
            return bridgeEndpoint;
        }

        public void setBridgeEndpoint(boolean bridgeEndpoint) {
            this.bridgeEndpoint = bridgeEndpoint;
        }

        public boolean getDisconnect() {
            return disconnect;
        }

        public void setDisconnect(boolean disconnect) {
            this.disconnect = disconnect;
        }

        public boolean getKeepAlive() {
            return keepAlive;
        }

        public void setKeepAlive(boolean keepAlive) {
            this.keepAlive = keepAlive;
        }

        public boolean getReuseAddress() {
            return reuseAddress;
        }

        public void setReuseAddress(boolean reuseAddress) {
            this.reuseAddress = reuseAddress;
        }

        public boolean getReuseChannel() {
            return reuseChannel;
        }

        public void setReuseChannel(boolean reuseChannel) {
            this.reuseChannel = reuseChannel;
        }

        public boolean getSync() {
            return sync;
        }

        public void setSync(boolean sync) {
            this.sync = sync;
        }

        public boolean getTcpNoDelay() {
            return tcpNoDelay;
        }

        public void setTcpNoDelay(boolean tcpNoDelay) {
            this.tcpNoDelay = tcpNoDelay;
        }

        public boolean getAllowSerializedHeaders() {
            return allowSerializedHeaders;
        }

        public void setAllowSerializedHeaders(boolean allowSerializedHeaders) {
            this.allowSerializedHeaders = allowSerializedHeaders;
        }

        public Object getChannelGroup() {
            return channelGroup;
        }

        public void setChannelGroup(Object channelGroup) {
            this.channelGroup = channelGroup;
        }

        public Object getConfiguration() {
            return configuration;
        }

        public void setConfiguration(Object configuration) {
            this.configuration = configuration;
        }

        public boolean getDisableStreamCache() {
            return disableStreamCache;
        }

        public void setDisableStreamCache(boolean disableStreamCache) {
            this.disableStreamCache = disableStreamCache;
        }

        public HeaderFilterStrategy getHeaderFilterStrategy() {
            return headerFilterStrategy;
        }

        public void setHeaderFilterStrategy(
                HeaderFilterStrategy headerFilterStrategy) {
            this.headerFilterStrategy = headerFilterStrategy;
        }

        public boolean getNativeTransport() {
            return nativeTransport;
        }

        public void setNativeTransport(boolean nativeTransport) {
            this.nativeTransport = nativeTransport;
        }

        public Object getNettyHttpBinding() {
            return nettyHttpBinding;
        }

        public void setNettyHttpBinding(Object nettyHttpBinding) {
            this.nettyHttpBinding = nettyHttpBinding;
        }

        public Map<String, Object> getOptions() {
            return options;
        }

        public void setOptions(Map<String, Object> options) {
            this.options = options;
        }

        public int getReceiveBufferSize() {
            return receiveBufferSize;
        }

        public void setReceiveBufferSize(int receiveBufferSize) {
            this.receiveBufferSize = receiveBufferSize;
        }

        public int getReceiveBufferSizePredictor() {
            return receiveBufferSizePredictor;
        }

        public void setReceiveBufferSizePredictor(int receiveBufferSizePredictor) {
            this.receiveBufferSizePredictor = receiveBufferSizePredictor;
        }

        public int getSendBufferSize() {
            return sendBufferSize;
        }

        public void setSendBufferSize(int sendBufferSize) {
            this.sendBufferSize = sendBufferSize;
        }

        public boolean getTransferException() {
            return transferException;
        }

        public void setTransferException(boolean transferException) {
            this.transferException = transferException;
        }

        public boolean getTransferExchange() {
            return transferExchange;
        }

        public void setTransferExchange(boolean transferExchange) {
            this.transferExchange = transferExchange;
        }

        public int getWorkerCount() {
            return workerCount;
        }

        public void setWorkerCount(int workerCount) {
            this.workerCount = workerCount;
        }

        public Object getWorkerGroup() {
            return workerGroup;
        }

        public void setWorkerGroup(Object workerGroup) {
            this.workerGroup = workerGroup;
        }

        @Deprecated
        public Object getDecoder() {
            return decoder;
        }

        @Deprecated
        public void setDecoder(Object decoder) {
            this.decoder = decoder;
        }

        public List<Object> getDecoders() {
            return decoders;
        }

        public void setDecoders(List<Object> decoders) {
            this.decoders = decoders;
        }

        @Deprecated
        public Object getEncoder() {
            return encoder;
        }

        @Deprecated
        public void setEncoder(Object encoder) {
            this.encoder = encoder;
        }

        public List<Object> getEncoders() {
            return encoders;
        }

        public void setEncoders(List<Object> encoders) {
            this.encoders = encoders;
        }

        public String getEnabledProtocols() {
            return enabledProtocols;
        }

        public void setEnabledProtocols(String enabledProtocols) {
            this.enabledProtocols = enabledProtocols;
        }

        public File getKeyStoreFile() {
            return keyStoreFile;
        }

        public void setKeyStoreFile(File keyStoreFile) {
            this.keyStoreFile = keyStoreFile;
        }

        public String getKeyStoreFormat() {
            return keyStoreFormat;
        }

        public void setKeyStoreFormat(String keyStoreFormat) {
            this.keyStoreFormat = keyStoreFormat;
        }

        public String getKeyStoreResource() {
            return keyStoreResource;
        }

        public void setKeyStoreResource(String keyStoreResource) {
            this.keyStoreResource = keyStoreResource;
        }

        public String getPassphrase() {
            return passphrase;
        }

        public void setPassphrase(String passphrase) {
            this.passphrase = passphrase;
        }

        public String getSecurityProvider() {
            return securityProvider;
        }

        public void setSecurityProvider(String securityProvider) {
            this.securityProvider = securityProvider;
        }

        public boolean getSsl() {
            return ssl;
        }

        public void setSsl(boolean ssl) {
            this.ssl = ssl;
        }

        public boolean getSslClientCertHeaders() {
            return sslClientCertHeaders;
        }

        public void setSslClientCertHeaders(boolean sslClientCertHeaders) {
            this.sslClientCertHeaders = sslClientCertHeaders;
        }

        public Object getSslContextParameters() {
            return sslContextParameters;
        }

        public void setSslContextParameters(Object sslContextParameters) {
            this.sslContextParameters = sslContextParameters;
        }

        public Object getSslHandler() {
            return sslHandler;
        }

        public void setSslHandler(Object sslHandler) {
            this.sslHandler = sslHandler;
        }

        public File getTrustStoreFile() {
            return trustStoreFile;
        }

        public void setTrustStoreFile(File trustStoreFile) {
            this.trustStoreFile = trustStoreFile;
        }

        public String getTrustStoreResource() {
            return trustStoreResource;
        }

        public void setTrustStoreResource(String trustStoreResource) {
            this.trustStoreResource = trustStoreResource;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Object getBootstrapConfiguration() {
            return bootstrapConfiguration;
        }

        public void setBootstrapConfiguration(Object bootstrapConfiguration) {
            this.bootstrapConfiguration = bootstrapConfiguration;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class NettyHttpConsumer extends NettyHttpCommon {
        /**
         * Whether or not Camel should try to find a target consumer by matching
         * the URI prefix if no exact match is found. The option is a boolean
         * type.
         */
        private boolean matchOnUriPrefix;
        /**
         * Whether to send back HTTP status code 503 when the consumer has been
         * suspended. If the option is false then the Netty Acceptor is unbound
         * when the consumer is suspended, so clients cannot connect anymore.
         * The option is a boolean type.
         */
        private boolean send503whenSuspended;
        /**
         * Allows to configure a backlog for netty consumer (server). Note the
         * backlog is just a best effort depending on the OS. Setting this
         * option to a value such as 200, 500 or 1000, tells the TCP stack how
         * long the accept queue can be If this option is not configured, then
         * the backlog depends on OS setting. The option is a int type.
         */
        private int backlog;
        /**
         * When netty works on nio mode, it uses default bossCount parameter
         * from Netty, which is 1. User can use this operation to override the
         * default bossCount from Netty. The option is a int type.
         */
        private int bossCount;
        /**
         * Set the BossGroup which could be used for handling the new connection
         * of the server side across the NettyEndpoint. The option is a
         * io.netty.channel.EventLoopGroup type.
         */
        private Object bossGroup;
        /**
         * Value in bytes the max content length per chunked frame received on
         * the Netty HTTP server. The option is a int type.
         */
        private int chunkedMaxContentLength;
        /**
         * Allow using gzip/deflate for compression on the Netty HTTP server if
         * the client supports it from the HTTP headers. The option is a boolean
         * type.
         */
        private boolean compression;
        /**
         * If sync is enabled then this option dictates NettyConsumer if it
         * should disconnect where there is no reply to send back. The option is
         * a boolean type.
         */
        private boolean disconnectOnNoReply;
        /**
         * To disable HTTP methods on the Netty HTTP consumer. You can specify
         * multiple separated by comma. The option is a java.lang.String type.
         */
        private String httpMethodRestrict;
        /**
         * If this option is enabled, then during binding from Netty to Camel
         * Message then the headers will be mapped as well (eg added as header
         * to the Camel Message as well). You can turn off this option to
         * disable this. The headers can still be accessed from the
         * org.apache.camel.component.netty.http.NettyHttpMessage message with
         * the method getHttpRequest() that returns the Netty HTTP request
         * io.netty.handler.codec.http.HttpRequest instance. The option is a
         * boolean type.
         */
        private boolean mapHeaders;
        /**
         * The maximum length of all headers. If the sum of the length of each
         * header exceeds this value, a
         * io.netty.handler.codec.TooLongFrameException will be raised. The
         * option is a int type.
         */
        private int maxHeaderSize;
        /**
         * To use a custom NettyServerBootstrapFactory. The option is a
         * org.apache.camel.component.netty4.NettyServerBootstrapFactory type.
         */
        private Object nettyServerBootstrapFactory;
        /**
         * To use a shared Netty HTTP server. See Netty HTTP Server Example for
         * more details. The option is a
         * org.apache.camel.component.netty4.http.NettySharedHttpServer type.
         */
        private Object nettySharedHttpServer;
        /**
         * If sync is enabled this option dictates NettyConsumer which logging
         * level to use when logging a there is no reply to send back. The
         * option is a org.apache.camel.LoggingLevel type.
         */
        private LoggingLevel noReplyLogLevel;
        /**
         * If the server (NettyConsumer) catches an
         * java.nio.channels.ClosedChannelException then its logged using this
         * logging level. This is used to avoid logging the closed channel
         * exceptions, as clients can disconnect abruptly and then cause a flood
         * of closed exceptions in the Netty server. The option is a
         * org.apache.camel.LoggingLevel type.
         */
        private LoggingLevel serverClosedChannelExceptionCaughtLogLevel;
        /**
         * If the server (NettyConsumer) catches an exception then its logged
         * using this logging level. The option is a
         * org.apache.camel.LoggingLevel type.
         */
        private LoggingLevel serverExceptionCaughtLogLevel;
        /**
         * To use a custom ServerInitializerFactory. The option is a
         * org.apache.camel.component.netty4.ServerInitializerFactory type.
         */
        private Object serverInitializerFactory;
        /**
         * Specifies whether to enable HTTP TRACE for this Netty HTTP consumer.
         * By default TRACE is turned off. The option is a boolean type.
         */
        private boolean traceEnabled;
        /**
         * If this option is enabled, then during binding from Netty to Camel
         * Message then the header values will be URL decoded (eg %20 will be a
         * space character. Notice this option is used by the default
         * org.apache.camel.component.netty.http.NettyHttpBinding and therefore
         * if you implement a custom
         * org.apache.camel.component.netty4.http.NettyHttpBinding then you
         * would need to decode the headers accordingly to this option. The
         * option is a boolean type.
         */
        private boolean urlDecodeHeaders;
        /**
         * Whether to use ordered thread pool, to ensure events are processed
         * orderly on the same channel. The option is a boolean type.
         */
        private boolean usingExecutorService;
        /**
         * Configures whether the server needs client authentication when using
         * SSL. The option is a boolean type.
         */
        private boolean needClientAuth;
        /**
         * Refers to a
         * org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration
         * for configuring secure web resources. The option is a
         * org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration
         * type.
         */
        private Object securityConfiguration;
        /**
         * To configure NettyHttpSecurityConfiguration using key/value pairs
         * from the map. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        private Map<String, Object> securityOptions;
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public boolean getMatchOnUriPrefix() {
            return matchOnUriPrefix;
        }

        public void setMatchOnUriPrefix(boolean matchOnUriPrefix) {
            this.matchOnUriPrefix = matchOnUriPrefix;
        }

        public boolean getSend503whenSuspended() {
            return send503whenSuspended;
        }

        public void setSend503whenSuspended(boolean send503whenSuspended) {
            this.send503whenSuspended = send503whenSuspended;
        }

        public int getBacklog() {
            return backlog;
        }

        public void setBacklog(int backlog) {
            this.backlog = backlog;
        }

        public int getBossCount() {
            return bossCount;
        }

        public void setBossCount(int bossCount) {
            this.bossCount = bossCount;
        }

        public Object getBossGroup() {
            return bossGroup;
        }

        public void setBossGroup(Object bossGroup) {
            this.bossGroup = bossGroup;
        }

        public int getChunkedMaxContentLength() {
            return chunkedMaxContentLength;
        }

        public void setChunkedMaxContentLength(int chunkedMaxContentLength) {
            this.chunkedMaxContentLength = chunkedMaxContentLength;
        }

        public boolean getCompression() {
            return compression;
        }

        public void setCompression(boolean compression) {
            this.compression = compression;
        }

        public boolean getDisconnectOnNoReply() {
            return disconnectOnNoReply;
        }

        public void setDisconnectOnNoReply(boolean disconnectOnNoReply) {
            this.disconnectOnNoReply = disconnectOnNoReply;
        }

        public String getHttpMethodRestrict() {
            return httpMethodRestrict;
        }

        public void setHttpMethodRestrict(String httpMethodRestrict) {
            this.httpMethodRestrict = httpMethodRestrict;
        }

        public boolean getMapHeaders() {
            return mapHeaders;
        }

        public void setMapHeaders(boolean mapHeaders) {
            this.mapHeaders = mapHeaders;
        }

        public int getMaxHeaderSize() {
            return maxHeaderSize;
        }

        public void setMaxHeaderSize(int maxHeaderSize) {
            this.maxHeaderSize = maxHeaderSize;
        }

        public Object getNettyServerBootstrapFactory() {
            return nettyServerBootstrapFactory;
        }

        public void setNettyServerBootstrapFactory(
                Object nettyServerBootstrapFactory) {
            this.nettyServerBootstrapFactory = nettyServerBootstrapFactory;
        }

        public Object getNettySharedHttpServer() {
            return nettySharedHttpServer;
        }

        public void setNettySharedHttpServer(Object nettySharedHttpServer) {
            this.nettySharedHttpServer = nettySharedHttpServer;
        }

        public LoggingLevel getNoReplyLogLevel() {
            return noReplyLogLevel;
        }

        public void setNoReplyLogLevel(LoggingLevel noReplyLogLevel) {
            this.noReplyLogLevel = noReplyLogLevel;
        }

        public LoggingLevel getServerClosedChannelExceptionCaughtLogLevel() {
            return serverClosedChannelExceptionCaughtLogLevel;
        }

        public void setServerClosedChannelExceptionCaughtLogLevel(
                LoggingLevel serverClosedChannelExceptionCaughtLogLevel) {
            this.serverClosedChannelExceptionCaughtLogLevel = serverClosedChannelExceptionCaughtLogLevel;
        }

        public LoggingLevel getServerExceptionCaughtLogLevel() {
            return serverExceptionCaughtLogLevel;
        }

        public void setServerExceptionCaughtLogLevel(
                LoggingLevel serverExceptionCaughtLogLevel) {
            this.serverExceptionCaughtLogLevel = serverExceptionCaughtLogLevel;
        }

        public Object getServerInitializerFactory() {
            return serverInitializerFactory;
        }

        public void setServerInitializerFactory(Object serverInitializerFactory) {
            this.serverInitializerFactory = serverInitializerFactory;
        }

        public boolean getTraceEnabled() {
            return traceEnabled;
        }

        public void setTraceEnabled(boolean traceEnabled) {
            this.traceEnabled = traceEnabled;
        }

        public boolean getUrlDecodeHeaders() {
            return urlDecodeHeaders;
        }

        public void setUrlDecodeHeaders(boolean urlDecodeHeaders) {
            this.urlDecodeHeaders = urlDecodeHeaders;
        }

        public boolean getUsingExecutorService() {
            return usingExecutorService;
        }

        public void setUsingExecutorService(boolean usingExecutorService) {
            this.usingExecutorService = usingExecutorService;
        }

        public boolean getNeedClientAuth() {
            return needClientAuth;
        }

        public void setNeedClientAuth(boolean needClientAuth) {
            this.needClientAuth = needClientAuth;
        }

        public Object getSecurityConfiguration() {
            return securityConfiguration;
        }

        public void setSecurityConfiguration(Object securityConfiguration) {
            this.securityConfiguration = securityConfiguration;
        }

        public Map<String, Object> getSecurityOptions() {
            return securityOptions;
        }

        public void setSecurityOptions(Map<String, Object> securityOptions) {
            this.securityOptions = securityOptions;
        }

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class NettyHttpProducer extends NettyHttpCommon {
        /**
         * Time to wait for a socket connection to be available. Value is in
         * milliseconds. The option is a int type.
         */
        private int connectTimeout;
        /**
         * Configure a cookie handler to maintain a HTTP session. The option is
         * a org.apache.camel.http.common.cookie.CookieHandler type.
         */
        private Object cookieHandler;
        /**
         * Allows to use a timeout for the Netty producer when calling a remote
         * server. By default no timeout is in use. The value is in milli
         * seconds, so eg 30000 is 30 seconds. The requestTimeout is using
         * Netty's ReadTimeoutHandler to trigger the timeout. The option is a
         * long type.
         */
        private long requestTimeout;
        /**
         * Option to disable throwing the HttpOperationFailedException in case
         * of failed responses from the remote server. This allows you to get
         * all responses regardless of the HTTP status code. The option is a
         * boolean type.
         */
        private boolean throwExceptionOnFailure;
        /**
         * To use a custom ClientInitializerFactory. The option is a
         * org.apache.camel.component.netty4.ClientInitializerFactory type.
         */
        private Object clientInitializerFactory;
        /**
         * Channels can be lazily created to avoid exceptions, if the remote
         * server is not up and running when the Camel producer is started. The
         * option is a boolean type.
         */
        private boolean lazyChannelCreation;
        /**
         * The status codes which are considered a success response. The values
         * are inclusive. Multiple ranges can be defined, separated by comma,
         * e.g. 200-204,209,301-304. Each range must be a single number or
         * from-to with the dash included. The default range is 200-299. The
         * option is a java.lang.String type.
         */
        private String okStatusCodeRange;
        /**
         * Whether producer pool is enabled or not. Important: If you turn this
         * off then a single shared connection is used for the producer, also if
         * you are doing request/reply. That means there is a potential issue
         * with interleaved responses if replies comes back out-of-order.
         * Therefore you need to have a correlation id in both the request and
         * reply messages so you can properly correlate the replies to the Camel
         * callback that is responsible for continue processing the message in
         * Camel. To do this you need to implement
         * NettyCamelStateCorrelationManager as correlation manager and
         * configure it via the correlationManager option. See also the
         * correlationManager option for more details. The option is a boolean
         * type.
         */
        private boolean producerPoolEnabled;
        /**
         * Sets the cap on the number of objects that can be allocated by the
         * pool (checked out to clients, or idle awaiting checkout) at a given
         * time. Use a negative value for no limit. The option is a int type.
         */
        private int producerPoolMaxActive;
        /**
         * Sets the cap on the number of idle instances in the pool. The option
         * is a int type.
         */
        private int producerPoolMaxIdle;
        /**
         * Sets the minimum amount of time (value in millis) an object may sit
         * idle in the pool before it is eligible for eviction by the idle
         * object evictor. The option is a long type.
         */
        private long producerPoolMinEvictableIdle;
        /**
         * Sets the minimum number of instances allowed in the producer pool
         * before the evictor thread (if active) spawns new objects. The option
         * is a int type.
         */
        private int producerPoolMinIdle;
        /**
         * Sets whether to use a relative path in HTTP requests. The option is a
         * boolean type.
         */
        private boolean useRelativePath;

        public int getConnectTimeout() {
            return connectTimeout;
        }

        public void setConnectTimeout(int connectTimeout) {
            this.connectTimeout = connectTimeout;
        }

        public Object getCookieHandler() {
            return cookieHandler;
        }

        public void setCookieHandler(Object cookieHandler) {
            this.cookieHandler = cookieHandler;
        }

        public long getRequestTimeout() {
            return requestTimeout;
        }

        public void setRequestTimeout(long requestTimeout) {
            this.requestTimeout = requestTimeout;
        }

        public boolean getThrowExceptionOnFailure() {
            return throwExceptionOnFailure;
        }

        public void setThrowExceptionOnFailure(boolean throwExceptionOnFailure) {
            this.throwExceptionOnFailure = throwExceptionOnFailure;
        }

        public Object getClientInitializerFactory() {
            return clientInitializerFactory;
        }

        public void setClientInitializerFactory(Object clientInitializerFactory) {
            this.clientInitializerFactory = clientInitializerFactory;
        }

        public boolean getLazyChannelCreation() {
            return lazyChannelCreation;
        }

        public void setLazyChannelCreation(boolean lazyChannelCreation) {
            this.lazyChannelCreation = lazyChannelCreation;
        }

        public String getOkStatusCodeRange() {
            return okStatusCodeRange;
        }

        public void setOkStatusCodeRange(String okStatusCodeRange) {
            this.okStatusCodeRange = okStatusCodeRange;
        }

        public boolean getProducerPoolEnabled() {
            return producerPoolEnabled;
        }

        public void setProducerPoolEnabled(boolean producerPoolEnabled) {
            this.producerPoolEnabled = producerPoolEnabled;
        }

        public int getProducerPoolMaxActive() {
            return producerPoolMaxActive;
        }

        public void setProducerPoolMaxActive(int producerPoolMaxActive) {
            this.producerPoolMaxActive = producerPoolMaxActive;
        }

        public int getProducerPoolMaxIdle() {
            return producerPoolMaxIdle;
        }

        public void setProducerPoolMaxIdle(int producerPoolMaxIdle) {
            this.producerPoolMaxIdle = producerPoolMaxIdle;
        }

        public long getProducerPoolMinEvictableIdle() {
            return producerPoolMinEvictableIdle;
        }

        public void setProducerPoolMinEvictableIdle(
                long producerPoolMinEvictableIdle) {
            this.producerPoolMinEvictableIdle = producerPoolMinEvictableIdle;
        }

        public int getProducerPoolMinIdle() {
            return producerPoolMinIdle;
        }

        public void setProducerPoolMinIdle(int producerPoolMinIdle) {
            this.producerPoolMinIdle = producerPoolMinIdle;
        }

        public boolean getUseRelativePath() {
            return useRelativePath;
        }

        public void setUseRelativePath(boolean useRelativePath) {
            this.useRelativePath = useRelativePath;
        }
    }
}