/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * The beanstalk component is used for job retrieval and post-processing of
 * Beanstalk jobs.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface BeanstalkEndpoint {


    public static class BeanstalkCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        BeanstalkCommon(String path) {
            super("beanstalk", path);
        }
        /**
         * Connection settings host:port/tube. The option is a java.lang.String
         * type.
         */
        public T connectionSettings(String connectionSettings) {
            this.properties.put("connectionSettings", connectionSettings);
            return (T) this;
        }
        /**
         * put means to put the job into Beanstalk. Job body is specified in the
         * Camel message body. Job ID will be returned in beanstalk.jobId
         * message header. delete, release, touch or bury expect Job ID in the
         * message header beanstalk.jobId. Result of the operation is returned
         * in beanstalk.result message header kick expects the number of jobs to
         * kick in the message body and returns the number of jobs actually
         * kicked out in the message header beanstalk.result. The option is a
         * org.apache.camel.component.beanstalk.BeanstalkCommand type.
         */
        public T command(BeanstalkCommand command) {
            this.properties.put("command", command);
            return (T) this;
        }
        /**
         * Job delay in seconds. The option is a int type.
         */
        public T jobDelay(int jobDelay) {
            this.properties.put("jobDelay", jobDelay);
            return (T) this;
        }
        /**
         * Job priority. (0 is the highest, see Beanstalk protocol). The option
         * is a long type.
         */
        public T jobPriority(long jobPriority) {
            this.properties.put("jobPriority", jobPriority);
            return (T) this;
        }
        /**
         * Job time to run in seconds. (when 0, the beanstalkd daemon raises it
         * to 1 automatically, see Beanstalk protocol). The option is a int
         * type.
         */
        public T jobTimeToRun(int jobTimeToRun) {
            this.properties.put("jobTimeToRun", jobTimeToRun);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class BeanstalkConsumer
            extends
                BeanstalkCommon<BeanstalkConsumer>
            implements
                EndpointDefinition.Consumer {
        public BeanstalkConsumer(String path) {
            super(path);
        }
        /**
         * Whether to wait for job to complete before ack the job from
         * beanstalk. The option is a boolean type.
         */
        public BeanstalkConsumer awaitJob(boolean awaitJob) {
            this.properties.put("awaitJob", awaitJob);
            return (BeanstalkConsumer) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public BeanstalkConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (BeanstalkConsumer) this;
        }
        /**
         * Command to use when processing failed. The option is a
         * org.apache.camel.component.beanstalk.BeanstalkCommand type.
         */
        public BeanstalkConsumer onFailure(BeanstalkCommand onFailure) {
            this.properties.put("onFailure", onFailure);
            return (BeanstalkConsumer) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option is a
         * boolean type.
         */
        public BeanstalkConsumer sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (BeanstalkConsumer) this;
        }
        /**
         * Whether to use blockIO. The option is a boolean type.
         */
        public BeanstalkConsumer useBlockIO(boolean useBlockIO) {
            this.properties.put("useBlockIO", useBlockIO);
            return (BeanstalkConsumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public BeanstalkConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (BeanstalkConsumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public BeanstalkConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (BeanstalkConsumer) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option is a
         * org.apache.camel.spi.PollingConsumerPollStrategy type.
         */
        public BeanstalkConsumer pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (BeanstalkConsumer) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * is a int type.
         */
        public BeanstalkConsumer backoffErrorThreshold(int backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (BeanstalkConsumer) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option is a int type.
         */
        public BeanstalkConsumer backoffIdleThreshold(int backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (BeanstalkConsumer) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option is a int type.
         */
        public BeanstalkConsumer backoffMultiplier(int backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (BeanstalkConsumer) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public BeanstalkConsumer delay(long delay) {
            this.properties.put("delay", delay);
            return (BeanstalkConsumer) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option is a boolean type.
         */
        public BeanstalkConsumer greedy(boolean greedy) {
            this.properties.put("greedy", greedy);
            return (BeanstalkConsumer) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public BeanstalkConsumer initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (BeanstalkConsumer) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * is a org.apache.camel.LoggingLevel type.
         */
        public BeanstalkConsumer runLoggingLevel(LoggingLevel runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (BeanstalkConsumer) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option is a java.util.concurrent.ScheduledExecutorService
         * type.
         */
        public BeanstalkConsumer scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (BeanstalkConsumer) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option is a
         * org.apache.camel.spi.ScheduledPollConsumerScheduler type.
         */
        public BeanstalkConsumer scheduler(
                ScheduledPollConsumerScheduler scheduler) {
            this.properties.put("scheduler", scheduler);
            return (BeanstalkConsumer) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public BeanstalkConsumer schedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (BeanstalkConsumer) this;
        }
        /**
         * Whether the scheduler should be auto started. The option is a boolean
         * type.
         */
        public BeanstalkConsumer startScheduler(boolean startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (BeanstalkConsumer) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option is a
         * java.util.concurrent.TimeUnit type.
         */
        public BeanstalkConsumer timeUnit(TimeUnit timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (BeanstalkConsumer) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option is a boolean
         * type.
         */
        public BeanstalkConsumer useFixedDelay(boolean useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (BeanstalkConsumer) this;
        }
    }

    public static class BeanstalkProducer
            extends
                BeanstalkCommon<BeanstalkProducer>
            implements
                EndpointDefinition.Producer {
        public BeanstalkProducer(String path) {
            super(path);
        }
    }

    public static enum BeanstalkCommand {
        bury, release, put, touch, delete, kick;
    }
    public default BeanstalkConsumer fromBeanstalk(String path) {
        return new BeanstalkConsumer(path);
    }
    public default BeanstalkProducer toBeanstalk(String path) {
        return new BeanstalkProducer(path);
    }
}