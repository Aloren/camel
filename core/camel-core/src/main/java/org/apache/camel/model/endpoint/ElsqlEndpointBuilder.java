/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * The elsql component is an extension to the existing SQL Component that uses
 * ElSql to define the SQL queries.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface ElsqlEndpointBuilder {


    /**
     * Base class for the ElSQL component builders.
     */
    public static class ElsqlCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        ElsqlCommonBuilder(String path) {
            super("elsql", path);
        }
        /**
         * The name of the elsql to use (is NAMED in the elsql file).
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T elsqlName(String elsqlName) {
            this.properties.put("elsqlName", elsqlName);
            return (T) this;
        }
        /**
         * The resource file which contains the elsql SQL statements to use. You
         * can specify multiple resources separated by comma. The resources are
         * loaded on the classpath by default, you can prefix with file: to load
         * from file system. Notice you can set this option on the component and
         * then you do not have to configure this on the endpoint.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T resourceUri(String resourceUri) {
            this.properties.put("resourceUri", resourceUri);
            return (T) this;
        }
        /**
         * Whether to allow using named parameters in the queries.
         * The option is a <code>boolean</code> type.
         * @group common
         */
        public T allowNamedParameters(boolean allowNamedParameters) {
            this.properties.put("allowNamedParameters", allowNamedParameters);
            return (T) this;
        }
        /**
         * Whether to allow using named parameters in the queries.
         * The option will be converted to a <code>boolean</code> type.
         * @group common
         */
        public T allowNamedParameters(String allowNamedParameters) {
            this.properties.put("allowNamedParameters", allowNamedParameters);
            return (T) this;
        }
        /**
         * To use a vendor specific com.opengamma.elsql.ElSqlConfig.
         * The option is a
         * <code>org.apache.camel.component.elsql.ElSqlDatabaseVendor</code>
         * type.
         * @group common
         */
        public T databaseVendor(ElSqlDatabaseVendor databaseVendor) {
            this.properties.put("databaseVendor", databaseVendor);
            return (T) this;
        }
        /**
         * To use a vendor specific com.opengamma.elsql.ElSqlConfig.
         * The option will be converted to a
         * <code>org.apache.camel.component.elsql.ElSqlDatabaseVendor</code>
         * type.
         * @group common
         */
        public T databaseVendor(String databaseVendor) {
            this.properties.put("databaseVendor", databaseVendor);
            return (T) this;
        }
        /**
         * Sets the DataSource to use to communicate with the database.
         * The option is a <code>javax.sql.DataSource</code> type.
         * @group common
         */
        public T dataSource(Object dataSource) {
            this.properties.put("dataSource", dataSource);
            return (T) this;
        }
        /**
         * Sets the DataSource to use to communicate with the database.
         * The option will be converted to a <code>javax.sql.DataSource</code>
         * type.
         * @group common
         */
        public T dataSource(String dataSource) {
            this.properties.put("dataSource", dataSource);
            return (T) this;
        }
        /**
         * Sets the reference to a DataSource to lookup from the registry, to
         * use for communicating with the database.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        @Deprecated
        public T dataSourceRef(String dataSourceRef) {
            this.properties.put("dataSourceRef", dataSourceRef);
            return (T) this;
        }
        /**
         * Specify the full package and class name to use as conversion when
         * outputType=SelectOne.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T outputClass(String outputClass) {
            this.properties.put("outputClass", outputClass);
            return (T) this;
        }
        /**
         * Store the query result in a header instead of the message body. By
         * default, outputHeader == null and the query result is stored in the
         * message body, any existing content in the message body is discarded.
         * If outputHeader is set, the value is used as the name of the header
         * to store the query result and the original message body is preserved.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        public T outputHeader(String outputHeader) {
            this.properties.put("outputHeader", outputHeader);
            return (T) this;
        }
        /**
         * Make the output of consumer or producer to SelectList as List of Map,
         * or SelectOne as single Java object in the following way: a) If the
         * query has only single column, then that JDBC Column object is
         * returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long
         * object. b) If the query has more than one column, then it will return
         * a Map of that result. c) If the outputClass is set, then it will
         * convert the query result into an Java bean object by calling all the
         * setters that match the column names. It will assume your class has a
         * default constructor to create instance with. d) If the query resulted
         * in more than one rows, it throws an non-unique result exception.
         * StreamList streams the result of the query using an Iterator. This
         * can be used with the Splitter EIP in streaming mode to process the
         * ResultSet in streaming fashion.
         * The option is a
         * <code>org.apache.camel.component.sql.SqlOutputType</code> type.
         * @group common
         */
        public T outputType(SqlOutputType outputType) {
            this.properties.put("outputType", outputType);
            return (T) this;
        }
        /**
         * Make the output of consumer or producer to SelectList as List of Map,
         * or SelectOne as single Java object in the following way: a) If the
         * query has only single column, then that JDBC Column object is
         * returned. (such as SELECT COUNT( ) FROM PROJECT will return a Long
         * object. b) If the query has more than one column, then it will return
         * a Map of that result. c) If the outputClass is set, then it will
         * convert the query result into an Java bean object by calling all the
         * setters that match the column names. It will assume your class has a
         * default constructor to create instance with. d) If the query resulted
         * in more than one rows, it throws an non-unique result exception.
         * StreamList streams the result of the query using an Iterator. This
         * can be used with the Splitter EIP in streaming mode to process the
         * ResultSet in streaming fashion.
         * The option will be converted to a
         * <code>org.apache.camel.component.sql.SqlOutputType</code> type.
         * @group common
         */
        public T outputType(String outputType) {
            this.properties.put("outputType", outputType);
            return (T) this;
        }
        /**
         * The separator to use when parameter values is taken from message body
         * (if the body is a String type), to be inserted at # placeholders.
         * Notice if you use named parameters, then a Map type is used instead.
         * The default value is comma.
         * The option is a <code>char</code> type.
         * @group common
         */
        public T separator(char separator) {
            this.properties.put("separator", separator);
            return (T) this;
        }
        /**
         * The separator to use when parameter values is taken from message body
         * (if the body is a String type), to be inserted at # placeholders.
         * Notice if you use named parameters, then a Map type is used instead.
         * The default value is comma.
         * The option will be converted to a <code>char</code> type.
         * @group common
         */
        public T separator(String separator) {
            this.properties.put("separator", separator);
            return (T) this;
        }
        /**
         * If enabled then the populateStatement method from
         * org.apache.camel.component.sql.SqlPrepareStatementStrategy is always
         * invoked, also if there is no expected parameters to be prepared. When
         * this is false then the populateStatement is only invoked if there is
         * 1 or more expected parameters to be set; for example this avoids
         * reading the message body/headers for SQL queries with no parameters.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T alwaysPopulateStatement(boolean alwaysPopulateStatement) {
            this.properties.put("alwaysPopulateStatement", alwaysPopulateStatement);
            return (T) this;
        }
        /**
         * If enabled then the populateStatement method from
         * org.apache.camel.component.sql.SqlPrepareStatementStrategy is always
         * invoked, also if there is no expected parameters to be prepared. When
         * this is false then the populateStatement is only invoked if there is
         * 1 or more expected parameters to be set; for example this avoids
         * reading the message body/headers for SQL queries with no parameters.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T alwaysPopulateStatement(String alwaysPopulateStatement) {
            this.properties.put("alwaysPopulateStatement", alwaysPopulateStatement);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * To use a specific configured ElSqlConfig. It may be better to use the
         * databaseVendor option instead.
         * The option is a <code>com.opengamma.elsql.ElSqlConfig</code> type.
         * @group advanced
         */
        public T elSqlConfig(Object elSqlConfig) {
            this.properties.put("elSqlConfig", elSqlConfig);
            return (T) this;
        }
        /**
         * To use a specific configured ElSqlConfig. It may be better to use the
         * databaseVendor option instead.
         * The option will be converted to a
         * <code>com.opengamma.elsql.ElSqlConfig</code> type.
         * @group advanced
         */
        public T elSqlConfig(String elSqlConfig) {
            this.properties.put("elSqlConfig", elSqlConfig);
            return (T) this;
        }
        /**
         * If set greater than zero, then Camel will use this count value of
         * parameters to replace instead of querying via JDBC metadata API. This
         * is useful if the JDBC vendor could not return correct parameters
         * count, then user may override instead.
         * The option is a <code>int</code> type.
         * @group advanced
         */
        public T parametersCount(int parametersCount) {
            this.properties.put("parametersCount", parametersCount);
            return (T) this;
        }
        /**
         * If set greater than zero, then Camel will use this count value of
         * parameters to replace instead of querying via JDBC metadata API. This
         * is useful if the JDBC vendor could not return correct parameters
         * count, then user may override instead.
         * The option will be converted to a <code>int</code> type.
         * @group advanced
         */
        public T parametersCount(String parametersCount) {
            this.properties.put("parametersCount", parametersCount);
            return (T) this;
        }
        /**
         * Specifies a character that will be replaced to in SQL query. Notice,
         * that it is simple String.replaceAll() operation and no SQL parsing is
         * involved (quoted strings will also change).
         * The option is a <code>java.lang.String</code> type.
         * @group advanced
         */
        public T placeholder(String placeholder) {
            this.properties.put("placeholder", placeholder);
            return (T) this;
        }
        /**
         * Allows to plugin to use a custom
         * org.apache.camel.component.sql.SqlPrepareStatementStrategy to control
         * preparation of the query and prepared statement.
         * The option is a
         * <code>org.apache.camel.component.sql.SqlPrepareStatementStrategy</code> type.
         * @group advanced
         */
        public T prepareStatementStrategy(Object prepareStatementStrategy) {
            this.properties.put("prepareStatementStrategy", prepareStatementStrategy);
            return (T) this;
        }
        /**
         * Allows to plugin to use a custom
         * org.apache.camel.component.sql.SqlPrepareStatementStrategy to control
         * preparation of the query and prepared statement.
         * The option will be converted to a
         * <code>org.apache.camel.component.sql.SqlPrepareStatementStrategy</code> type.
         * @group advanced
         */
        public T prepareStatementStrategy(String prepareStatementStrategy) {
            this.properties.put("prepareStatementStrategy", prepareStatementStrategy);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported).
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Configures the Spring JdbcTemplate with the key/values from the Map.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group advanced
         */
        public T templateOptions(Map<String, Object> templateOptions) {
            this.properties.put("templateOptions", templateOptions);
            return (T) this;
        }
        /**
         * Configures the Spring JdbcTemplate with the key/values from the Map.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group advanced
         */
        public T templateOptions(String templateOptions) {
            this.properties.put("templateOptions", templateOptions);
            return (T) this;
        }
        /**
         * Sets whether to use placeholder and replace all placeholder
         * characters with sign in the SQL queries.
         * The option is a <code>boolean</code> type.
         * @group advanced
         */
        public T usePlaceholder(boolean usePlaceholder) {
            this.properties.put("usePlaceholder", usePlaceholder);
            return (T) this;
        }
        /**
         * Sets whether to use placeholder and replace all placeholder
         * characters with sign in the SQL queries.
         * The option will be converted to a <code>boolean</code> type.
         * @group advanced
         */
        public T usePlaceholder(String usePlaceholder) {
            this.properties.put("usePlaceholder", usePlaceholder);
            return (T) this;
        }
    }

    /**
     * Builder for endpoint consumers for the ElSQL component.
     */
    public static class ElsqlConsumerBuilder
            extends
                ElsqlCommonBuilder<ElsqlConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public ElsqlConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Sets whether to break batch if onConsume failed.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder breakBatchOnConsumeFail(
                boolean breakBatchOnConsumeFail) {
            this.properties.put("breakBatchOnConsumeFail", breakBatchOnConsumeFail);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets whether to break batch if onConsume failed.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder breakBatchOnConsumeFail(
                String breakBatchOnConsumeFail) {
            this.properties.put("breakBatchOnConsumeFail", breakBatchOnConsumeFail);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder bridgeErrorHandler(String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets an expected update count to validate when using onConsume.
         * The option is a <code>int</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder expectedUpdateCount(int expectedUpdateCount) {
            this.properties.put("expectedUpdateCount", expectedUpdateCount);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets an expected update count to validate when using onConsume.
         * The option will be converted to a <code>int</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder expectedUpdateCount(
                String expectedUpdateCount) {
            this.properties.put("expectedUpdateCount", expectedUpdateCount);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets the maximum number of messages to poll.
         * The option is a <code>int</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder maxMessagesPerPoll(int maxMessagesPerPoll) {
            this.properties.put("maxMessagesPerPoll", maxMessagesPerPoll);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets the maximum number of messages to poll.
         * The option will be converted to a <code>int</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder maxMessagesPerPoll(String maxMessagesPerPoll) {
            this.properties.put("maxMessagesPerPoll", maxMessagesPerPoll);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * After processing each row then this query can be executed, if the
         * Exchange was processed successfully, for example to mark the row as
         * processed. The query can have parameter.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder onConsume(String onConsume) {
            this.properties.put("onConsume", onConsume);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * After processing the entire batch, this query can be executed to bulk
         * update rows etc. The query cannot have parameters.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder onConsumeBatchComplete(
                String onConsumeBatchComplete) {
            this.properties.put("onConsumeBatchComplete", onConsumeBatchComplete);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * After processing each row then this query can be executed, if the
         * Exchange failed, for example to mark the row as failed. The query can
         * have parameter.
         * The option is a <code>java.lang.String</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder onConsumeFailed(String onConsumeFailed) {
            this.properties.put("onConsumeFailed", onConsumeFailed);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets whether empty resultset should be allowed to be sent to the next
         * hop. Defaults to false. So the empty resultset will be filtered out.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder routeEmptyResultSet(
                boolean routeEmptyResultSet) {
            this.properties.put("routeEmptyResultSet", routeEmptyResultSet);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets whether empty resultset should be allowed to be sent to the next
         * hop. Defaults to false. So the empty resultset will be filtered out.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder routeEmptyResultSet(
                String routeEmptyResultSet) {
            this.properties.put("routeEmptyResultSet", routeEmptyResultSet);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder sendEmptyMessageWhenIdle(
                String sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Enables or disables transaction. If enabled then if processing an
         * exchange failed then the consumerbreak out processing any further
         * exchanges to cause a rollback eager.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder transacted(boolean transacted) {
            this.properties.put("transacted", transacted);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Enables or disables transaction. If enabled then if processing an
         * exchange failed then the consumerbreak out processing any further
         * exchanges to cause a rollback eager.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder transacted(String transacted) {
            this.properties.put("transacted", transacted);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets how resultset should be delivered to route. Indicates delivery
         * as either a list or individual object. defaults to true.
         * The option is a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder useIterator(boolean useIterator) {
            this.properties.put("useIterator", useIterator);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets how resultset should be delivered to route. Indicates delivery
         * as either a list or individual object. defaults to true.
         * The option will be converted to a <code>boolean</code> type.
         * @group consumer
         */
        public ElsqlConsumerBuilder useIterator(String useIterator) {
            this.properties.put("useIterator", useIterator);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option is a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         * @group consumer (advanced)
         */
        public ElsqlConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         * @group consumer (advanced)
         */
        public ElsqlConsumerBuilder exceptionHandler(String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option is a <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        public ElsqlConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange.
         * The option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         * @group consumer (advanced)
         */
        public ElsqlConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel.
         * The option is a
         * <code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.
         * @group consumer (advanced)
         */
        public ElsqlConsumerBuilder pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel.
         * The option will be converted to a
         * <code>org.apache.camel.spi.PollingConsumerPollStrategy</code> type.
         * @group consumer (advanced)
         */
        public ElsqlConsumerBuilder pollStrategy(String pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Allows to plugin to use a custom
         * org.apache.camel.component.sql.SqlProcessingStrategy to execute
         * queries when the consumer has processed the rows/batch.
         * The option is a
         * <code>org.apache.camel.component.sql.SqlProcessingStrategy</code>
         * type.
         * @group consumer (advanced)
         */
        public ElsqlConsumerBuilder processingStrategy(Object processingStrategy) {
            this.properties.put("processingStrategy", processingStrategy);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Allows to plugin to use a custom
         * org.apache.camel.component.sql.SqlProcessingStrategy to execute
         * queries when the consumer has processed the rows/batch.
         * The option will be converted to a
         * <code>org.apache.camel.component.sql.SqlProcessingStrategy</code>
         * type.
         * @group consumer (advanced)
         */
        public ElsqlConsumerBuilder processingStrategy(String processingStrategy) {
            this.properties.put("processingStrategy", processingStrategy);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in.
         * The option is a <code>int</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder backoffErrorThreshold(
                int backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in.
         * The option will be converted to a <code>int</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder backoffErrorThreshold(
                String backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in.
         * The option is a <code>int</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder backoffIdleThreshold(
                int backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in.
         * The option will be converted to a <code>int</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder backoffIdleThreshold(
                String backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured.
         * The option is a <code>int</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder backoffMultiplier(int backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured.
         * The option will be converted to a <code>int</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder backoffMultiplier(String backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour).
         * The option is a <code>long</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder delay(long delay) {
            this.properties.put("delay", delay);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour).
         * The option will be converted to a <code>long</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder delay(String delay) {
            this.properties.put("delay", delay);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages.
         * The option is a <code>boolean</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder greedy(boolean greedy) {
            this.properties.put("greedy", greedy);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages.
         * The option will be converted to a <code>boolean</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder greedy(String greedy) {
            this.properties.put("greedy", greedy);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour).
         * The option is a <code>long</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour).
         * The option will be converted to a <code>long</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder initialDelay(String initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that.
         * The option is a <code>org.apache.camel.LoggingLevel</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder runLoggingLevel(LoggingLevel runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that.
         * The option will be converted to a
         * <code>org.apache.camel.LoggingLevel</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder runLoggingLevel(String runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool.
         * The option is a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool.
         * The option will be converted to a
         * <code>java.util.concurrent.ScheduledExecutorService</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder scheduledExecutorService(
                String scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component.
         * The option is a
         * <code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>
         * type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder scheduler(
                ScheduledPollConsumerScheduler scheduler) {
            this.properties.put("scheduler", scheduler);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component.
         * The option will be converted to a
         * <code>org.apache.camel.spi.ScheduledPollConsumerScheduler</code>
         * type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder scheduler(String scheduler) {
            this.properties.put("scheduler", scheduler);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler.
         * The option is a <code>java.util.Map&lt;java.lang.String,
         * java.lang.Object&gt;</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder schedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler.
         * The option will be converted to a
         * <code>java.util.Map&lt;java.lang.String, java.lang.Object&gt;</code>
         * type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder schedulerProperties(
                String schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started.
         * The option is a <code>boolean</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder startScheduler(boolean startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started.
         * The option will be converted to a <code>boolean</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder startScheduler(String startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options.
         * The option is a <code>java.util.concurrent.TimeUnit</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder timeUnit(TimeUnit timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options.
         * The option will be converted to a
         * <code>java.util.concurrent.TimeUnit</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder timeUnit(String timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details.
         * The option is a <code>boolean</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder useFixedDelay(boolean useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (ElsqlConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details.
         * The option will be converted to a <code>boolean</code> type.
         * @group scheduler
         */
        public ElsqlConsumerBuilder useFixedDelay(String useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (ElsqlConsumerBuilder) this;
        }
    }

    /**
     * Builder for endpoint producers for the ElSQL component.
     */
    public static class ElsqlProducerBuilder
            extends
                ElsqlCommonBuilder<ElsqlProducerBuilder>
            implements
                EndpointProducerBuilder {
        public ElsqlProducerBuilder(String path) {
            super(path);
        }
        /**
         * Enables or disables batch mode.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public ElsqlProducerBuilder batch(boolean batch) {
            this.properties.put("batch", batch);
            return (ElsqlProducerBuilder) this;
        }
        /**
         * Enables or disables batch mode.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public ElsqlProducerBuilder batch(String batch) {
            this.properties.put("batch", batch);
            return (ElsqlProducerBuilder) this;
        }
        /**
         * If set, will ignore the results of the SQL query and use the existing
         * IN message as the OUT message for the continuation of processing.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public ElsqlProducerBuilder noop(boolean noop) {
            this.properties.put("noop", noop);
            return (ElsqlProducerBuilder) this;
        }
        /**
         * If set, will ignore the results of the SQL query and use the existing
         * IN message as the OUT message for the continuation of processing.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public ElsqlProducerBuilder noop(String noop) {
            this.properties.put("noop", noop);
            return (ElsqlProducerBuilder) this;
        }
        /**
         * Whether to use the message body as the SQL and then headers for
         * parameters. If this option is enabled then the SQL in the uri is not
         * used.
         * The option is a <code>boolean</code> type.
         * @group producer
         */
        public ElsqlProducerBuilder useMessageBodyForSql(
                boolean useMessageBodyForSql) {
            this.properties.put("useMessageBodyForSql", useMessageBodyForSql);
            return (ElsqlProducerBuilder) this;
        }
        /**
         * Whether to use the message body as the SQL and then headers for
         * parameters. If this option is enabled then the SQL in the uri is not
         * used.
         * The option will be converted to a <code>boolean</code> type.
         * @group producer
         */
        public ElsqlProducerBuilder useMessageBodyForSql(
                String useMessageBodyForSql) {
            this.properties.put("useMessageBodyForSql", useMessageBodyForSql);
            return (ElsqlProducerBuilder) this;
        }
    }

    /**
     * Proxy enum for
     * <code>org.apache.camel.component.elsql.ElSqlDatabaseVendor</code> enum.
     */
    public static enum ElSqlDatabaseVendor {
        Default, Postgres, HSql, MySql, Oracle, SqlServer2008, Veritca;
    }

    /**
     * Proxy enum for <code>org.apache.camel.component.sql.SqlOutputType</code>
     * enum.
     */
    public static enum SqlOutputType {
        SelectOne, SelectList, StreamList;
    }
    /**
     * The elsql component is an extension to the existing SQL Component that
     * uses ElSql to define the SQL queries. Creates a builder to build a
     * consumer endpoint for the ElSQL component.
     */
    public default ElsqlConsumerBuilder fromElsql(String path) {
        return new ElsqlConsumerBuilder(path);
    }
    /**
     * The elsql component is an extension to the existing SQL Component that
     * uses ElSql to define the SQL queries. Creates a builder to build a
     * producer endpoint for the ElSQL component.
     */
    public default ElsqlProducerBuilder toElsql(String path) {
        return new ElsqlProducerBuilder(path);
    }
}