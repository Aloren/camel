/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * The jpa component enables you to store and retrieve Java objects from
 * databases using JPA.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface JpaEndpointBuilder {


    public static class JpaCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        JpaCommonBuilder(String path) {
            super("jpa", path);
        }
        /**
         * The JPA annotated class to use as entity. The option is a
         * java.lang.Class<?> type.
         */
        public T entityType(Class<Object> entityType) {
            this.properties.put("entityType", entityType);
            return (T) this;
        }
        /**
         * The camel-jpa component will join transaction by default. You can use
         * this option to turn this off, for example if you use LOCAL_RESOURCE
         * and join transaction doesn't work with your JPA provider. This option
         * can also be set globally on the JpaComponent, instead of having to
         * set it on all endpoints. The option is a boolean type.
         */
        public T joinTransaction(boolean joinTransaction) {
            this.properties.put("joinTransaction", joinTransaction);
            return (T) this;
        }
        /**
         * Set the maximum number of results to retrieve on the Query. The
         * option is a int type.
         */
        public T maximumResults(int maximumResults) {
            this.properties.put("maximumResults", maximumResults);
            return (T) this;
        }
        /**
         * To use a named query. The option is a java.lang.String type.
         */
        public T namedQuery(String namedQuery) {
            this.properties.put("namedQuery", namedQuery);
            return (T) this;
        }
        /**
         * To use a custom native query. You may want to use the option
         * resultClass also when using native queries. The option is a
         * java.lang.String type.
         */
        public T nativeQuery(String nativeQuery) {
            this.properties.put("nativeQuery", nativeQuery);
            return (T) this;
        }
        /**
         * This key/value mapping is used for building the query parameters. It
         * is expected to be of the generic type java.util.Map where the keys
         * are the named parameters of a given JPA query and the values are
         * their corresponding effective values you want to select for. When
         * it's used for producer, Simple expression can be used as a parameter
         * value. It allows you to retrieve parameter values from the message
         * body, header and etc. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public T parameters(Map<String, Object> parameters) {
            this.properties.put("parameters", parameters);
            return (T) this;
        }
        /**
         * The JPA persistence unit used by default. The option is a
         * java.lang.String type.
         */
        public T persistenceUnit(String persistenceUnit) {
            this.properties.put("persistenceUnit", persistenceUnit);
            return (T) this;
        }
        /**
         * To use a custom query. The option is a java.lang.String type.
         */
        public T query(String query) {
            this.properties.put("query", query);
            return (T) this;
        }
        /**
         * Defines the type of the returned payload (we will call
         * entityManager.createNativeQuery(nativeQuery, resultClass) instead of
         * entityManager.createNativeQuery(nativeQuery)). Without this option,
         * we will return an object array. Only has an affect when using in
         * conjunction with native query when consuming data. The option is a
         * java.lang.Class<?> type.
         */
        public T resultClass(Class<Object> resultClass) {
            this.properties.put("resultClass", resultClass);
            return (T) this;
        }
        /**
         * Whether to use Spring's SharedEntityManager for the
         * consumer/producer. Note in most cases joinTransaction should be set
         * to false as this is not an EXTENDED EntityManager. The option is a
         * boolean type.
         */
        public T sharedEntityManager(boolean sharedEntityManager) {
            this.properties.put("sharedEntityManager", sharedEntityManager);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Additional properties for the entity manager to use. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public T entityManagerProperties(
                Map<String, Object> entityManagerProperties) {
            this.properties.put("entityManagerProperties", entityManagerProperties);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class JpaConsumerBuilder
            extends
                JpaCommonBuilder<JpaConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public JpaConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public JpaConsumerBuilder bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (JpaConsumerBuilder) this;
        }
        /**
         * If true, the entity is deleted after it is consumed; if false, the
         * entity is not deleted. The option is a boolean type.
         */
        public JpaConsumerBuilder consumeDelete(boolean consumeDelete) {
            this.properties.put("consumeDelete", consumeDelete);
            return (JpaConsumerBuilder) this;
        }
        /**
         * Specifies whether or not to set an exclusive lock on each entity bean
         * while processing the results from polling. The option is a boolean
         * type.
         */
        public JpaConsumerBuilder consumeLockEntity(boolean consumeLockEntity) {
            this.properties.put("consumeLockEntity", consumeLockEntity);
            return (JpaConsumerBuilder) this;
        }
        /**
         * To use a custom DeleteHandler to delete the row after the consumer is
         * done processing the exchange. The option is a
         * org.apache.camel.component.jpa.DeleteHandler<java.lang.Object> type.
         */
        public JpaConsumerBuilder deleteHandler(Object deleteHandler) {
            this.properties.put("deleteHandler", deleteHandler);
            return (JpaConsumerBuilder) this;
        }
        /**
         * To configure the lock mode on the consumer. The option is a
         * javax.persistence.LockModeType type.
         */
        public JpaConsumerBuilder lockModeType(LockModeType lockModeType) {
            this.properties.put("lockModeType", lockModeType);
            return (JpaConsumerBuilder) this;
        }
        /**
         * An integer value to define the maximum number of messages to gather
         * per poll. By default, no maximum is set. Can be used to avoid polling
         * many thousands of messages when starting up the server. Set a value
         * of 0 or negative to disable. The option is a int type.
         */
        public JpaConsumerBuilder maxMessagesPerPoll(int maxMessagesPerPoll) {
            this.properties.put("maxMessagesPerPoll", maxMessagesPerPoll);
            return (JpaConsumerBuilder) this;
        }
        /**
         * To use a custom Pre-DeleteHandler to delete the row after the
         * consumer has read the entity. The option is a
         * org.apache.camel.component.jpa.DeleteHandler<java.lang.Object> type.
         */
        public JpaConsumerBuilder preDeleteHandler(Object preDeleteHandler) {
            this.properties.put("preDeleteHandler", preDeleteHandler);
            return (JpaConsumerBuilder) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option is a
         * boolean type.
         */
        public JpaConsumerBuilder sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (JpaConsumerBuilder) this;
        }
        /**
         * To configure whether to use NOWAIT on lock and silently skip the
         * entity. The option is a boolean type.
         */
        public JpaConsumerBuilder skipLockedEntity(boolean skipLockedEntity) {
            this.properties.put("skipLockedEntity", skipLockedEntity);
            return (JpaConsumerBuilder) this;
        }
        /**
         * Whether to run the consumer in transacted mode, by which all messages
         * will either commit or rollback, when the entire batch has been
         * processed. The default behavior (false) is to commit all the
         * previously successfully processed messages, and only rollback the
         * last failed message. The option is a boolean type.
         */
        public JpaConsumerBuilder transacted(boolean transacted) {
            this.properties.put("transacted", transacted);
            return (JpaConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public JpaConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (JpaConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public JpaConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (JpaConsumerBuilder) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option is a
         * org.apache.camel.spi.PollingConsumerPollStrategy type.
         */
        public JpaConsumerBuilder pollStrategy(
                PollingConsumerPollStrategy pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (JpaConsumerBuilder) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * is a int type.
         */
        public JpaConsumerBuilder backoffErrorThreshold(
                int backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (JpaConsumerBuilder) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option is a int type.
         */
        public JpaConsumerBuilder backoffIdleThreshold(int backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (JpaConsumerBuilder) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option is a int type.
         */
        public JpaConsumerBuilder backoffMultiplier(int backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (JpaConsumerBuilder) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public JpaConsumerBuilder delay(long delay) {
            this.properties.put("delay", delay);
            return (JpaConsumerBuilder) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option is a boolean type.
         */
        public JpaConsumerBuilder greedy(boolean greedy) {
            this.properties.put("greedy", greedy);
            return (JpaConsumerBuilder) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public JpaConsumerBuilder initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (JpaConsumerBuilder) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * is a org.apache.camel.LoggingLevel type.
         */
        public JpaConsumerBuilder runLoggingLevel(LoggingLevel runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (JpaConsumerBuilder) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option is a java.util.concurrent.ScheduledExecutorService
         * type.
         */
        public JpaConsumerBuilder scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (JpaConsumerBuilder) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option is a
         * org.apache.camel.spi.ScheduledPollConsumerScheduler type.
         */
        public JpaConsumerBuilder scheduler(
                ScheduledPollConsumerScheduler scheduler) {
            this.properties.put("scheduler", scheduler);
            return (JpaConsumerBuilder) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public JpaConsumerBuilder schedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (JpaConsumerBuilder) this;
        }
        /**
         * Whether the scheduler should be auto started. The option is a boolean
         * type.
         */
        public JpaConsumerBuilder startScheduler(boolean startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (JpaConsumerBuilder) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option is a
         * java.util.concurrent.TimeUnit type.
         */
        public JpaConsumerBuilder timeUnit(TimeUnit timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (JpaConsumerBuilder) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option is a boolean
         * type.
         */
        public JpaConsumerBuilder useFixedDelay(boolean useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (JpaConsumerBuilder) this;
        }
    }

    public static class JpaProducerBuilder
            extends
                JpaCommonBuilder<JpaProducerBuilder>
            implements
                EndpointProducerBuilder {
        public JpaProducerBuilder(String path) {
            super(path);
        }
        /**
         * Flushes the EntityManager after the entity bean has been persisted.
         * The option is a boolean type.
         */
        public JpaProducerBuilder flushOnSend(boolean flushOnSend) {
            this.properties.put("flushOnSend", flushOnSend);
            return (JpaProducerBuilder) this;
        }
        /**
         * Indicates to use entityManager.remove(entity). The option is a
         * boolean type.
         */
        public JpaProducerBuilder remove(boolean remove) {
            this.properties.put("remove", remove);
            return (JpaProducerBuilder) this;
        }
        /**
         * To configure whether to use executeUpdate() when producer executes a
         * query. When you use INSERT, UPDATE or DELETE statement as a named
         * query, you need to specify this option to 'true'. The option is a
         * java.lang.Boolean type.
         */
        public JpaProducerBuilder useExecuteUpdate(Boolean useExecuteUpdate) {
            this.properties.put("useExecuteUpdate", useExecuteUpdate);
            return (JpaProducerBuilder) this;
        }
        /**
         * If set to true, then Camel will use the EntityManager from the header
         * JpaConstants.ENTITY_MANAGER instead of the configured entity manager
         * on the component/endpoint. This allows end users to control which
         * entity manager will be in use. The option is a boolean type.
         */
        public JpaProducerBuilder usePassedInEntityManager(
                boolean usePassedInEntityManager) {
            this.properties.put("usePassedInEntityManager", usePassedInEntityManager);
            return (JpaProducerBuilder) this;
        }
        /**
         * Indicates to use entityManager.persist(entity) instead of
         * entityManager.merge(entity). Note: entityManager.persist(entity)
         * doesn't work for detached entities (where the EntityManager has to
         * execute an UPDATE instead of an INSERT query)!. The option is a
         * boolean type.
         */
        public JpaProducerBuilder usePersist(boolean usePersist) {
            this.properties.put("usePersist", usePersist);
            return (JpaProducerBuilder) this;
        }
    }

    public static enum LockModeType {
        READ, WRITE, OPTIMISTIC, OPTIMISTIC_FORCE_INCREMENT, PESSIMISTIC_READ, PESSIMISTIC_WRITE, PESSIMISTIC_FORCE_INCREMENT, NONE;
    }
    public default JpaConsumerBuilder fromJpa(String path) {
        return new JpaConsumerBuilder(path);
    }
    public default JpaProducerBuilder toJpa(String path) {
        return new JpaProducerBuilder(path);
    }
}