/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URL;
import java.util.Set;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Connect to OPC UA servers using the binary protocol for acquiring telemetry
 * data
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface MiloClientEndpointBuilder {


    public static class MiloClientCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        MiloClientCommonBuilder(String path) {
            super("milo-client", path);
        }
        /**
         * The OPC UA server endpoint. The option is a
         * <code>java.lang.String</code> type.
         */
        public T endpointUri(String endpointUri) {
            this.properties.put("endpointUri", endpointUri);
            return (T) this;
        }
        /**
         * A virtual client id to force the creation of a new connection
         * instance. The option is a <code>java.lang.String</code> type.
         */
        public T clientId(String clientId) {
            this.properties.put("clientId", clientId);
            return (T) this;
        }
        /**
         * Default await setting for writes. The option is a
         * <code>boolean</code> type.
         */
        public T defaultAwaitWrites(boolean defaultAwaitWrites) {
            this.properties.put("defaultAwaitWrites", defaultAwaitWrites);
            return (T) this;
        }
        /**
         * Default await setting for writes. The option will be converted to a
         * <code>boolean</code> type.
         */
        public T defaultAwaitWrites(String defaultAwaitWrites) {
            this.properties.put("defaultAwaitWrites", defaultAwaitWrites);
            return (T) this;
        }
        /**
         * A suffix for endpoint URI when discovering. The option is a
         * <code>java.lang.String</code> type.
         */
        public T discoveryEndpointSuffix(String discoveryEndpointSuffix) {
            this.properties.put("discoveryEndpointSuffix", discoveryEndpointSuffix);
            return (T) this;
        }
        /**
         * An alternative discovery URI. The option is a
         * <code>java.lang.String</code> type.
         */
        public T discoveryEndpointUri(String discoveryEndpointUri) {
            this.properties.put("discoveryEndpointUri", discoveryEndpointUri);
            return (T) this;
        }
        /**
         * The method definition (see Method ID). The option is a
         * <code>org.eclipse.milo.opcua.stack.core.types.builtin.ExpandedNodeId</code> type.
         */
        public T method(Object method) {
            this.properties.put("method", method);
            return (T) this;
        }
        /**
         * The method definition (see Method ID). The option will be converted
         * to a
         * <code>org.eclipse.milo.opcua.stack.core.types.builtin.ExpandedNodeId</code> type.
         */
        public T method(String method) {
            this.properties.put("method", method);
            return (T) this;
        }
        /**
         * The node definition (see Node ID). The option is a
         * <code>org.eclipse.milo.opcua.stack.core.types.builtin.ExpandedNodeId</code> type.
         */
        public T node(Object node) {
            this.properties.put("node", node);
            return (T) this;
        }
        /**
         * The node definition (see Node ID). The option will be converted to a
         * <code>org.eclipse.milo.opcua.stack.core.types.builtin.ExpandedNodeId</code> type.
         */
        public T node(String node) {
            this.properties.put("node", node);
            return (T) this;
        }
        /**
         * The sampling interval in milliseconds. The option is a
         * <code>java.lang.Double</code> type.
         */
        public T samplingInterval(Double samplingInterval) {
            this.properties.put("samplingInterval", samplingInterval);
            return (T) this;
        }
        /**
         * The sampling interval in milliseconds. The option will be converted
         * to a <code>java.lang.Double</code> type.
         */
        public T samplingInterval(String samplingInterval) {
            this.properties.put("samplingInterval", samplingInterval);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a <code>boolean</code> type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * will be converted to a <code>boolean</code> type.
         */
        public T basicPropertyBinding(String basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a <code>boolean</code> type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * will be converted to a <code>boolean</code> type.
         */
        public T synchronous(String synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * A set of allowed security policy URIs. Default is to accept all and
         * use the highest. The option is a
         * <code>java.util.Set<java.lang.String></code> type.
         */
        public T allowedSecurityPolicies(Set<String> allowedSecurityPolicies) {
            this.properties.put("allowedSecurityPolicies", allowedSecurityPolicies);
            return (T) this;
        }
        /**
         * A set of allowed security policy URIs. Default is to accept all and
         * use the highest. The option will be converted to a
         * <code>java.util.Set<java.lang.String></code> type.
         */
        public T allowedSecurityPolicies(String allowedSecurityPolicies) {
            this.properties.put("allowedSecurityPolicies", allowedSecurityPolicies);
            return (T) this;
        }
        /**
         * The application name. The option is a <code>java.lang.String</code>
         * type.
         */
        public T applicationName(String applicationName) {
            this.properties.put("applicationName", applicationName);
            return (T) this;
        }
        /**
         * The application URI. The option is a <code>java.lang.String</code>
         * type.
         */
        public T applicationUri(String applicationUri) {
            this.properties.put("applicationUri", applicationUri);
            return (T) this;
        }
        /**
         * Channel lifetime in milliseconds. The option is a
         * <code>java.lang.Long</code> type.
         */
        public T channelLifetime(Long channelLifetime) {
            this.properties.put("channelLifetime", channelLifetime);
            return (T) this;
        }
        /**
         * Channel lifetime in milliseconds. The option will be converted to a
         * <code>java.lang.Long</code> type.
         */
        public T channelLifetime(String channelLifetime) {
            this.properties.put("channelLifetime", channelLifetime);
            return (T) this;
        }
        /**
         * The name of the key in the keystore file. The option is a
         * <code>java.lang.String</code> type.
         */
        public T keyAlias(String keyAlias) {
            this.properties.put("keyAlias", keyAlias);
            return (T) this;
        }
        /**
         * The key password. The option is a <code>java.lang.String</code> type.
         */
        public T keyPassword(String keyPassword) {
            this.properties.put("keyPassword", keyPassword);
            return (T) this;
        }
        /**
         * The keystore password. The option is a <code>java.lang.String</code>
         * type.
         */
        public T keyStorePassword(String keyStorePassword) {
            this.properties.put("keyStorePassword", keyStorePassword);
            return (T) this;
        }
        /**
         * The key store type. The option is a <code>java.lang.String</code>
         * type.
         */
        public T keyStoreType(String keyStoreType) {
            this.properties.put("keyStoreType", keyStoreType);
            return (T) this;
        }
        /**
         * The URL where the key should be loaded from. The option is a
         * <code>java.net.URL</code> type.
         */
        public T keyStoreUrl(URL keyStoreUrl) {
            this.properties.put("keyStoreUrl", keyStoreUrl);
            return (T) this;
        }
        /**
         * The URL where the key should be loaded from. The option will be
         * converted to a <code>java.net.URL</code> type.
         */
        public T keyStoreUrl(String keyStoreUrl) {
            this.properties.put("keyStoreUrl", keyStoreUrl);
            return (T) this;
        }
        /**
         * The maximum number of pending publish requests. The option is a
         * <code>java.lang.Long</code> type.
         */
        public T maxPendingPublishRequests(Long maxPendingPublishRequests) {
            this.properties.put("maxPendingPublishRequests", maxPendingPublishRequests);
            return (T) this;
        }
        /**
         * The maximum number of pending publish requests. The option will be
         * converted to a <code>java.lang.Long</code> type.
         */
        public T maxPendingPublishRequests(String maxPendingPublishRequests) {
            this.properties.put("maxPendingPublishRequests", maxPendingPublishRequests);
            return (T) this;
        }
        /**
         * The maximum number of bytes a response message may have. The option
         * is a <code>java.lang.Long</code> type.
         */
        public T maxResponseMessageSize(Long maxResponseMessageSize) {
            this.properties.put("maxResponseMessageSize", maxResponseMessageSize);
            return (T) this;
        }
        /**
         * The maximum number of bytes a response message may have. The option
         * will be converted to a <code>java.lang.Long</code> type.
         */
        public T maxResponseMessageSize(String maxResponseMessageSize) {
            this.properties.put("maxResponseMessageSize", maxResponseMessageSize);
            return (T) this;
        }
        /**
         * Override the server reported endpoint host with the host from the
         * endpoint URI. The option is a <code>boolean</code> type.
         */
        public T overrideHost(boolean overrideHost) {
            this.properties.put("overrideHost", overrideHost);
            return (T) this;
        }
        /**
         * Override the server reported endpoint host with the host from the
         * endpoint URI. The option will be converted to a <code>boolean</code>
         * type.
         */
        public T overrideHost(String overrideHost) {
            this.properties.put("overrideHost", overrideHost);
            return (T) this;
        }
        /**
         * The product URI. The option is a <code>java.lang.String</code> type.
         */
        public T productUri(String productUri) {
            this.properties.put("productUri", productUri);
            return (T) this;
        }
        /**
         * Request timeout in milliseconds. The option is a
         * <code>java.lang.Long</code> type.
         */
        public T requestTimeout(Long requestTimeout) {
            this.properties.put("requestTimeout", requestTimeout);
            return (T) this;
        }
        /**
         * Request timeout in milliseconds. The option will be converted to a
         * <code>java.lang.Long</code> type.
         */
        public T requestTimeout(String requestTimeout) {
            this.properties.put("requestTimeout", requestTimeout);
            return (T) this;
        }
        /**
         * Session name. The option is a <code>java.lang.String</code> type.
         */
        public T sessionName(String sessionName) {
            this.properties.put("sessionName", sessionName);
            return (T) this;
        }
        /**
         * Session timeout in milliseconds. The option is a
         * <code>java.lang.Long</code> type.
         */
        public T sessionTimeout(Long sessionTimeout) {
            this.properties.put("sessionTimeout", sessionTimeout);
            return (T) this;
        }
        /**
         * Session timeout in milliseconds. The option will be converted to a
         * <code>java.lang.Long</code> type.
         */
        public T sessionTimeout(String sessionTimeout) {
            this.properties.put("sessionTimeout", sessionTimeout);
            return (T) this;
        }
    }

    public static class MiloClientConsumerBuilder
            extends
                MiloClientCommonBuilder<MiloClientConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public MiloClientConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a <code>boolean</code> type.
         */
        public MiloClientConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (MiloClientConsumerBuilder) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option will be converted to a <code>boolean</code> type.
         */
        public MiloClientConsumerBuilder bridgeErrorHandler(
                String bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (MiloClientConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * <code>org.apache.camel.spi.ExceptionHandler</code> type.
         */
        public MiloClientConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (MiloClientConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option will be
         * converted to a <code>org.apache.camel.spi.ExceptionHandler</code>
         * type.
         */
        public MiloClientConsumerBuilder exceptionHandler(
                String exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (MiloClientConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a <code>org.apache.camel.ExchangePattern</code> type.
         */
        public MiloClientConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (MiloClientConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option will be converted to a
         * <code>org.apache.camel.ExchangePattern</code> type.
         */
        public MiloClientConsumerBuilder exchangePattern(String exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (MiloClientConsumerBuilder) this;
        }
    }

    public static class MiloClientProducerBuilder
            extends
                MiloClientCommonBuilder<MiloClientProducerBuilder>
            implements
                EndpointProducerBuilder {
        public MiloClientProducerBuilder(String path) {
            super(path);
        }
    }
    public default MiloClientConsumerBuilder fromMiloClient(String path) {
        return new MiloClientConsumerBuilder(path);
    }
    public default MiloClientProducerBuilder toMiloClient(String path) {
        return new MiloClientProducerBuilder(path);
    }
}