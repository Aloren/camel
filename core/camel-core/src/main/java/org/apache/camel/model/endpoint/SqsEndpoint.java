/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.LoggingLevel;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;
import org.apache.camel.spi.HeaderFilterStrategy;
import org.apache.camel.spi.PollingConsumerPollStrategy;
import org.apache.camel.spi.ScheduledPollConsumerScheduler;

/**
 * The aws-sqs component is used for sending and receiving messages to Amazon's
 * SQS service.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class SqsEndpoint {


    public static class SqsCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        SqsCommon(String path) {
            super("aws-sqs", path);
        }
        /**
         * Queue name or ARN. The option is a java.lang.String type.
         */
        public T queueNameOrArn(String queueNameOrArn) {
            this.properties.put("queueNameOrArn", queueNameOrArn);
            return (T) this;
        }
        /**
         * The hostname of the Amazon AWS cloud. The option is a
         * java.lang.String type.
         */
        public T amazonAWSHost(String amazonAWSHost) {
            this.properties.put("amazonAWSHost", amazonAWSHost);
            return (T) this;
        }
        /**
         * To use the AmazonSQS as client. The option is a
         * com.amazonaws.services.sqs.AmazonSQS type.
         */
        public T amazonSQSClient(Object amazonSQSClient) {
            this.properties.put("amazonSQSClient", amazonSQSClient);
            return (T) this;
        }
        /**
         * Setting the autocreation of the queue. The option is a boolean type.
         */
        public T autoCreateQueue(boolean autoCreateQueue) {
            this.properties.put("autoCreateQueue", autoCreateQueue);
            return (T) this;
        }
        /**
         * To use a custom HeaderFilterStrategy to map headers to/from Camel.
         * The option is a org.apache.camel.spi.HeaderFilterStrategy type.
         */
        public T headerFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {
            this.properties.put("headerFilterStrategy", headerFilterStrategy);
            return (T) this;
        }
        /**
         * Specify the queue owner aws account id when you need to connect the
         * queue with different account owner. The option is a java.lang.String
         * type.
         */
        public T queueOwnerAWSAccountId(String queueOwnerAWSAccountId) {
            this.properties.put("queueOwnerAWSAccountId", queueOwnerAWSAccountId);
            return (T) this;
        }
        /**
         * Specify the queue region which could be used with
         * queueOwnerAWSAccountId to build the service URL. The option is a
         * java.lang.String type.
         */
        public T region(String region) {
            this.properties.put("region", region);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Define if you want to apply delaySeconds option to the queue or on
         * single messages. The option is a boolean type.
         */
        public T delayQueue(boolean delayQueue) {
            this.properties.put("delayQueue", delayQueue);
            return (T) this;
        }
        /**
         * To define the queueUrl explicitly. All other parameters, which would
         * influence the queueUrl, are ignored. This parameter is intended to be
         * used, to connect to a mock implementation of SQS, for testing
         * purposes. The option is a java.lang.String type.
         */
        public T queueUrl(String queueUrl) {
            this.properties.put("queueUrl", queueUrl);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * To define a proxy host when instantiating the SQS client. The option
         * is a java.lang.String type.
         */
        public T proxyHost(String proxyHost) {
            this.properties.put("proxyHost", proxyHost);
            return (T) this;
        }
        /**
         * To define a proxy port when instantiating the SQS client. The option
         * is a java.lang.Integer type.
         */
        public T proxyPort(Integer proxyPort) {
            this.properties.put("proxyPort", proxyPort);
            return (T) this;
        }
        /**
         * The maximumMessageSize (in bytes) an SQS message can contain for this
         * queue. The option is a java.lang.Integer type.
         */
        public T maximumMessageSize(Integer maximumMessageSize) {
            this.properties.put("maximumMessageSize", maximumMessageSize);
            return (T) this;
        }
        /**
         * The messageRetentionPeriod (in seconds) a message will be retained by
         * SQS for this queue. The option is a java.lang.Integer type.
         */
        public T messageRetentionPeriod(Integer messageRetentionPeriod) {
            this.properties.put("messageRetentionPeriod", messageRetentionPeriod);
            return (T) this;
        }
        /**
         * The policy for this queue. The option is a java.lang.String type.
         */
        public T policy(String policy) {
            this.properties.put("policy", policy);
            return (T) this;
        }
        /**
         * If you do not specify WaitTimeSeconds in the request, the queue
         * attribute ReceiveMessageWaitTimeSeconds is used to determine how long
         * to wait. The option is a java.lang.Integer type.
         */
        public T receiveMessageWaitTimeSeconds(
                Integer receiveMessageWaitTimeSeconds) {
            this.properties.put("receiveMessageWaitTimeSeconds", receiveMessageWaitTimeSeconds);
            return (T) this;
        }
        /**
         * Specify the policy that send message to DeadLetter queue. See detail
         * at Amazon docs. The option is a java.lang.String type.
         */
        public T redrivePolicy(String redrivePolicy) {
            this.properties.put("redrivePolicy", redrivePolicy);
            return (T) this;
        }
        /**
         * Amazon AWS Access Key. The option is a java.lang.String type.
         */
        public T accessKey(String accessKey) {
            this.properties.put("accessKey", accessKey);
            return (T) this;
        }
        /**
         * Amazon AWS Secret Key. The option is a java.lang.String type.
         */
        public T secretKey(String secretKey) {
            this.properties.put("secretKey", secretKey);
            return (T) this;
        }
    }

    public static class SqsConsumer
            extends
                SqsCommon<SqsConsumer>
            implements
                EndpointDefinition.Consumer {
        public SqsConsumer(String path) {
            super(path);
        }
        /**
         * A list of attribute names to receive when consuming. Multiple names
         * can be separated by comma. The option is a java.lang.String type.
         */
        public SqsConsumer attributeNames(String attributeNames) {
            this.properties.put("attributeNames", attributeNames);
            return (SqsConsumer) this;
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public SqsConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (SqsConsumer) this;
        }
        /**
         * Allows you to use multiple threads to poll the sqs queue to increase
         * throughput. The option is a int type.
         */
        public SqsConsumer concurrentConsumers(int concurrentConsumers) {
            this.properties.put("concurrentConsumers", concurrentConsumers);
            return (SqsConsumer) this;
        }
        /**
         * The default visibility timeout (in seconds). The option is a
         * java.lang.Integer type.
         */
        public SqsConsumer defaultVisibilityTimeout(
                Integer defaultVisibilityTimeout) {
            this.properties.put("defaultVisibilityTimeout", defaultVisibilityTimeout);
            return (SqsConsumer) this;
        }
        /**
         * Delete message from SQS after it has been read. The option is a
         * boolean type.
         */
        public SqsConsumer deleteAfterRead(boolean deleteAfterRead) {
            this.properties.put("deleteAfterRead", deleteAfterRead);
            return (SqsConsumer) this;
        }
        /**
         * Whether or not to send the DeleteMessage to the SQS queue if an
         * exchange fails to get through a filter. If 'false' and exchange does
         * not make it through a Camel filter upstream in the route, then don't
         * send DeleteMessage. The option is a boolean type.
         */
        public SqsConsumer deleteIfFiltered(boolean deleteIfFiltered) {
            this.properties.put("deleteIfFiltered", deleteIfFiltered);
            return (SqsConsumer) this;
        }
        /**
         * If enabled then a scheduled background task will keep extending the
         * message visibility on SQS. This is needed if it takes a long time to
         * process the message. If set to true defaultVisibilityTimeout must be
         * set. See details at Amazon docs. The option is a boolean type.
         */
        public SqsConsumer extendMessageVisibility(
                boolean extendMessageVisibility) {
            this.properties.put("extendMessageVisibility", extendMessageVisibility);
            return (SqsConsumer) this;
        }
        /**
         * The length of time, in seconds, for which Amazon SQS can reuse a data
         * key to encrypt or decrypt messages before calling AWS KMS again. An
         * integer representing seconds, between 60 seconds (1 minute) and
         * 86,400 seconds (24 hours). Default: 300 (5 minutes). The option is a
         * java.lang.Integer type.
         */
        public SqsConsumer kmsDataKeyReusePeriodSeconds(
                Integer kmsDataKeyReusePeriodSeconds) {
            this.properties.put("kmsDataKeyReusePeriodSeconds", kmsDataKeyReusePeriodSeconds);
            return (SqsConsumer) this;
        }
        /**
         * The ID of an AWS-managed customer master key (CMK) for Amazon SQS or
         * a custom CMK. The option is a java.lang.String type.
         */
        public SqsConsumer kmsMasterKeyId(String kmsMasterKeyId) {
            this.properties.put("kmsMasterKeyId", kmsMasterKeyId);
            return (SqsConsumer) this;
        }
        /**
         * Gets the maximum number of messages as a limit to poll at each
         * polling. Is default unlimited, but use 0 or negative number to
         * disable it as unlimited. The option is a int type.
         */
        public SqsConsumer maxMessagesPerPoll(int maxMessagesPerPoll) {
            this.properties.put("maxMessagesPerPoll", maxMessagesPerPoll);
            return (SqsConsumer) this;
        }
        /**
         * A list of message attribute names to receive when consuming. Multiple
         * names can be separated by comma. The option is a java.lang.String
         * type.
         */
        public SqsConsumer messageAttributeNames(String messageAttributeNames) {
            this.properties.put("messageAttributeNames", messageAttributeNames);
            return (SqsConsumer) this;
        }
        /**
         * If the polling consumer did not poll any files, you can enable this
         * option to send an empty message (no body) instead. The option is a
         * boolean type.
         */
        public SqsConsumer sendEmptyMessageWhenIdle(
                boolean sendEmptyMessageWhenIdle) {
            this.properties.put("sendEmptyMessageWhenIdle", sendEmptyMessageWhenIdle);
            return (SqsConsumer) this;
        }
        /**
         * Define if Server Side Encryption is enabled or not on the queue. The
         * option is a boolean type.
         */
        public SqsConsumer serverSideEncryptionEnabled(
                boolean serverSideEncryptionEnabled) {
            this.properties.put("serverSideEncryptionEnabled", serverSideEncryptionEnabled);
            return (SqsConsumer) this;
        }
        /**
         * The duration (in seconds) that the received messages are hidden from
         * subsequent retrieve requests after being retrieved by a
         * ReceiveMessage request to set in the
         * com.amazonaws.services.sqs.model.SetQueueAttributesRequest. This only
         * make sense if its different from defaultVisibilityTimeout. It changes
         * the queue visibility timeout attribute permanently. The option is a
         * java.lang.Integer type.
         */
        public SqsConsumer visibilityTimeout(Integer visibilityTimeout) {
            this.properties.put("visibilityTimeout", visibilityTimeout);
            return (SqsConsumer) this;
        }
        /**
         * Duration in seconds (0 to 20) that the ReceiveMessage action call
         * will wait until a message is in the queue to include in the response.
         * The option is a java.lang.Integer type.
         */
        public SqsConsumer waitTimeSeconds(Integer waitTimeSeconds) {
            this.properties.put("waitTimeSeconds", waitTimeSeconds);
            return (SqsConsumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public SqsConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (SqsConsumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public SqsConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (SqsConsumer) this;
        }
        /**
         * A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing
         * you to provide your custom implementation to control error handling
         * usually occurred during the poll operation before an Exchange have
         * been created and being routed in Camel. The option is a
         * org.apache.camel.spi.PollingConsumerPollStrategy type.
         */
        public SqsConsumer pollStrategy(PollingConsumerPollStrategy pollStrategy) {
            this.properties.put("pollStrategy", pollStrategy);
            return (SqsConsumer) this;
        }
        /**
         * The number of subsequent error polls (failed due some error) that
         * should happen before the backoffMultipler should kick-in. The option
         * is a int type.
         */
        public SqsConsumer backoffErrorThreshold(int backoffErrorThreshold) {
            this.properties.put("backoffErrorThreshold", backoffErrorThreshold);
            return (SqsConsumer) this;
        }
        /**
         * The number of subsequent idle polls that should happen before the
         * backoffMultipler should kick-in. The option is a int type.
         */
        public SqsConsumer backoffIdleThreshold(int backoffIdleThreshold) {
            this.properties.put("backoffIdleThreshold", backoffIdleThreshold);
            return (SqsConsumer) this;
        }
        /**
         * To let the scheduled polling consumer backoff if there has been a
         * number of subsequent idles/errors in a row. The multiplier is then
         * the number of polls that will be skipped before the next actual
         * attempt is happening again. When this option is in use then
         * backoffIdleThreshold and/or backoffErrorThreshold must also be
         * configured. The option is a int type.
         */
        public SqsConsumer backoffMultiplier(int backoffMultiplier) {
            this.properties.put("backoffMultiplier", backoffMultiplier);
            return (SqsConsumer) this;
        }
        /**
         * Milliseconds before the next poll. You can also specify time values
         * using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public SqsConsumer delay(long delay) {
            this.properties.put("delay", delay);
            return (SqsConsumer) this;
        }
        /**
         * If greedy is enabled, then the ScheduledPollConsumer will run
         * immediately again, if the previous run polled 1 or more messages. The
         * option is a boolean type.
         */
        public SqsConsumer greedy(boolean greedy) {
            this.properties.put("greedy", greedy);
            return (SqsConsumer) this;
        }
        /**
         * Milliseconds before the first poll starts. You can also specify time
         * values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30
         * seconds), and 1h (1 hour). The option is a long type.
         */
        public SqsConsumer initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (SqsConsumer) this;
        }
        /**
         * The consumer logs a start/complete log line when it polls. This
         * option allows you to configure the logging level for that. The option
         * is a org.apache.camel.LoggingLevel type.
         */
        public SqsConsumer runLoggingLevel(LoggingLevel runLoggingLevel) {
            this.properties.put("runLoggingLevel", runLoggingLevel);
            return (SqsConsumer) this;
        }
        /**
         * Allows for configuring a custom/shared thread pool to use for the
         * consumer. By default each consumer has its own single threaded thread
         * pool. The option is a java.util.concurrent.ScheduledExecutorService
         * type.
         */
        public SqsConsumer scheduledExecutorService(
                ScheduledExecutorService scheduledExecutorService) {
            this.properties.put("scheduledExecutorService", scheduledExecutorService);
            return (SqsConsumer) this;
        }
        /**
         * To use a cron scheduler from either camel-spring or camel-quartz2
         * component. The option is a
         * org.apache.camel.spi.ScheduledPollConsumerScheduler type.
         */
        public SqsConsumer scheduler(ScheduledPollConsumerScheduler scheduler) {
            this.properties.put("scheduler", scheduler);
            return (SqsConsumer) this;
        }
        /**
         * To configure additional properties when using a custom scheduler or
         * any of the Quartz2, Spring based scheduler. The option is a
         * java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public SqsConsumer schedulerProperties(
                Map<String, Object> schedulerProperties) {
            this.properties.put("schedulerProperties", schedulerProperties);
            return (SqsConsumer) this;
        }
        /**
         * Whether the scheduler should be auto started. The option is a boolean
         * type.
         */
        public SqsConsumer startScheduler(boolean startScheduler) {
            this.properties.put("startScheduler", startScheduler);
            return (SqsConsumer) this;
        }
        /**
         * Time unit for initialDelay and delay options. The option is a
         * java.util.concurrent.TimeUnit type.
         */
        public SqsConsumer timeUnit(TimeUnit timeUnit) {
            this.properties.put("timeUnit", timeUnit);
            return (SqsConsumer) this;
        }
        /**
         * Controls if fixed delay or fixed rate is used. See
         * ScheduledExecutorService in JDK for details. The option is a boolean
         * type.
         */
        public SqsConsumer useFixedDelay(boolean useFixedDelay) {
            this.properties.put("useFixedDelay", useFixedDelay);
            return (SqsConsumer) this;
        }
    }

    public static class SqsProducer
            extends
                SqsCommon<SqsProducer>
            implements
                EndpointDefinition.Producer {
        public SqsProducer(String path) {
            super(path);
        }
        /**
         * Delay sending messages for a number of seconds. The option is a
         * java.lang.Integer type.
         */
        public SqsProducer delaySeconds(Integer delaySeconds) {
            this.properties.put("delaySeconds", delaySeconds);
            return (SqsProducer) this;
        }
        /**
         * Only for FIFO queues. Strategy for setting the messageDeduplicationId
         * on the message. Can be one of the following options: useExchangeId,
         * useContentBasedDeduplication. For the useContentBasedDeduplication
         * option, no messageDeduplicationId will be set on the message. The
         * option is a
         * org.apache.camel.component.aws.sqs.MessageDeduplicationIdStrategy
         * type.
         */
        public SqsProducer messageDeduplicationIdStrategy(
                Object messageDeduplicationIdStrategy) {
            this.properties.put("messageDeduplicationIdStrategy", messageDeduplicationIdStrategy);
            return (SqsProducer) this;
        }
        /**
         * Only for FIFO queues. Strategy for setting the messageGroupId on the
         * message. Can be one of the following options: useConstant,
         * useExchangeId, usePropertyValue. For the usePropertyValue option, the
         * value of property CamelAwsMessageGroupId will be used. The option is
         * a org.apache.camel.component.aws.sqs.MessageGroupIdStrategy type.
         */
        public SqsProducer messageGroupIdStrategy(Object messageGroupIdStrategy) {
            this.properties.put("messageGroupIdStrategy", messageGroupIdStrategy);
            return (SqsProducer) this;
        }
        /**
         * The operation to do in case the user don't want to send only a
         * message. The option is a
         * org.apache.camel.component.aws.sqs.SqsOperations type.
         */
        public SqsProducer operation(SqsOperations operation) {
            this.properties.put("operation", operation);
            return (SqsProducer) this;
        }
    }

    public static enum SqsOperations {
        sendBatchMessage, deleteMessage, listQueues;
    }
}