/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;

/**
 * The dozer component provides the ability to map between Java beans using the
 * Dozer mapping library.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface DozerEndpointBuilder {


    public static class DozerCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        DozerCommonBuilder(String path) {
            super("dozer", path);
        }
        /**
         * A human readable name of the mapping. The option is a
         * java.lang.String type.
         */
        public T name(String name) {
            this.properties.put("name", name);
            return (T) this;
        }
        /**
         * The name of a DozerBeanMapperConfiguration bean in the Camel registry
         * which should be used for configuring the Dozer mapping. This is an
         * alternative to the mappingFile option that can be used for
         * fine-grained control over how Dozer is configured. Remember to use a
         * # prefix in the value to indicate that the bean is in the Camel
         * registry (e.g. #myDozerConfig). The option is a
         * org.apache.camel.converter.dozer.DozerBeanMapperConfiguration type.
         */
        public T mappingConfiguration(Object mappingConfiguration) {
            this.properties.put("mappingConfiguration", mappingConfiguration);
            return (T) this;
        }
        /**
         * The location of a Dozer configuration file. The file is loaded from
         * the classpath by default, but you can use file:, classpath:, or http:
         * to load the configuration from a specific location. The option is a
         * java.lang.String type.
         */
        public T mappingFile(String mappingFile) {
            this.properties.put("mappingFile", mappingFile);
            return (T) this;
        }
        /**
         * The id of a dataFormat defined within the Camel Context to use for
         * marshalling the mapping output to a non-Java type. The option is a
         * java.lang.String type.
         */
        public T marshalId(String marshalId) {
            this.properties.put("marshalId", marshalId);
            return (T) this;
        }
        /**
         * Fully-qualified class name for the source type used in the mapping.
         * If specified, the input to the mapping is converted to the specified
         * type before being mapped with Dozer. The option is a java.lang.String
         * type.
         */
        public T sourceModel(String sourceModel) {
            this.properties.put("sourceModel", sourceModel);
            return (T) this;
        }
        /**
         * Fully-qualified class name for the target type used in the mapping.
         * The option is a java.lang.String type.
         */
        public T targetModel(String targetModel) {
            this.properties.put("targetModel", targetModel);
            return (T) this;
        }
        /**
         * The id of a dataFormat defined within the Camel Context to use for
         * unmarshalling the mapping input from a non-Java type. The option is a
         * java.lang.String type.
         */
        public T unmarshalId(String unmarshalId) {
            this.properties.put("unmarshalId", unmarshalId);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class DozerProducerBuilder
            extends
                DozerCommonBuilder<DozerProducerBuilder>
            implements
                EndpointProducerBuilder {
        public DozerProducerBuilder(String path) {
            super(path);
        }
    }
    public default DozerProducerBuilder toDozer(String path) {
        return new DozerProducerBuilder(path);
    }
}