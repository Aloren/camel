/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The Ignite Messaging endpoint is one of camel-ignite endpoints which allows
 * you to send and consume messages from an Ignite topic.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class IgniteMessagingEndpoint {


    public static class IgniteMessagingCommon<T extends EndpointConfiguration>
            extends
                EndpointConfiguration<T> {
        private String topic;
        private Boolean propagateIncomingBodyIfNoReturnValue;
        private Boolean treatCollectionsAsCacheObjects;
        private Boolean basicPropertyBinding;
        private Boolean synchronous;

        /**
         * The topic name. The option is a java.lang.String type.
         */
        public T topic(String topic) {
            this.topic = topic;
            return (T) this;
        }

        /**
         * Sets whether to propagate the incoming body if the return type of the
         * underlying Ignite operation is void. The option is a boolean type.
         */
        public T propagateIncomingBodyIfNoReturnValue(
                boolean propagateIncomingBodyIfNoReturnValue) {
            this.propagateIncomingBodyIfNoReturnValue = propagateIncomingBodyIfNoReturnValue;
            return (T) this;
        }

        /**
         * Sets whether to treat Collections as cache objects or as Collections
         * of items to insert/update/compute, etc. The option is a boolean type.
         */
        public T treatCollectionsAsCacheObjects(
                boolean treatCollectionsAsCacheObjects) {
            this.treatCollectionsAsCacheObjects = treatCollectionsAsCacheObjects;
            return (T) this;
        }

        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
            return (T) this;
        }

        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.synchronous = synchronous;
            return (T) this;
        }

        public String getTopic() {
            return topic;
        }

        public void setTopic(String topic) {
            this.topic = topic;
        }

        public Boolean getPropagateIncomingBodyIfNoReturnValue() {
            return propagateIncomingBodyIfNoReturnValue;
        }

        public void setPropagateIncomingBodyIfNoReturnValue(
                Boolean propagateIncomingBodyIfNoReturnValue) {
            this.propagateIncomingBodyIfNoReturnValue = propagateIncomingBodyIfNoReturnValue;
        }

        public Boolean getTreatCollectionsAsCacheObjects() {
            return treatCollectionsAsCacheObjects;
        }

        public void setTreatCollectionsAsCacheObjects(
                Boolean treatCollectionsAsCacheObjects) {
            this.treatCollectionsAsCacheObjects = treatCollectionsAsCacheObjects;
        }

        public Boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(Boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public Boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(Boolean synchronous) {
            this.synchronous = synchronous;
        }
    }

    public static class IgniteMessagingConsumer
            extends
                IgniteMessagingCommon<IgniteMessagingConsumer> {
        private Boolean bridgeErrorHandler;
        private ExceptionHandler exceptionHandler;
        private ExchangePattern exchangePattern;

        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public IgniteMessagingConsumer bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
            return (IgniteMessagingConsumer) this;
        }

        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public IgniteMessagingConsumer exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
            return (IgniteMessagingConsumer) this;
        }

        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public IgniteMessagingConsumer exchangePattern(
                ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
            return (IgniteMessagingConsumer) this;
        }

        public Boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(Boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class IgniteMessagingProducer
            extends
                IgniteMessagingCommon<IgniteMessagingProducer> {
        private Object clusterGroupExpression;
        private IgniteMessagingSendMode sendMode;
        private Long timeout;

        /**
         * The cluster group expression. The option is a
         * org.apache.camel.component.ignite.ClusterGroupExpression type.
         */
        public IgniteMessagingProducer clusterGroupExpression(
                Object clusterGroupExpression) {
            this.clusterGroupExpression = clusterGroupExpression;
            return (IgniteMessagingProducer) this;
        }

        /**
         * The send mode to use. Possible values: UNORDERED, ORDERED. The option
         * is a
         * org.apache.camel.component.ignite.messaging.IgniteMessagingSendMode
         * type.
         */
        public IgniteMessagingProducer sendMode(IgniteMessagingSendMode sendMode) {
            this.sendMode = sendMode;
            return (IgniteMessagingProducer) this;
        }

        /**
         * The timeout for the send operation when using ordered messages. The
         * option is a java.lang.Long type.
         */
        public IgniteMessagingProducer timeout(Long timeout) {
            this.timeout = timeout;
            return (IgniteMessagingProducer) this;
        }

        public Object getClusterGroupExpression() {
            return clusterGroupExpression;
        }

        public void setClusterGroupExpression(Object clusterGroupExpression) {
            this.clusterGroupExpression = clusterGroupExpression;
        }

        public IgniteMessagingSendMode getSendMode() {
            return sendMode;
        }

        public void setSendMode(IgniteMessagingSendMode sendMode) {
            this.sendMode = sendMode;
        }

        public Long getTimeout() {
            return timeout;
        }

        public void setTimeout(Long timeout) {
            this.timeout = timeout;
        }
    }

    public static enum IgniteMessagingSendMode {
        ORDERED, UNORDERED;
    }
}