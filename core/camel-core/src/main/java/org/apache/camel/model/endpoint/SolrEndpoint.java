/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;

/**
 * The solr component allows you to interface with an Apache Lucene Solr server.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class SolrEndpoint {


    public static class SolrCommon extends EndpointConfiguration {
        /**
         * Hostname and port for the solr server. The option is a
         * java.lang.String type.
         */
        private String url;
        /**
         * Server side must support gzip or deflate for this to have any effect.
         * The option is a java.lang.Boolean type.
         */
        private Boolean allowCompression;
        /**
         * connectionTimeout on the underlying HttpConnectionManager. The option
         * is a java.lang.Integer type.
         */
        private Integer connectionTimeout;
        /**
         * maxConnectionsPerHost on the underlying HttpConnectionManager. The
         * option is a java.lang.Integer type.
         */
        private Integer defaultMaxConnectionsPerHost;
        /**
         * indicates whether redirects are used to get to the Solr server. The
         * option is a java.lang.Boolean type.
         */
        private Boolean followRedirects;
        /**
         * Maximum number of retries to attempt in the event of transient
         * errors. The option is a java.lang.Integer type.
         */
        private Integer maxRetries;
        /**
         * maxTotalConnection on the underlying HttpConnectionManager. The
         * option is a java.lang.Integer type.
         */
        private Integer maxTotalConnections;
        /**
         * Set the request handler to be used. The option is a java.lang.String
         * type.
         */
        private String requestHandler;
        /**
         * Read timeout on the underlying HttpConnectionManager. This is
         * desirable for queries, but probably not for indexing. The option is a
         * java.lang.Integer type.
         */
        private Integer soTimeout;
        /**
         * Set the queue size for the StreamingUpdateSolrServer. The option is a
         * int type.
         */
        private int streamingQueueSize;
        /**
         * Set the number of threads for the StreamingUpdateSolrServer. The
         * option is a int type.
         */
        private int streamingThreadCount;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * Set the collection name which the solrCloud server could use. The
         * option is a java.lang.String type.
         */
        private String collection;
        /**
         * Set the ZooKeeper host information which the solrCloud could use,
         * such as zkhost=localhost:8123. The option is a java.lang.String type.
         */
        private String zkHost;

        public String getUrl() {
            return url;
        }

        public void setUrl(String url) {
            this.url = url;
        }

        public Boolean getAllowCompression() {
            return allowCompression;
        }

        public void setAllowCompression(Boolean allowCompression) {
            this.allowCompression = allowCompression;
        }

        public Integer getConnectionTimeout() {
            return connectionTimeout;
        }

        public void setConnectionTimeout(Integer connectionTimeout) {
            this.connectionTimeout = connectionTimeout;
        }

        public Integer getDefaultMaxConnectionsPerHost() {
            return defaultMaxConnectionsPerHost;
        }

        public void setDefaultMaxConnectionsPerHost(
                Integer defaultMaxConnectionsPerHost) {
            this.defaultMaxConnectionsPerHost = defaultMaxConnectionsPerHost;
        }

        public Boolean getFollowRedirects() {
            return followRedirects;
        }

        public void setFollowRedirects(Boolean followRedirects) {
            this.followRedirects = followRedirects;
        }

        public Integer getMaxRetries() {
            return maxRetries;
        }

        public void setMaxRetries(Integer maxRetries) {
            this.maxRetries = maxRetries;
        }

        public Integer getMaxTotalConnections() {
            return maxTotalConnections;
        }

        public void setMaxTotalConnections(Integer maxTotalConnections) {
            this.maxTotalConnections = maxTotalConnections;
        }

        public String getRequestHandler() {
            return requestHandler;
        }

        public void setRequestHandler(String requestHandler) {
            this.requestHandler = requestHandler;
        }

        public Integer getSoTimeout() {
            return soTimeout;
        }

        public void setSoTimeout(Integer soTimeout) {
            this.soTimeout = soTimeout;
        }

        public int getStreamingQueueSize() {
            return streamingQueueSize;
        }

        public void setStreamingQueueSize(int streamingQueueSize) {
            this.streamingQueueSize = streamingQueueSize;
        }

        public int getStreamingThreadCount() {
            return streamingThreadCount;
        }

        public void setStreamingThreadCount(int streamingThreadCount) {
            this.streamingThreadCount = streamingThreadCount;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public String getCollection() {
            return collection;
        }

        public void setCollection(String collection) {
            this.collection = collection;
        }

        public String getZkHost() {
            return zkHost;
        }

        public void setZkHost(String zkHost) {
            this.zkHost = zkHost;
        }
    }

    public static class SolrConsumer extends SolrCommon {
    }

    public static class SolrProducer extends SolrCommon {
    }
}