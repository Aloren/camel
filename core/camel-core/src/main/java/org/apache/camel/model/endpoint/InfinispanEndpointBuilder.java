/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * For reading/writing from/to Infinispan distributed key/value store and data
 * grid.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface InfinispanEndpointBuilder {


    public static class InfinispanCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        InfinispanCommonBuilder(String path) {
            super("infinispan", path);
        }
        /**
         * The cache to use. The option is a java.lang.String type.
         */
        public T cacheName(String cacheName) {
            this.properties.put("cacheName", cacheName);
            return (T) this;
        }
        /**
         * Specifies the host of the cache on Infinispan instance. The option is
         * a java.lang.String type.
         */
        public T hosts(String hosts) {
            this.properties.put("hosts", hosts);
            return (T) this;
        }
        /**
         * Specifies the query builder. The option is a
         * org.apache.camel.component.infinispan.InfinispanQueryBuilder type.
         */
        public T queryBuilder(Object queryBuilder) {
            this.properties.put("queryBuilder", queryBuilder);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Specifies the cache Container to connect. The option is a
         * org.infinispan.commons.api.BasicCacheContainer type.
         */
        public T cacheContainer(Object cacheContainer) {
            this.properties.put("cacheContainer", cacheContainer);
            return (T) this;
        }
        /**
         * The CacheContainer configuration. Uses if the cacheContainer is not
         * defined. Must be the following types:
         * org.infinispan.client.hotrod.configuration.Configuration - for remote
         * cache interaction configuration;
         * org.infinispan.configuration.cache.Configuration - for embedded cache
         * interaction configuration;. The option is a java.lang.Object type.
         */
        public T cacheContainerConfiguration(Object cacheContainerConfiguration) {
            this.properties.put("cacheContainerConfiguration", cacheContainerConfiguration);
            return (T) this;
        }
        /**
         * Implementation specific properties for the CacheManager. The option
         * is a java.util.Map<java.lang.String,java.lang.String> type.
         */
        public T configurationProperties(
                Map<String, String> configurationProperties) {
            this.properties.put("configurationProperties", configurationProperties);
            return (T) this;
        }
        /**
         * An implementation specific URI for the CacheManager. The option is a
         * java.lang.String type.
         */
        public T configurationUri(String configurationUri) {
            this.properties.put("configurationUri", configurationUri);
            return (T) this;
        }
        /**
         * A comma separated list of Flag to be applied by default on each cache
         * invocation, not applicable to remote caches. The option is a
         * java.lang.String type.
         */
        public T flags(Object[] flags) {
            this.properties.put("flags", flags);
            return (T) this;
        }
        /**
         * Set a specific remappingFunction to use in a compute operation. The
         * option is a java.util.function.BiFunction type.
         */
        public T remappingFunction(BiFunction remappingFunction) {
            this.properties.put("remappingFunction", remappingFunction);
            return (T) this;
        }
        /**
         * Store the operation result in a header instead of the message body.
         * By default, resultHeader == null and the query result is stored in
         * the message body, any existing content in the message body is
         * discarded. If resultHeader is set, the value is used as the name of
         * the header to store the query result and the original message body is
         * preserved. This value can be overridden by an in message header
         * named: CamelInfinispanOperationResultHeader. The option is a
         * java.lang.Object type.
         */
        public T resultHeader(Object resultHeader) {
            this.properties.put("resultHeader", resultHeader);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class InfinispanConsumerBuilder
            extends
                InfinispanCommonBuilder<InfinispanConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public InfinispanConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public InfinispanConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (InfinispanConsumerBuilder) this;
        }
        /**
         * If true, the listener will be installed for the entire cluster. The
         * option is a boolean type.
         */
        public InfinispanConsumerBuilder clusteredListener(
                boolean clusteredListener) {
            this.properties.put("clusteredListener", clusteredListener);
            return (InfinispanConsumerBuilder) this;
        }
        /**
         * The operation to perform. The option is a java.lang.String type.
         */
        @Deprecated
        public InfinispanConsumerBuilder command(String command) {
            this.properties.put("command", command);
            return (InfinispanConsumerBuilder) this;
        }
        /**
         * Returns the custom listener in use, if provided. The option is a
         * org.apache.camel.component.infinispan.InfinispanCustomListener type.
         */
        public InfinispanConsumerBuilder customListener(Object customListener) {
            this.properties.put("customListener", customListener);
            return (InfinispanConsumerBuilder) this;
        }
        /**
         * Specifies the set of event types to register by the consumer.
         * Multiple event can be separated by comma. The possible event types
         * are: CACHE_ENTRY_ACTIVATED, CACHE_ENTRY_PASSIVATED,
         * CACHE_ENTRY_VISITED, CACHE_ENTRY_LOADED, CACHE_ENTRY_EVICTED,
         * CACHE_ENTRY_CREATED, CACHE_ENTRY_REMOVED, CACHE_ENTRY_MODIFIED,
         * TRANSACTION_COMPLETED, TRANSACTION_REGISTERED,
         * CACHE_ENTRY_INVALIDATED, DATA_REHASHED, TOPOLOGY_CHANGED,
         * PARTITION_STATUS_CHANGED. The option is a java.lang.String type.
         */
        public InfinispanConsumerBuilder eventTypes(Set<String> eventTypes) {
            this.properties.put("eventTypes", eventTypes);
            return (InfinispanConsumerBuilder) this;
        }
        /**
         * If true, the consumer will receive notifications synchronously. The
         * option is a boolean type.
         */
        public InfinispanConsumerBuilder sync(boolean sync) {
            this.properties.put("sync", sync);
            return (InfinispanConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public InfinispanConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (InfinispanConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public InfinispanConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (InfinispanConsumerBuilder) this;
        }
    }

    public static class InfinispanProducerBuilder
            extends
                InfinispanCommonBuilder<InfinispanProducerBuilder>
            implements
                EndpointProducerBuilder {
        public InfinispanProducerBuilder(String path) {
            super(path);
        }
        /**
         * The operation to perform. The option is a
         * org.apache.camel.component.infinispan.InfinispanOperation type.
         */
        public InfinispanProducerBuilder operation(InfinispanOperation operation) {
            this.properties.put("operation", operation);
            return (InfinispanProducerBuilder) this;
        }
    }

    public static enum InfinispanOperation {
        PUT, PUTASYNC, PUTALL, PUTALLASYNC, PUTIFABSENT, PUTIFABSENTASYNC, GET, GETORDEFAULT, CONTAINSKEY, CONTAINSVALUE, REMOVE, REMOVEASYNC, REPLACE, REPLACEASYNC, SIZE, CLEAR, CLEARASYNC, QUERY, STATS, COMPUTE, COMPUTEASYNC;
    }
    public default InfinispanConsumerBuilder fromInfinispan(String path) {
        return new InfinispanConsumerBuilder(path);
    }
    public default InfinispanProducerBuilder toInfinispan(String path) {
        return new InfinispanProducerBuilder(path);
    }
}