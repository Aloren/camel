/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URL;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The jbpm component provides integration with jBPM (Business Process
 * Management).
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class JBPMEndpoint {


    public static class JBPMCommon extends EndpointConfiguration {
        /**
         * The URL to the jBPM server. The option is a java.net.URL type.
         */
        private URL connectionURL;
        /**
         * Sets the event listener type to attach to. The option is a
         * java.lang.String type.
         */
        private String eventListenerType;
        /**
         * attachId to use when retrieving attachments. The option is a
         * java.lang.Long type.
         */
        private Long attachmentId;
        /**
         * contentId to use when retrieving attachments. The option is a
         * java.lang.Long type.
         */
        private Long contentId;
        /**
         * The id of the deployment. The option is a java.lang.String type.
         */
        private String deploymentId;
        /**
         * Sets if event produced by emitter should be sent as single items or
         * complete collection. The option is a java.lang.Boolean type.
         */
        private Boolean emitterSendItems;
        /**
         * the data associated with this event when signalEvent operation is
         * performed. The option is a java.lang.Object type.
         */
        private Object event;
        /**
         * the type of event to use when signalEvent operation is performed. The
         * option is a java.lang.String type.
         */
        private String eventType;
        /**
         * identifier the global identifier. The option is a java.lang.String
         * type.
         */
        private String identifier;
        /**
         * the maximum number of rules that should be fired. The option is a
         * java.lang.Integer type.
         */
        private Integer maxNumber;
        /**
         * The page to use when retrieving user tasks. The option is a
         * java.lang.Integer type.
         */
        private Integer page;
        /**
         * The page size to use when retrieving user tasks. The option is a
         * java.lang.Integer type.
         */
        private Integer pageSize;
        /**
         * the id of the process that should be acted upon. The option is a
         * java.lang.String type.
         */
        private String processId;
        /**
         * the id of the process instance. The option is a java.lang.Long type.
         */
        private Long processInstanceId;
        /**
         * The targetUserId used when delegating a task. The option is a
         * java.lang.String type.
         */
        private String targetUserId;
        /**
         * The task instance to use with task operations. The option is a
         * org.kie.api.task.model.Task type.
         */
        private Object task;
        /**
         * the id of the task. The option is a java.lang.Long type.
         */
        private Long taskId;
        /**
         * A timeout value. The option is a java.lang.Integer type.
         */
        private Integer timeout;
        /**
         * userId to use with task operations. The option is a java.lang.String
         * type.
         */
        private String userId;
        /**
         * the value to assign to the global identifier. The option is a
         * java.lang.Object type.
         */
        private Object value;
        /**
         * the id of the work item. The option is a java.lang.Long type.
         */
        private Long workItemId;
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        private boolean basicPropertyBinding;
        /**
         * The potentialOwners when nominateTask operation is performed. The
         * option is a java.util.List<java.lang.String> type.
         */
        private List<String> entities;
        /**
         * To load additional classes when working with XML. The option is a
         * java.lang.Class[] type.
         */
        private Class[] extraJaxbClasses;
        /**
         * the variables that should be set for various operations. The option
         * is a java.util.Map<java.lang.String,java.lang.Object> type.
         */
        private Map<String, Object> parameters;
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        private boolean synchronous;
        /**
         * The list of status to use when filtering tasks. The option is a
         * java.util.List<java.lang.String> type.
         */
        private List<String> statuses;
        /**
         * Password for authentication. The option is a java.lang.String type.
         */
        private String password;
        /**
         * Username for authentication. The option is a java.lang.String type.
         */
        private String userName;

        public URL getConnectionURL() {
            return connectionURL;
        }

        public void setConnectionURL(URL connectionURL) {
            this.connectionURL = connectionURL;
        }

        public String getEventListenerType() {
            return eventListenerType;
        }

        public void setEventListenerType(String eventListenerType) {
            this.eventListenerType = eventListenerType;
        }

        public Long getAttachmentId() {
            return attachmentId;
        }

        public void setAttachmentId(Long attachmentId) {
            this.attachmentId = attachmentId;
        }

        public Long getContentId() {
            return contentId;
        }

        public void setContentId(Long contentId) {
            this.contentId = contentId;
        }

        public String getDeploymentId() {
            return deploymentId;
        }

        public void setDeploymentId(String deploymentId) {
            this.deploymentId = deploymentId;
        }

        public Boolean getEmitterSendItems() {
            return emitterSendItems;
        }

        public void setEmitterSendItems(Boolean emitterSendItems) {
            this.emitterSendItems = emitterSendItems;
        }

        public Object getEvent() {
            return event;
        }

        public void setEvent(Object event) {
            this.event = event;
        }

        public String getEventType() {
            return eventType;
        }

        public void setEventType(String eventType) {
            this.eventType = eventType;
        }

        public String getIdentifier() {
            return identifier;
        }

        public void setIdentifier(String identifier) {
            this.identifier = identifier;
        }

        public Integer getMaxNumber() {
            return maxNumber;
        }

        public void setMaxNumber(Integer maxNumber) {
            this.maxNumber = maxNumber;
        }

        public Integer getPage() {
            return page;
        }

        public void setPage(Integer page) {
            this.page = page;
        }

        public Integer getPageSize() {
            return pageSize;
        }

        public void setPageSize(Integer pageSize) {
            this.pageSize = pageSize;
        }

        public String getProcessId() {
            return processId;
        }

        public void setProcessId(String processId) {
            this.processId = processId;
        }

        public Long getProcessInstanceId() {
            return processInstanceId;
        }

        public void setProcessInstanceId(Long processInstanceId) {
            this.processInstanceId = processInstanceId;
        }

        public String getTargetUserId() {
            return targetUserId;
        }

        public void setTargetUserId(String targetUserId) {
            this.targetUserId = targetUserId;
        }

        public Object getTask() {
            return task;
        }

        public void setTask(Object task) {
            this.task = task;
        }

        public Long getTaskId() {
            return taskId;
        }

        public void setTaskId(Long taskId) {
            this.taskId = taskId;
        }

        public Integer getTimeout() {
            return timeout;
        }

        public void setTimeout(Integer timeout) {
            this.timeout = timeout;
        }

        public String getUserId() {
            return userId;
        }

        public void setUserId(String userId) {
            this.userId = userId;
        }

        public Object getValue() {
            return value;
        }

        public void setValue(Object value) {
            this.value = value;
        }

        public Long getWorkItemId() {
            return workItemId;
        }

        public void setWorkItemId(Long workItemId) {
            this.workItemId = workItemId;
        }

        public boolean getBasicPropertyBinding() {
            return basicPropertyBinding;
        }

        public void setBasicPropertyBinding(boolean basicPropertyBinding) {
            this.basicPropertyBinding = basicPropertyBinding;
        }

        public List<String> getEntities() {
            return entities;
        }

        public void setEntities(List<String> entities) {
            this.entities = entities;
        }

        public Class[] getExtraJaxbClasses() {
            return extraJaxbClasses;
        }

        public void setExtraJaxbClasses(Class[] extraJaxbClasses) {
            this.extraJaxbClasses = extraJaxbClasses;
        }

        public Map<String, Object> getParameters() {
            return parameters;
        }

        public void setParameters(Map<String, Object> parameters) {
            this.parameters = parameters;
        }

        public boolean getSynchronous() {
            return synchronous;
        }

        public void setSynchronous(boolean synchronous) {
            this.synchronous = synchronous;
        }

        public List<String> getStatuses() {
            return statuses;
        }

        public void setStatuses(List<String> statuses) {
            this.statuses = statuses;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getUserName() {
            return userName;
        }

        public void setUserName(String userName) {
            this.userName = userName;
        }
    }

    public static class JBPMConsumer extends JBPMCommon {
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        private boolean bridgeErrorHandler;
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        private ExceptionHandler exceptionHandler;
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        private ExchangePattern exchangePattern;

        public boolean getBridgeErrorHandler() {
            return bridgeErrorHandler;
        }

        public void setBridgeErrorHandler(boolean bridgeErrorHandler) {
            this.bridgeErrorHandler = bridgeErrorHandler;
        }

        public ExceptionHandler getExceptionHandler() {
            return exceptionHandler;
        }

        public void setExceptionHandler(ExceptionHandler exceptionHandler) {
            this.exceptionHandler = exceptionHandler;
        }

        public ExchangePattern getExchangePattern() {
            return exchangePattern;
        }

        public void setExchangePattern(ExchangePattern exchangePattern) {
            this.exchangePattern = exchangePattern;
        }
    }

    public static class JBPMProducer extends JBPMCommon {
        /**
         * The operation to perform. The option is a java.lang.String type.
         */
        private String operation;

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }
    }
}