/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import java.net.URL;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.EndpointDefinition;
import org.apache.camel.spi.ExceptionHandler;

/**
 * The jbpm component provides integration with jBPM (Business Process
 * Management).
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public class JBPMEndpoint {


    public static class JBPMCommon<T extends EndpointDefinition>
            extends
                EndpointDefinition<T> {
        JBPMCommon(String path) {
            super("jbpm", path);
        }
        /**
         * The URL to the jBPM server. The option is a java.net.URL type.
         */
        public T connectionURL(URL connectionURL) {
            this.properties.put("connectionURL", connectionURL);
            return (T) this;
        }
        /**
         * Sets the event listener type to attach to. The option is a
         * java.lang.String type.
         */
        public T eventListenerType(String eventListenerType) {
            this.properties.put("eventListenerType", eventListenerType);
            return (T) this;
        }
        /**
         * attachId to use when retrieving attachments. The option is a
         * java.lang.Long type.
         */
        public T attachmentId(Long attachmentId) {
            this.properties.put("attachmentId", attachmentId);
            return (T) this;
        }
        /**
         * contentId to use when retrieving attachments. The option is a
         * java.lang.Long type.
         */
        public T contentId(Long contentId) {
            this.properties.put("contentId", contentId);
            return (T) this;
        }
        /**
         * The id of the deployment. The option is a java.lang.String type.
         */
        public T deploymentId(String deploymentId) {
            this.properties.put("deploymentId", deploymentId);
            return (T) this;
        }
        /**
         * Sets if event produced by emitter should be sent as single items or
         * complete collection. The option is a java.lang.Boolean type.
         */
        public T emitterSendItems(Boolean emitterSendItems) {
            this.properties.put("emitterSendItems", emitterSendItems);
            return (T) this;
        }
        /**
         * the data associated with this event when signalEvent operation is
         * performed. The option is a java.lang.Object type.
         */
        public T event(Object event) {
            this.properties.put("event", event);
            return (T) this;
        }
        /**
         * the type of event to use when signalEvent operation is performed. The
         * option is a java.lang.String type.
         */
        public T eventType(String eventType) {
            this.properties.put("eventType", eventType);
            return (T) this;
        }
        /**
         * identifier the global identifier. The option is a java.lang.String
         * type.
         */
        public T identifier(String identifier) {
            this.properties.put("identifier", identifier);
            return (T) this;
        }
        /**
         * the maximum number of rules that should be fired. The option is a
         * java.lang.Integer type.
         */
        public T maxNumber(Integer maxNumber) {
            this.properties.put("maxNumber", maxNumber);
            return (T) this;
        }
        /**
         * The page to use when retrieving user tasks. The option is a
         * java.lang.Integer type.
         */
        public T page(Integer page) {
            this.properties.put("page", page);
            return (T) this;
        }
        /**
         * The page size to use when retrieving user tasks. The option is a
         * java.lang.Integer type.
         */
        public T pageSize(Integer pageSize) {
            this.properties.put("pageSize", pageSize);
            return (T) this;
        }
        /**
         * the id of the process that should be acted upon. The option is a
         * java.lang.String type.
         */
        public T processId(String processId) {
            this.properties.put("processId", processId);
            return (T) this;
        }
        /**
         * the id of the process instance. The option is a java.lang.Long type.
         */
        public T processInstanceId(Long processInstanceId) {
            this.properties.put("processInstanceId", processInstanceId);
            return (T) this;
        }
        /**
         * The targetUserId used when delegating a task. The option is a
         * java.lang.String type.
         */
        public T targetUserId(String targetUserId) {
            this.properties.put("targetUserId", targetUserId);
            return (T) this;
        }
        /**
         * The task instance to use with task operations. The option is a
         * org.kie.api.task.model.Task type.
         */
        public T task(Object task) {
            this.properties.put("task", task);
            return (T) this;
        }
        /**
         * the id of the task. The option is a java.lang.Long type.
         */
        public T taskId(Long taskId) {
            this.properties.put("taskId", taskId);
            return (T) this;
        }
        /**
         * A timeout value. The option is a java.lang.Integer type.
         */
        public T timeout(Integer timeout) {
            this.properties.put("timeout", timeout);
            return (T) this;
        }
        /**
         * userId to use with task operations. The option is a java.lang.String
         * type.
         */
        public T userId(String userId) {
            this.properties.put("userId", userId);
            return (T) this;
        }
        /**
         * the value to assign to the global identifier. The option is a
         * java.lang.Object type.
         */
        public T value(Object value) {
            this.properties.put("value", value);
            return (T) this;
        }
        /**
         * the id of the work item. The option is a java.lang.Long type.
         */
        public T workItemId(Long workItemId) {
            this.properties.put("workItemId", workItemId);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * The potentialOwners when nominateTask operation is performed. The
         * option is a java.util.List<java.lang.String> type.
         */
        public T entities(List<String> entities) {
            this.properties.put("entities", entities);
            return (T) this;
        }
        /**
         * To load additional classes when working with XML. The option is a
         * java.lang.Class[] type.
         */
        public T extraJaxbClasses(Class[] extraJaxbClasses) {
            this.properties.put("extraJaxbClasses", extraJaxbClasses);
            return (T) this;
        }
        /**
         * the variables that should be set for various operations. The option
         * is a java.util.Map<java.lang.String,java.lang.Object> type.
         */
        public T parameters(Map<String, Object> parameters) {
            this.properties.put("parameters", parameters);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
        /**
         * The list of status to use when filtering tasks. The option is a
         * java.util.List<java.lang.String> type.
         */
        public T statuses(List<String> statuses) {
            this.properties.put("statuses", statuses);
            return (T) this;
        }
        /**
         * Password for authentication. The option is a java.lang.String type.
         */
        public T password(String password) {
            this.properties.put("password", password);
            return (T) this;
        }
        /**
         * Username for authentication. The option is a java.lang.String type.
         */
        public T userName(String userName) {
            this.properties.put("userName", userName);
            return (T) this;
        }
    }

    public static class JBPMConsumer
            extends
                JBPMCommon<JBPMConsumer>
            implements
                EndpointDefinition.Consumer {
        public JBPMConsumer(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public JBPMConsumer bridgeErrorHandler(boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (JBPMConsumer) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public JBPMConsumer exceptionHandler(ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (JBPMConsumer) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public JBPMConsumer exchangePattern(ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (JBPMConsumer) this;
        }
    }

    public static class JBPMProducer
            extends
                JBPMCommon<JBPMProducer>
            implements
                EndpointDefinition.Producer {
        public JBPMProducer(String path) {
            super(path);
        }
        /**
         * The operation to perform. The option is a java.lang.String type.
         */
        public JBPMProducer operation(String operation) {
            this.properties.put("operation", operation);
            return (JBPMProducer) this;
        }
    }
}