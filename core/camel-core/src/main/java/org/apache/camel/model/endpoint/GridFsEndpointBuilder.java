/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoint;

import javax.annotation.Generated;
import org.apache.camel.ExchangePattern;
import org.apache.camel.model.AbstractEndpointBuilder;
import org.apache.camel.model.EndpointConsumerBuilder;
import org.apache.camel.model.EndpointProducerBuilder;
import org.apache.camel.spi.ExceptionHandler;

/**
 * Component for working with MongoDB GridFS.
 * 
 * Generated by camel-package-maven-plugin - do not edit this file!
 */
@Generated("org.apache.camel.maven.packaging.EndpointDslMojo")
public interface GridFsEndpointBuilder {


    public static class GridFsCommonBuilder<T extends AbstractEndpointBuilder>
            extends
                AbstractEndpointBuilder<T> {
        GridFsCommonBuilder(String path) {
            super("mongodb-gridfs", path);
        }
        /**
         * Name of com.mongodb.Mongo to use. The option is a java.lang.String
         * type.
         */
        public T connectionBean(String connectionBean) {
            this.properties.put("connectionBean", connectionBean);
            return (T) this;
        }
        /**
         * Sets the name of the GridFS bucket within the database. Default is
         * fs. The option is a java.lang.String type.
         */
        public T bucket(String bucket) {
            this.properties.put("bucket", bucket);
            return (T) this;
        }
        /**
         * Sets the name of the MongoDB database to target. The option is a
         * java.lang.String type.
         */
        public T database(String database) {
            this.properties.put("database", database);
            return (T) this;
        }
        /**
         * Sets a MongoDB ReadPreference on the Mongo connection. Read
         * preferences set directly on the connection will be overridden by this
         * setting. The com.mongodb.ReadPreference#valueOf(String) utility
         * method is used to resolve the passed readPreference value. Some
         * examples for the possible values are nearest, primary or secondary
         * etc. The option is a com.mongodb.ReadPreference type.
         */
        public T readPreference(Object readPreference) {
            this.properties.put("readPreference", readPreference);
            return (T) this;
        }
        /**
         * Set the WriteConcern for write operations on MongoDB using the
         * standard ones. Resolved from the fields of the WriteConcern class by
         * calling the WriteConcern#valueOf(String) method. The option is a
         * com.mongodb.WriteConcern type.
         */
        public T writeConcern(Object writeConcern) {
            this.properties.put("writeConcern", writeConcern);
            return (T) this;
        }
        /**
         * Set the WriteConcern for write operations on MongoDB, passing in the
         * bean ref to a custom WriteConcern which exists in the Registry. You
         * can also use standard WriteConcerns by passing in their key. See the
         * {link #setWriteConcern(String) setWriteConcern} method. The option is
         * a com.mongodb.WriteConcern type.
         */
        public T writeConcernRef(Object writeConcernRef) {
            this.properties.put("writeConcernRef", writeConcernRef);
            return (T) this;
        }
        /**
         * Whether the endpoint should use basic property binding (Camel 2.x) or
         * the newer property binding with additional capabilities. The option
         * is a boolean type.
         */
        public T basicPropertyBinding(boolean basicPropertyBinding) {
            this.properties.put("basicPropertyBinding", basicPropertyBinding);
            return (T) this;
        }
        /**
         * Sets whether synchronous processing should be strictly used, or Camel
         * is allowed to use asynchronous processing (if supported). The option
         * is a boolean type.
         */
        public T synchronous(boolean synchronous) {
            this.properties.put("synchronous", synchronous);
            return (T) this;
        }
    }

    public static class GridFsConsumerBuilder
            extends
                GridFsCommonBuilder<GridFsConsumerBuilder>
            implements
                EndpointConsumerBuilder {
        public GridFsConsumerBuilder(String path) {
            super(path);
        }
        /**
         * Allows for bridging the consumer to the Camel routing Error Handler,
         * which mean any exceptions occurred while the consumer is trying to
         * pickup incoming messages, or the likes, will now be processed as a
         * message and handled by the routing Error Handler. By default the
         * consumer will use the org.apache.camel.spi.ExceptionHandler to deal
         * with exceptions, that will be logged at WARN or ERROR level and
         * ignored. The option is a boolean type.
         */
        public GridFsConsumerBuilder bridgeErrorHandler(
                boolean bridgeErrorHandler) {
            this.properties.put("bridgeErrorHandler", bridgeErrorHandler);
            return (GridFsConsumerBuilder) this;
        }
        /**
         * Sets the delay between polls within the Consumer. Default is 500ms.
         * The option is a long type.
         */
        public GridFsConsumerBuilder delay(long delay) {
            this.properties.put("delay", delay);
            return (GridFsConsumerBuilder) this;
        }
        /**
         * If the QueryType uses a FileAttribute, this sets the name of the
         * attribute that is used. Default is camel-processed. The option is a
         * java.lang.String type.
         */
        public GridFsConsumerBuilder fileAttributeName(String fileAttributeName) {
            this.properties.put("fileAttributeName", fileAttributeName);
            return (GridFsConsumerBuilder) this;
        }
        /**
         * Sets the initialDelay before the consumer will start polling. Default
         * is 1000ms. The option is a long type.
         */
        public GridFsConsumerBuilder initialDelay(long initialDelay) {
            this.properties.put("initialDelay", initialDelay);
            return (GridFsConsumerBuilder) this;
        }
        /**
         * If the QueryType uses a persistent timestamp, this sets the name of
         * the collection within the DB to store the timestamp. The option is a
         * java.lang.String type.
         */
        public GridFsConsumerBuilder persistentTSCollection(
                String persistentTSCollection) {
            this.properties.put("persistentTSCollection", persistentTSCollection);
            return (GridFsConsumerBuilder) this;
        }
        /**
         * If the QueryType uses a persistent timestamp, this is the ID of the
         * object in the collection to store the timestamp. The option is a
         * java.lang.String type.
         */
        public GridFsConsumerBuilder persistentTSObject(
                String persistentTSObject) {
            this.properties.put("persistentTSObject", persistentTSObject);
            return (GridFsConsumerBuilder) this;
        }
        /**
         * Additional query parameters (in JSON) that are used to configure the
         * query used for finding files in the GridFsConsumer. The option is a
         * java.lang.String type.
         */
        public GridFsConsumerBuilder query(String query) {
            this.properties.put("query", query);
            return (GridFsConsumerBuilder) this;
        }
        /**
         * Sets the QueryStrategy that is used for polling for new files.
         * Default is Timestamp. The option is a
         * org.apache.camel.component.mongodb.gridfs.QueryStrategy type.
         */
        public GridFsConsumerBuilder queryStrategy(QueryStrategy queryStrategy) {
            this.properties.put("queryStrategy", queryStrategy);
            return (GridFsConsumerBuilder) this;
        }
        /**
         * To let the consumer use a custom ExceptionHandler. Notice if the
         * option bridgeErrorHandler is enabled then this option is not in use.
         * By default the consumer will deal with exceptions, that will be
         * logged at WARN or ERROR level and ignored. The option is a
         * org.apache.camel.spi.ExceptionHandler type.
         */
        public GridFsConsumerBuilder exceptionHandler(
                ExceptionHandler exceptionHandler) {
            this.properties.put("exceptionHandler", exceptionHandler);
            return (GridFsConsumerBuilder) this;
        }
        /**
         * Sets the exchange pattern when the consumer creates an exchange. The
         * option is a org.apache.camel.ExchangePattern type.
         */
        public GridFsConsumerBuilder exchangePattern(
                ExchangePattern exchangePattern) {
            this.properties.put("exchangePattern", exchangePattern);
            return (GridFsConsumerBuilder) this;
        }
    }

    public static class GridFsProducerBuilder
            extends
                GridFsCommonBuilder<GridFsProducerBuilder>
            implements
                EndpointProducerBuilder {
        public GridFsProducerBuilder(String path) {
            super(path);
        }
        /**
         * Sets the operation this endpoint will execute against GridRS. The
         * option is a java.lang.String type.
         */
        public GridFsProducerBuilder operation(String operation) {
            this.properties.put("operation", operation);
            return (GridFsProducerBuilder) this;
        }
    }

    public static enum QueryStrategy {
        TimeStamp, PersistentTimestamp, FileAttribute, TimeStampAndFileAttribute, PersistentTimestampAndFileAttribute;
    }
    public default GridFsConsumerBuilder fromGridFs(String path) {
        return new GridFsConsumerBuilder(path);
    }
    public default GridFsProducerBuilder toGridFs(String path) {
        return new GridFsProducerBuilder(path);
    }
}